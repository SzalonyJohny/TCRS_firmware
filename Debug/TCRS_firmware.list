
TCRS_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c88c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b24  0800ca2c  0800ca2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f550  0800f550  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f550  0800f550  0001f550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f558  0800f558  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f55c  0800f55c  0001f55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad40  2000008c  0800f5ec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000adcc  0800f5ec  0002adcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026400  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f5b  00000000  00000000  000464bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  0004b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  0004d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c757  00000000  00000000  0004ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021cf6  00000000  00000000  0006b1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b49  00000000  00000000  0008cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078bc  00000000  00000000  0012da44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca14 	.word	0x0800ca14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800ca14 	.word	0x0800ca14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_Z18start_display_taskPv>:
#include "../st7735/fonts.h"
#include "../st7735/testimg.h"



void start_display_task(void *argument){
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af04      	add	r7, sp, #16
 800057e:	6078      	str	r0, [r7, #4]


	for(;;){


		ST7735_FillScreen(ST7735_BLACK);
 8000580:	2000      	movs	r0, #0
 8000582:	f001 f825 	bl	80015d0 <_Z17ST7735_FillScreent>
//		for(int y = 0; y < ST7735_HEIGHT; y++) {
//			ST7735_DrawPixel(0, y, ST7735_RED);
//			ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
//		}

		osDelay(300);
 8000586:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800058a:	f008 fab2 	bl	8008af2 <osDelay>

		// Check fonts
		ST7735_FillScreen(ST7735_BLACK);
 800058e:	2000      	movs	r0, #0
 8000590:	f001 f81e 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8000594:	4b68      	ldr	r3, [pc, #416]	; (8000738 <_Z18start_display_taskPv+0x1c0>)
 8000596:	2200      	movs	r2, #0
 8000598:	9202      	str	r2, [sp, #8]
 800059a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a65      	ldr	r2, [pc, #404]	; (800073c <_Z18start_display_taskPv+0x1c4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 ff56 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	9202      	str	r2, [sp, #8]
 80005b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a60      	ldr	r2, [pc, #384]	; (8000744 <_Z18start_display_taskPv+0x1cc>)
 80005c4:	211e      	movs	r1, #30
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 ff48 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80005cc:	4b5e      	ldr	r3, [pc, #376]	; (8000748 <_Z18start_display_taskPv+0x1d0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	9202      	str	r2, [sp, #8]
 80005d2:	221f      	movs	r2, #31
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a5b      	ldr	r2, [pc, #364]	; (800074c <_Z18start_display_taskPv+0x1d4>)
 80005de:	2154      	movs	r1, #84	; 0x54
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 ff3b 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f008 fa83 	bl	8008af2 <osDelay>

		// Check colors
		ST7735_FillScreen(ST7735_BLACK);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ffef 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80005f2:	4b53      	ldr	r3, [pc, #332]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	9202      	str	r2, [sp, #8]
 80005f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a52      	ldr	r2, [pc, #328]	; (8000750 <_Z18start_display_taskPv+0x1d8>)
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f000 ff27 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f008 fa6f 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_BLUE);
 8000614:	201f      	movs	r0, #31
 8000616:	f000 ffdb 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 800061a:	4b49      	ldr	r3, [pc, #292]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 800061c:	221f      	movs	r2, #31
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	2200      	movs	r2, #0
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a4a      	ldr	r2, [pc, #296]	; (8000754 <_Z18start_display_taskPv+0x1dc>)
 800062c:	2100      	movs	r1, #0
 800062e:	2000      	movs	r0, #0
 8000630:	f000 ff14 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000634:	20c8      	movs	r0, #200	; 0xc8
 8000636:	f008 fa5c 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_RED);
 800063a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800063e:	f000 ffc7 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 8000642:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000644:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000648:	9202      	str	r2, [sp, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <_Z18start_display_taskPv+0x1e0>)
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f000 feff 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f008 fa47 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_GREEN);
 8000664:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000668:	f000 ffb2 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 800066e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000672:	9202      	str	r2, [sp, #8]
 8000674:	2200      	movs	r2, #0
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	9200      	str	r2, [sp, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a37      	ldr	r2, [pc, #220]	; (800075c <_Z18start_display_taskPv+0x1e4>)
 8000680:	2100      	movs	r1, #0
 8000682:	2000      	movs	r0, #0
 8000684:	f000 feea 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f008 fa32 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_CYAN);
 800068e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000692:	f000 ff9d 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000698:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800069c:	9202      	str	r2, [sp, #8]
 800069e:	2200      	movs	r2, #0
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <_Z18start_display_taskPv+0x1e8>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fed5 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 80006b2:	20c8      	movs	r0, #200	; 0xc8
 80006b4:	f008 fa1d 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_MAGENTA);
 80006b8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80006bc:	f000 ff88 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80006c2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80006c6:	9202      	str	r2, [sp, #8]
 80006c8:	2200      	movs	r2, #0
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <_Z18start_display_taskPv+0x1ec>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fec0 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 80006dc:	20c8      	movs	r0, #200	; 0xc8
 80006de:	f008 fa08 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_YELLOW);
 80006e2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80006e6:	f000 ff73 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80006ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80006f0:	9202      	str	r2, [sp, #8]
 80006f2:	2200      	movs	r2, #0
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <_Z18start_display_taskPv+0x1f0>)
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 feab 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f008 f9f3 	bl	8008af2 <osDelay>

		ST7735_FillScreen(ST7735_WHITE);
 800070c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000710:	f000 ff5e 	bl	80015d0 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071a:	9202      	str	r2, [sp, #8]
 800071c:	2200      	movs	r2, #0
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	9200      	str	r2, [sp, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <_Z18start_display_taskPv+0x1f4>)
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fe96 	bl	800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000730:	20c8      	movs	r0, #200	; 0xc8
 8000732:	f008 f9de 	bl	8008af2 <osDelay>
		ST7735_FillScreen(ST7735_BLACK);
 8000736:	e723      	b.n	8000580 <_Z18start_display_taskPv+0x8>
 8000738:	20000004 	.word	0x20000004
 800073c:	0800ca2c 	.word	0x0800ca2c
 8000740:	2000000c 	.word	0x2000000c
 8000744:	0800ca60 	.word	0x0800ca60
 8000748:	20000014 	.word	0x20000014
 800074c:	0800ca80 	.word	0x0800ca80
 8000750:	0800ca8c 	.word	0x0800ca8c
 8000754:	0800ca94 	.word	0x0800ca94
 8000758:	0800ca9c 	.word	0x0800ca9c
 800075c:	0800caa0 	.word	0x0800caa0
 8000760:	0800caa8 	.word	0x0800caa8
 8000764:	0800cab0 	.word	0x0800cab0
 8000768:	0800cab8 	.word	0x0800cab8
 800076c:	0800cac0 	.word	0x0800cac0

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 ff3e 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f83c 	bl	80007f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f938 	bl	80009f0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000780:	f000 f906 	bl	8000990 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8000784:	f000 f8c8 	bl	8000918 <_ZL12MX_SPI1_Initv>
  MX_SDIO_SD_Init();
 8000788:	f000 f8a6 	bl	80008d8 <_ZL15MX_SDIO_SD_Initv>
  MX_FATFS_Init();
 800078c:	f005 f844 	bl	8005818 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000790:	f000 fdd6 	bl	8001340 <_Z11ST7735_Initv>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000794:	f008 f89a 	bl	80088cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <main+0x60>)
 800079a:	2100      	movs	r1, #0
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x64>)
 800079e:	f008 f916 	bl	80089ce <osThreadNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <main+0x68>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* creation of display_task */
  display_taskHandle = osThreadNew(start_display_task, NULL, &display_task_attributes);
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <main+0x6c>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <main+0x70>)
 80007ae:	f008 f90e 	bl	80089ce <osThreadNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <main+0x74>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* creation of sd_saver_task */
  sd_saver_taskHandle = osThreadNew(start_sd_saver_task, NULL, &sd_saver_task_attributes);
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <main+0x78>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <main+0x7c>)
 80007be:	f008 f906 	bl	80089ce <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <main+0x80>)
 80007c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007c8:	f008 f8c6 	bl	8008958 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x5c>
 80007ce:	bf00      	nop
 80007d0:	0800cb70 	.word	0x0800cb70
 80007d4:	08000ad5 	.word	0x08000ad5
 80007d8:	200002a4 	.word	0x200002a4
 80007dc:	0800cb94 	.word	0x0800cb94
 80007e0:	08000579 	.word	0x08000579
 80007e4:	200002a8 	.word	0x200002a8
 80007e8:	0800cbb8 	.word	0x0800cbb8
 80007ec:	08000b25 	.word	0x08000b25
 80007f0:	20002308 	.word	0x20002308

080007f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f00b fcca 	bl	800c19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000870:	2305      	movs	r3, #5
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fd71 	bl	8002360 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800088e:	f000 f943 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2103      	movs	r1, #3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 ffce 	bl	8002850 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80008c4:	f000 f928 	bl	8000b18 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80008e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000902:	220a      	movs	r2, #10
 8000904:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	200000a8 	.word	0x200000a8
 8000914:	40012c00 	.word	0x40012c00

08000918 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <_ZL12MX_SPI1_Initv+0x74>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800094c:	2210      	movs	r2, #16
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000964:	220a      	movs	r2, #10
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800096a:	f003 fcb8 	bl	80042de <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800097e:	f000 f8cb 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001ec 	.word	0x200001ec
 800098c:	40013000 	.word	0x40013000

08000990 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <_ZL11MX_DMA_Initv+0x5c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <_ZL11MX_DMA_Initv+0x5c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_ZL11MX_DMA_Initv+0x5c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	203a      	movs	r0, #58	; 0x3a
 80009b8:	f000 ff3a 	bl	8001830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009bc:	203a      	movs	r0, #58	; 0x3a
 80009be:	f000 ff53 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	203b      	movs	r0, #59	; 0x3b
 80009c8:	f000 ff32 	bl	8001830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009cc:	203b      	movs	r0, #59	; 0x3b
 80009ce:	f000 ff4b 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2105      	movs	r1, #5
 80009d6:	2045      	movs	r0, #69	; 0x45
 80009d8:	f000 ff2a 	bl	8001830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f000 ff43 	bl	8001868 <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	211c      	movs	r1, #28
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <_ZL12MX_GPIO_Initv+0xdc>)
 8000a60:	f001 fc4a 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2107      	movs	r1, #7
 8000a68:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000a6a:	f001 fc45 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DISPLAY_CS_Pin;
 8000a6e:	231c      	movs	r3, #28
 8000a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <_ZL12MX_GPIO_Initv+0xdc>)
 8000a86:	f001 fa9b 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_COMAND_Pin DISPLAY_RESET_Pin DISPLAY_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000aa2:	f001 fa8d 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_1V8_Pin */
  GPIO_InitStruct.Pin = EN_1V8_Pin;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EN_1V8_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000abc:	f001 fa80 	bl	8001fc0 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f008 f807 	bl	8008af2 <osDelay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4802      	ldr	r0, [pc, #8]	; (8000af0 <_Z16StartDefaultTaskPv+0x1c>)
 8000ae8:	f001 fc1f 	bl	800232a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000aec:	e7f6      	b.n	8000adc <_Z16StartDefaultTaskPv+0x8>
 8000aee:	bf00      	nop
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b06:	f000 fd97 	bl	8001638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40014800 	.word	0x40014800

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <_Z19start_sd_saver_taskPv>:

unsigned int byteswritten = 0;



void start_sd_saver_task(void *argument){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]


	char string_to_save[64];

	unsigned int counter = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c

	//FATFS_LinkDriver(&SD_Driver, SDPath);

	initFileSystem();
 8000b30:	f000 f826 	bl	8000b80 <_Z14initFileSystemv>

	for(;;){

		auto size = snprintf(string_to_save, 64, "zapisuje dane %d, \n\r", counter++);
 8000b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000b3a:	f107 0008 	add.w	r0, r7, #8
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <_Z19start_sd_saver_taskPv+0x4c>)
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	f00b fb33 	bl	800c1ac <sniprintf>
 8000b46:	64b8      	str	r0, [r7, #72]	; 0x48
		f_write(&SDFile, string_to_save, size, &byteswritten);
 8000b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b4a:	f107 0108 	add.w	r1, r7, #8
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <_Z19start_sd_saver_taskPv+0x50>)
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <_Z19start_sd_saver_taskPv+0x54>)
 8000b52:	f007 f91a 	bl	8007d8a <f_write>

		f_sync(&SDFile);
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <_Z19start_sd_saver_taskPv+0x54>)
 8000b58:	f007 fada 	bl	8008110 <f_sync>

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <_Z19start_sd_saver_taskPv+0x58>)
 8000b60:	f001 fbe3 	bl	800232a <HAL_GPIO_TogglePin>
		osDelay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b68:	f007 ffc3 	bl	8008af2 <osDelay>
	}
 8000b6c:	e7e2      	b.n	8000b34 <_Z19start_sd_saver_taskPv+0x10>
 8000b6e:	bf00      	nop
 8000b70:	0800caf4 	.word	0x0800caf4
 8000b74:	20004368 	.word	0x20004368
 8000b78:	20008d14 	.word	0x20008d14
 8000b7c:	40020000 	.word	0x40020000

08000b80 <_Z14initFileSystemv>:

}


FRESULT initFileSystem() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

	FRESULT res = FRESULT::FR_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]

	res = f_mount(&SDFatFS, SDPath, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4912      	ldr	r1, [pc, #72]	; (8000bd8 <_Z14initFileSystemv+0x58>)
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <_Z14initFileSystemv+0x5c>)
 8000b90:	f006 fec4 	bl	800791c <f_mount>
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]

    uint8_t val = BSP_SD_IsDetected();
 8000b98:	f004 fef5 	bl	8005986 <BSP_SD_IsDetected>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState val2 = HAL_GPIO_ReadPin(EN_1V8_GPIO_Port, EN_1V8_Pin);
 8000ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <_Z14initFileSystemv+0x60>)
 8000ba6:	f001 fb8f 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	717b      	strb	r3, [r7, #5]

	res =  f_open(&SDFile, "t.txt", FA_OPEN_APPEND | FA_WRITE);
 8000bae:	2232      	movs	r2, #50	; 0x32
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <_Z14initFileSystemv+0x64>)
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <_Z14initFileSystemv+0x68>)
 8000bb4:	f006 ff16 	bl	80079e4 <f_open>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]


	res = f_lseek(&SDFile, f_size(&SDFile));
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <_Z14initFileSystemv+0x68>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <_Z14initFileSystemv+0x68>)
 8000bc4:	f007 fb2d 	bl	8008222 <f_lseek>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]

	return res;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20008d10 	.word	0x20008d10
 8000bdc:	20009d44 	.word	0x20009d44
 8000be0:	40020400 	.word	0x40020400
 8000be4:	0800cb0c 	.word	0x0800cb0c
 8000be8:	20008d14 	.word	0x20008d14

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x54>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_MspInit+0x54>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x54>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x54>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f000 fdfd 	bl	8001830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a70      	ldr	r2, [pc, #448]	; (8000e24 <HAL_SD_MspInit+0x1e0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	f040 80da 	bne.w	8000e1c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	4b6e      	ldr	r3, [pc, #440]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	4a6d      	ldr	r2, [pc, #436]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c76:	6453      	str	r3, [r2, #68]	; 0x44
 8000c78:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b67      	ldr	r3, [pc, #412]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a66      	ldr	r2, [pc, #408]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b64      	ldr	r3, [pc, #400]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b60      	ldr	r3, [pc, #384]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a5f      	ldr	r2, [pc, #380]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <HAL_SD_MspInit+0x1e4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000cbc:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4854      	ldr	r0, [pc, #336]	; (8000e2c <HAL_SD_MspInit+0x1e8>)
 8000cda:	f001 f971 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484d      	ldr	r0, [pc, #308]	; (8000e30 <HAL_SD_MspInit+0x1ec>)
 8000cfc:	f001 f960 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d00:	2330      	movs	r3, #48	; 0x30
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d10:	230c      	movs	r3, #12
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4845      	ldr	r0, [pc, #276]	; (8000e30 <HAL_SD_MspInit+0x1ec>)
 8000d1c:	f001 f950 	bl	8001fc0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d20:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <HAL_SD_MspInit+0x1f4>)
 8000d24:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d48:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d54:	2220      	movs	r2, #32
 8000d56:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d64:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d6a:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d7a:	482e      	ldr	r0, [pc, #184]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d7c:	f000 fd82 	bl	8001884 <HAL_DMA_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000d86:	f7ff fec7 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <HAL_SD_MspInit+0x1f0>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_SD_MspInit+0x1fc>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dca:	2220      	movs	r2, #32
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000de2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000dea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000df2:	f000 fd47 	bl	8001884 <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000dfc:	f7ff fe8c 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_SD_MspInit+0x1f8>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2031      	movs	r0, #49	; 0x31
 8000e12:	f000 fd0d 	bl	8001830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e16:	2031      	movs	r0, #49	; 0x31
 8000e18:	f000 fd26 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	2000012c 	.word	0x2000012c
 8000e38:	40026458 	.word	0x40026458
 8000e3c:	2000018c 	.word	0x2000018c
 8000e40:	400264a0 	.word	0x400264a0

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <HAL_SPI_MspInit+0xf8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d165      	bne.n	8000f32 <HAL_SPI_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <HAL_SPI_MspInit+0x100>)
 8000eba:	f001 f881 	bl	8001fc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_SPI_MspInit+0x108>)
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ec6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ece:	2240      	movs	r2, #64	; 0x40
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ef4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ef8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f08:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_INC16;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f10:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f18:	f000 fcb4 	bl	8001884 <HAL_DMA_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 8000f22:	f7ff fdf9 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f2a:	649a      	str	r2, [r3, #72]	; 0x48
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	20000244 	.word	0x20000244
 8000f4c:	40026440 	.word	0x40026440

08000f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	201a      	movs	r0, #26
 8000f66:	f000 fc63 	bl	8001830 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f6a:	201a      	movs	r0, #26
 8000f6c:	f000 fc7c 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f8c:	f107 0210 	add.w	r2, r7, #16
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fe40 	bl	8002c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f9c:	f001 fe2a 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8000fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9b      	lsrs	r3, r3, #18
 8000fac:	3b01      	subs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_InitTick+0xac>)
 8000fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fbc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fd2:	f003 fc2d 	bl	8004830 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d104      	bne.n	8000fe6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fde:	f003 fc81 	bl	80048e4 <HAL_TIM_Base_Start_IT>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	20008cc0 	.word	0x20008cc0
 8000ffc:	40014800 	.word	0x40014800

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001032:	f003 fcb9 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20008cc0 	.word	0x20008cc0

08001040 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <SDIO_IRQHandler+0x10>)
 8001046:	f002 f891 	bl	800316c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000a8 	.word	0x200000a8

08001054 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA2_Stream2_IRQHandler+0x10>)
 800105a:	f000 fd3b 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000244 	.word	0x20000244

08001068 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA2_Stream3_IRQHandler+0x10>)
 800106e:	f000 fd31 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000012c 	.word	0x2000012c

0800107c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <DMA2_Stream6_IRQHandler+0x10>)
 8001082:	f000 fd27 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000018c 	.word	0x2000018c

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f00b f834 	bl	800c12c <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20020000 	.word	0x20020000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	2000436c 	.word	0x2000436c
 80010f8:	2000add0 	.word	0x2000add0

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f00a fff3 	bl	800c138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fb0d 	bl	8000770 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001164:	0800f560 	.word	0x0800f560
  ldr r2, =_sbss
 8001168:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800116c:	2000adcc 	.word	0x2000adcc

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <_ZL13ST7735_Selectv>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <_ZL13ST7735_Selectv+0x14>)
 800117e:	f001 f8bb 	bl	80022f8 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <_Z15ST7735_Unselectv>:

void ST7735_Unselect() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2110      	movs	r1, #16
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <_Z15ST7735_Unselectv+0x14>)
 8001196:	f001 f8af 	bl	80022f8 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020000 	.word	0x40020000

080011a4 <_ZL12ST7735_Resetv>:

static void ST7735_Reset() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <_ZL12ST7735_Resetv+0x24>)
 80011ae:	f001 f8a3 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 fa60 	bl	8001678 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2102      	movs	r1, #2
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <_ZL12ST7735_Resetv+0x24>)
 80011be:	f001 f89b 	bl	80022f8 <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400

080011cc <_ZL19ST7735_WriteCommandh>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <_ZL19ST7735_WriteCommandh+0x28>)
 80011dc:	f001 f88c 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <_ZL19ST7735_WriteCommandh+0x2c>)
 80011e8:	f003 f902 	bl	80043f0 <HAL_SPI_Transmit_DMA>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020400 	.word	0x40020400
 80011f8:	200001ec 	.word	0x200001ec

080011fc <_ZL16ST7735_WriteDataPhj>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2101      	movs	r1, #1
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <_ZL16ST7735_WriteDataPhj+0x2c>)
 800120c:	f001 f874 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <_ZL16ST7735_WriteDataPhj+0x30>)
 800121a:	f003 f8e9 	bl	80043f0 <HAL_SPI_Transmit_DMA>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400
 800122c:	200001ec 	.word	0x200001ec

08001230 <_ZL25ST7735_ExecuteCommandListPKh>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	73fa      	strb	r2, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d035      	beq.n	80012c2 <_ZL25ST7735_ExecuteCommandListPKh+0x92>
        uint8_t cmd = *addr++;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffb2 	bl	80011cc <_ZL19ST7735_WriteCommandh>

        numArgs = *addr++;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800127c:	7abb      	ldrb	r3, [r7, #10]
 800127e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001282:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <_ZL25ST7735_ExecuteCommandListPKh+0x6c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800128a:	7abb      	ldrb	r3, [r7, #10]
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb4 	bl	80011fc <_ZL16ST7735_WriteDataPhj>
            addr += numArgs;
 8001294:	7abb      	ldrb	r3, [r7, #10]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800129c:	89bb      	ldrh	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0cf      	beq.n	8001242 <_ZL25ST7735_ExecuteCommandListPKh+0x12>
            ms = *addr++;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012ac:	89bb      	ldrh	r3, [r7, #12]
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d102      	bne.n	80012b8 <_ZL25ST7735_ExecuteCommandListPKh+0x88>
 80012b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b6:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9dc 	bl	8001678 <HAL_Delay>
    while(numCommands--) {
 80012c0:	e7bf      	b.n	8001242 <_ZL25ST7735_ExecuteCommandListPKh+0x12>
        }
    }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZL23ST7735_SetAddressWindowhhhh>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80012ca:	b590      	push	{r4, r7, lr}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4604      	mov	r4, r0
 80012d2:	4608      	mov	r0, r1
 80012d4:	4611      	mov	r1, r2
 80012d6:	461a      	mov	r2, r3
 80012d8:	4623      	mov	r3, r4
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4603      	mov	r3, r0
 80012de:	71bb      	strb	r3, [r7, #6]
 80012e0:	460b      	mov	r3, r1
 80012e2:	717b      	strb	r3, [r7, #5]
 80012e4:	4613      	mov	r3, r2
 80012e6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80012e8:	202a      	movs	r0, #42	; 0x2a
 80012ea:	f7ff ff6f 	bl	80011cc <_ZL19ST7735_WriteCommandh>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	331a      	adds	r3, #26
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	737b      	strb	r3, [r7, #13]
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	331a      	adds	r3, #26
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2104      	movs	r1, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff77 	bl	80011fc <_ZL16ST7735_WriteDataPhj>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800130e:	202b      	movs	r0, #43	; 0x2b
 8001310:	f7ff ff5c 	bl	80011cc <_ZL19ST7735_WriteCommandh>
    data[1] = y0 + ST7735_YSTART;
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	3301      	adds	r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2104      	movs	r1, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff66 	bl	80011fc <_ZL16ST7735_WriteDataPhj>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001330:	202c      	movs	r0, #44	; 0x2c
 8001332:	f7ff ff4b 	bl	80011cc <_ZL19ST7735_WriteCommandh>
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
	...

08001340 <_Z11ST7735_Initv>:

void ST7735_Init() {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001344:	f7ff ff16 	bl	8001174 <_ZL13ST7735_Selectv>
    ST7735_Reset();
 8001348:	f7ff ff2c 	bl	80011a4 <_ZL12ST7735_Resetv>
    ST7735_ExecuteCommandList(init_cmds1);
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <_Z11ST7735_Initv+0x28>)
 800134e:	f7ff ff6f 	bl	8001230 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds2);
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <_Z11ST7735_Initv+0x2c>)
 8001354:	f7ff ff6c 	bl	8001230 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds3);
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <_Z11ST7735_Initv+0x30>)
 800135a:	f7ff ff69 	bl	8001230 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_Unselect();
 800135e:	f7ff ff15 	bl	800118c <_Z15ST7735_Unselectv>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	0800f408 	.word	0x0800f408
 800136c:	0800f444 	.word	0x0800f444
 8001370:	0800f454 	.word	0x0800f454

08001374 <_ZL16ST7735_WriteCharttc7FontDeftt>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001374:	b082      	sub	sp, #8
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b089      	sub	sp, #36	; 0x24
 800137a:	af00      	add	r7, sp, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
 8001382:	460b      	mov	r3, r1
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	b2d9      	uxtb	r1, r3
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800139a:	4413      	add	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2dc      	uxtb	r4, r3
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013aa:	4413      	add	r3, r2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4622      	mov	r2, r4
 80013b4:	f7ff ff89 	bl	80012ca <_ZL23ST7735_SetAddressWindowhhhh>

    for(i = 0; i < font.height; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013c0:	461a      	mov	r2, r3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d242      	bcs.n	800144e <_ZL16ST7735_WriteCharttc7FontDeftt+0xda>
        b = font.data[(ch - 32) * font.height + i];
 80013c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	3b20      	subs	r3, #32
 80013ce:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	440b      	add	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013ec:	461a      	mov	r2, r3
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d228      	bcs.n	8001446 <_ZL16ST7735_WriteCharttc7FontDeftt+0xd2>
            if((b << j) & 0x8000)  {
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00d      	beq.n	8001420 <_ZL16ST7735_WriteCharttc7FontDeftt+0xac>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001406:	121b      	asrs	r3, r3, #8
 8001408:	b2db      	uxtb	r3, r3
 800140a:	743b      	strb	r3, [r7, #16]
 800140c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800140e:	b2db      	uxtb	r3, r3
 8001410:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2102      	movs	r1, #2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff feef 	bl	80011fc <_ZL16ST7735_WriteDataPhj>
 800141e:	e00e      	b.n	800143e <_ZL16ST7735_WriteCharttc7FontDeftt+0xca>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001420:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001424:	121b      	asrs	r3, r3, #8
 8001426:	b2db      	uxtb	r3, r3
 8001428:	733b      	strb	r3, [r7, #12]
 800142a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2102      	movs	r1, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fedf 	bl	80011fc <_ZL16ST7735_WriteDataPhj>
        for(j = 0; j < font.width; j++) {
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	3301      	adds	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e7d0      	b.n	80013e8 <_ZL16ST7735_WriteCharttc7FontDeftt+0x74>
    for(i = 0; i < font.height; i++) {
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	e7b6      	b.n	80013bc <_ZL16ST7735_WriteCharttc7FontDeftt+0x48>
            }
        }
    }
}
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001458:	b002      	add	sp, #8
 800145a:	4770      	bx	lr

0800145c <_Z18ST7735_WriteStringttPKc7FontDeftt>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800145c:	b082      	sub	sp, #8
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af04      	add	r7, sp, #16
 8001464:	603a      	str	r2, [r7, #0]
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	4603      	mov	r3, r0
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	460b      	mov	r3, r1
 800146e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001470:	f7ff fe80 	bl	8001174 <_ZL13ST7735_Selectv>

    while(*str) {
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d02f      	beq.n	80014dc <_Z18ST7735_WriteStringttPKc7FontDeftt+0x80>
        if(x + font.width >= ST7735_WIDTH) {
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	7d3a      	ldrb	r2, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	2b4f      	cmp	r3, #79	; 0x4f
 8001484:	dd13      	ble.n	80014ae <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
            x = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800148a:	7d7b      	ldrb	r3, [r7, #21]
 800148c:	b29a      	uxth	r2, r3
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	7d7a      	ldrb	r2, [r7, #21]
 8001498:	4413      	add	r3, r2
 800149a:	2b9f      	cmp	r3, #159	; 0x9f
 800149c:	dc1d      	bgt.n	80014da <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7e>
                break;
            }

            if(*str == ' ') {
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d103      	bne.n	80014ae <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
                // skip spaces in the beginning of the new line
                str++;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
                continue;
 80014ac:	e014      	b.n	80014d8 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	88b9      	ldrh	r1, [r7, #4]
 80014b4:	88f8      	ldrh	r0, [r7, #6]
 80014b6:	8c3b      	ldrh	r3, [r7, #32]
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	8bbb      	ldrh	r3, [r7, #28]
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f7ff ff56 	bl	8001374 <_ZL16ST7735_WriteCharttc7FontDeftt>
        x += font.width;
 80014c8:	7d3b      	ldrb	r3, [r7, #20]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4413      	add	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
        str++;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80014d8:	e7cc      	b.n	8001474 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x18>
                break;
 80014da:	bf00      	nop
    }

    ST7735_Unselect();
 80014dc:	f7ff fe56 	bl	800118c <_Z15ST7735_Unselectv>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ea:	b002      	add	sp, #8
 80014ec:	4770      	bx	lr
	...

080014f0 <_Z20ST7735_FillRectanglettttt>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	4603      	mov	r3, r0
 8001504:	80bb      	strh	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
 800150a:	4613      	mov	r3, r2
 800150c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2b4f      	cmp	r3, #79	; 0x4f
 8001512:	d855      	bhi.n	80015c0 <_Z20ST7735_FillRectanglettttt+0xd0>
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	2b9f      	cmp	r3, #159	; 0x9f
 8001518:	d852      	bhi.n	80015c0 <_Z20ST7735_FillRectanglettttt+0xd0>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	4413      	add	r3, r2
 8001520:	2b50      	cmp	r3, #80	; 0x50
 8001522:	dd03      	ble.n	800152c <_Z20ST7735_FillRectanglettttt+0x3c>
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800152a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800152c:	88ba      	ldrh	r2, [r7, #4]
 800152e:	883b      	ldrh	r3, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	2ba0      	cmp	r3, #160	; 0xa0
 8001534:	dd03      	ble.n	800153e <_Z20ST7735_FillRectanglettttt+0x4e>
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800153c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800153e:	f7ff fe19 	bl	8001174 <_ZL13ST7735_Selectv>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2d8      	uxtb	r0, r3
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	b2d9      	uxtb	r1, r3
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b2dc      	uxtb	r4, r3
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	883b      	ldrh	r3, [r7, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4622      	mov	r2, r4
 800156c:	f7ff fead 	bl	80012ca <_ZL23ST7735_SetAddressWindowhhhh>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001570:	8c3b      	ldrh	r3, [r7, #32]
 8001572:	121b      	asrs	r3, r3, #8
 8001574:	b2db      	uxtb	r3, r3
 8001576:	733b      	strb	r3, [r7, #12]
 8001578:	8c3b      	ldrh	r3, [r7, #32]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <_Z20ST7735_FillRectanglettttt+0xd8>)
 8001584:	f000 feb8 	bl	80022f8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001588:	883b      	ldrh	r3, [r7, #0]
 800158a:	80bb      	strh	r3, [r7, #4]
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d013      	beq.n	80015ba <_Z20ST7735_FillRectanglettttt+0xca>
        for(x = w; x > 0; x--) {
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	80fb      	strh	r3, [r7, #6]
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <_Z20ST7735_FillRectanglettttt+0xc2>
            HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2202      	movs	r2, #2
 80015a2:	4619      	mov	r1, r3
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <_Z20ST7735_FillRectanglettttt+0xdc>)
 80015a6:	f002 ff23 	bl	80043f0 <HAL_SPI_Transmit_DMA>
        for(x = w; x > 0; x--) {
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	80fb      	strh	r3, [r7, #6]
 80015b0:	e7f1      	b.n	8001596 <_Z20ST7735_FillRectanglettttt+0xa6>
    for(y = h; y > 0; y--) {
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	80bb      	strh	r3, [r7, #4]
 80015b8:	e7e8      	b.n	800158c <_Z20ST7735_FillRectanglettttt+0x9c>
        }
    }

    ST7735_Unselect();
 80015ba:	f7ff fde7 	bl	800118c <_Z15ST7735_Unselectv>
 80015be:	e000      	b.n	80015c2 <_Z20ST7735_FillRectanglettttt+0xd2>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80015c0:	bf00      	nop
}
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	40020400 	.word	0x40020400
 80015cc:	200001ec 	.word	0x200001ec

080015d0 <_Z17ST7735_FillScreent>:

void ST7735_FillScreen(uint16_t color) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	2250      	movs	r2, #80	; 0x50
 80015e2:	2100      	movs	r1, #0
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff83 	bl	80014f0 <_Z20ST7735_FillRectanglettttt>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_Init+0x40>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_Init+0x40>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x40>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f8fc 	bl	800181a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fc94 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fae0 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000020 	.word	0x20000020
 800165c:	20008d08 	.word	0x20008d08

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20008d08 	.word	0x20008d08

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000020 	.word	0x20000020

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff4c 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001842:	f7ff ff61 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff ffb1 	bl	80017b4 <NVIC_EncodePriority>
 8001852:	4602      	mov	r2, r0
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff80 	bl	8001760 <__NVIC_SetPriority>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff54 	bl	8001724 <__NVIC_EnableIRQ>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fee6 	bl	8001660 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e099      	b.n	80019d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e00f      	b.n	80018e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fecd 	bl	8001660 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d908      	bls.n	80018e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e078      	b.n	80019d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e8      	bne.n	80018c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_DMA_Init+0x158>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2b04      	cmp	r3, #4
 800193a:	d107      	bne.n	800194c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4313      	orrs	r3, r2
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0307 	bic.w	r3, r3, #7
 8001962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b04      	cmp	r3, #4
 8001974:	d117      	bne.n	80019a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fa9d 	bl	8001ec8 <DMA_CheckFifoParam>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019a2:	2301      	movs	r3, #1
 80019a4:	e016      	b.n	80019d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa54 	bl	8001e5c <DMA_CalcBaseAndBitshift>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	223f      	movs	r2, #63	; 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	f010803f 	.word	0xf010803f

080019e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Start_IT+0x26>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e040      	b.n	8001a88 <HAL_DMA_Start_IT+0xa8>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d12f      	bne.n	8001a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f9e6 	bl	8001e00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	223f      	movs	r2, #63	; 0x3f
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0216 	orr.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0208 	orr.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00c      	b.n	8001ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_DMA_IRQHandler+0x258>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_DMA_IRQHandler+0x25c>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2208      	movs	r2, #8
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0204 	bic.w	r2, r2, #4
 8001b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2201      	movs	r2, #1
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f043 0202 	orr.w	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2204      	movs	r2, #4
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d043      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03c      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2210      	movs	r2, #16
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d024      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
 8001c02:	e01f      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0208 	bic.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2220      	movs	r2, #32
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 808e 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8086 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d136      	bne.n	8001cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0216 	bic.w	r2, r2, #22
 8001c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <HAL_DMA_IRQHandler+0x1da>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0208 	bic.w	r2, r2, #8
 8001cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d07d      	beq.n	8001dde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
        }
        return;
 8001cea:	e078      	b.n	8001dde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d030      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	e02b      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	e022      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d032      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d022      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d307      	bcc.n	8001dba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f2      	bne.n	8001d9e <HAL_DMA_IRQHandler+0x2ca>
 8001db8:	e000      	b.n	8001dbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dde:	bf00      	nop
    }
  }
}
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop

08001de8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d108      	bne.n	8001e40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e3e:	e007      	b.n	8001e50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3b10      	subs	r3, #16
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d909      	bls.n	8001e9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	1d1a      	adds	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001e9c:	e007      	b.n	8001eae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	aaaaaaab 	.word	0xaaaaaaab
 8001ec4:	0800f480 	.word	0x0800f480

08001ec8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11f      	bne.n	8001f22 <DMA_CheckFifoParam+0x5a>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d856      	bhi.n	8001f96 <DMA_CheckFifoParam+0xce>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <DMA_CheckFifoParam+0x28>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f01 	.word	0x08001f01
 8001ef4:	08001f13 	.word	0x08001f13
 8001ef8:	08001f01 	.word	0x08001f01
 8001efc:	08001f97 	.word	0x08001f97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d046      	beq.n	8001f9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f10:	e043      	b.n	8001f9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f1a:	d140      	bne.n	8001f9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f20:	e03d      	b.n	8001f9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2a:	d121      	bne.n	8001f70 <DMA_CheckFifoParam+0xa8>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d837      	bhi.n	8001fa2 <DMA_CheckFifoParam+0xda>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <DMA_CheckFifoParam+0x70>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f4f 	.word	0x08001f4f
 8001f40:	08001f49 	.word	0x08001f49
 8001f44:	08001f61 	.word	0x08001f61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4c:	e030      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d025      	beq.n	8001fa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5e:	e022      	b.n	8001fa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f68:	d11f      	bne.n	8001faa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f6e:	e01c      	b.n	8001faa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d903      	bls.n	8001f7e <DMA_CheckFifoParam+0xb6>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d003      	beq.n	8001f84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f7c:	e018      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
      break;
 8001f82:	e015      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      break;
 8001f94:	e00b      	b.n	8001fae <DMA_CheckFifoParam+0xe6>
      break;
 8001f96:	bf00      	nop
 8001f98:	e00a      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9a:	bf00      	nop
 8001f9c:	e008      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e006      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e004      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e002      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001faa:	bf00      	nop
 8001fac:	e000      	b.n	8001fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
    }
  } 
  
  return status; 
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e159      	b.n	8002290 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8148 	bne.w	800228a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a2 	beq.w	800228a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002162:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d019      	beq.n	80021c2 <HAL_GPIO_Init+0x202>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2f4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x1fe>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x1fa>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_GPIO_Init+0x300>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x1f2>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_GPIO_Init+0x304>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002206:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_GPIO_Init+0x304>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_GPIO_Init+0x304>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f aea2 	bls.w	8001fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	041a      	lsls	r2, r3, #16
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43d9      	mvns	r1, r3
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	400b      	ands	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e264      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d075      	beq.n	800246a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237e:	4ba3      	ldr	r3, [pc, #652]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b04      	cmp	r3, #4
 8002388:	d00c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4ba0      	ldr	r3, [pc, #640]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d112      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4b9d      	ldr	r3, [pc, #628]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b99      	ldr	r3, [pc, #612]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05b      	beq.n	8002468 <HAL_RCC_OscConfig+0x108>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d157      	bne.n	8002468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e23f      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x74>
 80023c6:	4b91      	ldr	r3, [pc, #580]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a90      	ldr	r2, [pc, #576]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a8a      	ldr	r2, [pc, #552]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023f8:	4b84      	ldr	r3, [pc, #528]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a83      	ldr	r2, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b81      	ldr	r3, [pc, #516]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff f922 	bl	8001660 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f91e 	bl	8001660 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e204      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xc0>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff f90e 	bl	8001660 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff f90a 	bl	8001660 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1f0      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b6c      	ldr	r3, [pc, #432]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0xe8>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b62      	ldr	r3, [pc, #392]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b5c      	ldr	r3, [pc, #368]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c4      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4952      	ldr	r1, [pc, #328]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <HAL_RCC_OscConfig+0x2b0>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7ff f8c3 	bl	8001660 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff f8bf 	bl	8001660 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a5      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4940      	ldr	r1, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_OscConfig+0x2b0>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff f8a2 	bl	8001660 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002520:	f7ff f89e 	bl	8001660 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e184      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d030      	beq.n	80025ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7ff f882 	bl	8001660 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff f87e 	bl	8001660 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e164      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x200>
 800257e:	e015      	b.n	80025ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7ff f86b 	bl	8001660 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258e:	f7ff f867 	bl	8001660 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e14d      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a0 	beq.w	80026fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d121      	bne.n	800263a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff f82d 	bl	8001660 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e011      	b.n	800262e <HAL_RCC_OscConfig+0x2ce>
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	42470000 	.word	0x42470000
 8002614:	42470e80 	.word	0x42470e80
 8002618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261c:	f7ff f820 	bl	8001660 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e106      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b85      	ldr	r3, [pc, #532]	; (8002844 <HAL_RCC_OscConfig+0x4e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x2f0>
 8002642:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a80      	ldr	r2, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
 800264e:	e01c      	b.n	800268a <HAL_RCC_OscConfig+0x32a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x312>
 8002658:	4b7b      	ldr	r3, [pc, #492]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a7a      	ldr	r2, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	4b78      	ldr	r3, [pc, #480]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0x32a>
 8002672:	4b75      	ldr	r3, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	4b72      	ldr	r3, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d015      	beq.n	80026be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe ffe5 	bl	8001660 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe ffe1 	bl	8001660 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0c5      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <HAL_RCC_OscConfig+0x33a>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe ffcf 	bl	8001660 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe ffcb 	bl	8001660 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0af      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	4b5a      	ldr	r3, [pc, #360]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b56      	ldr	r3, [pc, #344]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 809b 	beq.w	800283a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d05c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d141      	bne.n	800279c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x4ec>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe ff9f 	bl	8001660 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe ff9b 	bl	8001660 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e081      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002738:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	019b      	lsls	r3, r3, #6
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x4ec>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe ff74 	bl	8001660 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe ff70 	bl	8001660 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e056      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x41c>
 800279a:	e04e      	b.n	800283a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x4ec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe ff5d 	bl	8001660 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe ff59 	bl	8001660 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e03f      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x44a>
 80027c8:	e037      	b.n	800283a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e032      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d028      	beq.n	8002836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d121      	bne.n	8002836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d11a      	bne.n	8002836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40007000 	.word	0x40007000
 8002848:	40023800 	.word	0x40023800
 800284c:	42470060 	.word	0x42470060

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0cc      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d90c      	bls.n	800288c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b8      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	494d      	ldr	r1, [pc, #308]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d044      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e067      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4934      	ldr	r1, [pc, #208]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe fe8e 	bl	8001660 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe fe8a 	bl	8001660 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e04f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d20c      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e032      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4916      	ldr	r1, [pc, #88]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029d6:	f000 f821 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	490a      	ldr	r1, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	5ccb      	ldrb	r3, [r1, r3]
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe faaa 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	0800cbdc 	.word	0x0800cbdc
 8002a14:	20000000 	.word	0x20000000
 8002a18:	2000001c 	.word	0x2000001c

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a34:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x40>
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	f200 80bd 	bhi.w	8002bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a4e:	e0b7      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a52:	60bb      	str	r3, [r7, #8]
       break;
 8002a54:	e0b7      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a56:	4b60      	ldr	r3, [pc, #384]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a58:	60bb      	str	r3, [r7, #8]
      break;
 8002a5a:	e0b4      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04d      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	ea02 0800 	and.w	r8, r2, r0
 8002a8a:	ea03 0901 	and.w	r9, r3, r1
 8002a8e:	4640      	mov	r0, r8
 8002a90:	4649      	mov	r1, r9
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	014b      	lsls	r3, r1, #5
 8002a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa0:	0142      	lsls	r2, r0, #5
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	ebb0 0008 	subs.w	r0, r0, r8
 8002aaa:	eb61 0109 	sbc.w	r1, r1, r9
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002abc:	0182      	lsls	r2, r0, #6
 8002abe:	1a12      	subs	r2, r2, r0
 8002ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	00d9      	lsls	r1, r3, #3
 8002ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad2:	00d0      	lsls	r0, r2, #3
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	eb12 0208 	adds.w	r2, r2, r8
 8002adc:	eb43 0309 	adc.w	r3, r3, r9
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0299      	lsls	r1, r3, #10
 8002aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aee:	0290      	lsls	r0, r2, #10
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f7fd fbbe 	bl	8000280 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e04a      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	461a      	mov	r2, r3
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	ea02 0400 	and.w	r4, r2, r0
 8002b26:	ea03 0501 	and.w	r5, r3, r1
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	014b      	lsls	r3, r1, #5
 8002b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b3c:	0142      	lsls	r2, r0, #5
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	1b00      	subs	r0, r0, r4
 8002b44:	eb61 0105 	sbc.w	r1, r1, r5
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	018b      	lsls	r3, r1, #6
 8002b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b56:	0182      	lsls	r2, r0, #6
 8002b58:	1a12      	subs	r2, r2, r0
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	00d9      	lsls	r1, r3, #3
 8002b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b6c:	00d0      	lsls	r0, r2, #3
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	1912      	adds	r2, r2, r4
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	0299      	lsls	r1, r3, #10
 8002b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b86:	0290      	lsls	r0, r2, #10
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f7fd fb72 	bl	8000280 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60bb      	str	r3, [r7, #8]
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bc2:	60bb      	str	r3, [r7, #8]
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	0800cbec 	.word	0x0800cbec

08002c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCC_GetClockConfig+0x60>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e022      	b.n	8002cd8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fd ffcd 	bl	8000c44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2203      	movs	r2, #3
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f814 	bl	8002ce0 <HAL_SD_InitCard>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00a      	b.n	8002cd8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af04      	add	r7, sp, #16
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002cfc:	2376      	movs	r3, #118	; 0x76
 8002cfe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681d      	ldr	r5, [r3, #0]
 8002d04:	466c      	mov	r4, sp
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f002 f809 	bl	8004d30 <SDIO_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e04c      	b.n	8002dca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_SD_InitCard+0xf4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 f841 	bl	8004dc2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_SD_InitCard+0xf4>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f001 f804 	bl	8003d54 <SD_PowerON>
 8002d4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02e      	b.n	8002dca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 ff25 	bl	8003bbc <SD_InitCard>
 8002d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01b      	b.n	8002dca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 f8a4 	bl	8004ee8 <SDMMC_CmdBlockLength>
 8002da0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00f      	beq.n	8002dc8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_SD_InitCard+0xf8>)
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	422580a0 	.word	0x422580a0
 8002dd8:	004005ff 	.word	0x004005ff

08002ddc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0c0      	b.n	8002f86 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 80b9 	bne.w	8002f84 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d907      	bls.n	8002e36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0a7      	b.n	8002f86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002e68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2200      	movs	r2, #0
 8002e70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3380      	adds	r3, #128	; 0x80
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	025b      	lsls	r3, r3, #9
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	f7fe fd99 	bl	80019e0 <HAL_DMA_Start_IT>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a33      	ldr	r2, [pc, #204]	; (8002f98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e050      	b.n	8002f86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002ee4:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	025b      	lsls	r3, r3, #9
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f04:	2390      	movs	r3, #144	; 0x90
 8002f06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f107 0210 	add.w	r2, r7, #16
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 ffb6 	bl	8004e90 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d90a      	bls.n	8002f40 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2282      	movs	r2, #130	; 0x82
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 f81a 	bl	8004f70 <SDMMC_CmdReadMultiBlock>
 8002f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f3e:	e009      	b.n	8002f54 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2281      	movs	r2, #129	; 0x81
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 ffed 	bl	8004f2c <SDMMC_CmdReadSingleBlock>
 8002f52:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e002      	b.n	8002f86 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3730      	adds	r7, #48	; 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	080039cb 	.word	0x080039cb
 8002f94:	08003a3d 	.word	0x08003a3d
 8002f98:	004005ff 	.word	0x004005ff
 8002f9c:	4225858c 	.word	0x4225858c

08002fa0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0c5      	b.n	8003154 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 80be 	bne.w	8003152 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d907      	bls.n	8002ffa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0ac      	b.n	8003154 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	4a4e      	ldr	r2, [pc, #312]	; (800315c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	4a4d      	ldr	r2, [pc, #308]	; (8003160 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800302c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2200      	movs	r2, #0
 8003034:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	2b01      	cmp	r3, #1
 800303c:	d002      	beq.n	8003044 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d90a      	bls.n	8003060 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22a0      	movs	r2, #160	; 0xa0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003056:	4618      	mov	r0, r3
 8003058:	f001 ffce 	bl	8004ff8 <SDMMC_CmdWriteMultiBlock>
 800305c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800305e:	e009      	b.n	8003074 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2290      	movs	r2, #144	; 0x90
 8003064:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306c:	4618      	mov	r0, r3
 800306e:	f001 ffa1 	bl	8004fb4 <SDMMC_CmdWriteSingleBlock>
 8003072:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a39      	ldr	r2, [pc, #228]	; (8003164 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e059      	b.n	8003154 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3380      	adds	r3, #128	; 0x80
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	f7fe fc7f 	bl	80019e0 <HAL_DMA_Start_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01c      	beq.n	8003122 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80030f6:	f023 0302 	bic.w	r3, r3, #2
 80030fa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e018      	b.n	8003154 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	025b      	lsls	r3, r3, #9
 800312c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800312e:	2390      	movs	r3, #144	; 0x90
 8003130:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800313a:	2301      	movs	r3, #1
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f107 0210 	add.w	r2, r7, #16
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f001 fea1 	bl	8004e90 <SDIO_ConfigData>

      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3730      	adds	r7, #48	; 0x30
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	080039a1 	.word	0x080039a1
 8003160:	08003a3d 	.word	0x08003a3d
 8003164:	004005ff 	.word	0x004005ff
 8003168:	4225858c 	.word	0x4225858c

0800316c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_SD_IRQHandler+0x2e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fffd 	bl	8004192 <SD_Read_IT>
 8003198:	e165      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 808f 	beq.w	80032c8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80031c2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80031c6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d039      	beq.n	8003256 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <HAL_SD_IRQHandler+0x8a>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 ff1e 	bl	800503c <SDMMC_CmdStopTransfer>
 8003200:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f92f 	bl	8003478 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003222:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <HAL_SD_IRQHandler+0xda>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f002 fb8c 	bl	8005964 <HAL_SD_RxCpltCallback>
 800324c:	e10b      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f002 fb7e 	bl	8005950 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003254:	e107      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8102 	beq.w	8003466 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d011      	beq.n	8003290 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f001 fee3 	bl	800503c <SDMMC_CmdStopTransfer>
 8003276:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8f4 	bl	8003478 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80e5 	bne.w	8003466 <HAL_SD_IRQHandler+0x2fa>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 80df 	bne.w	8003466 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f002 fb45 	bl	8005950 <HAL_SD_TxCpltCallback>
}
 80032c6:	e0ce      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_SD_IRQHandler+0x17c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 ffa7 	bl	8004234 <SD_Write_IT>
 80032e6:	e0be      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	f240 233a 	movw	r3, #570	; 0x23a
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b6 	beq.w	8003466 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	f043 0202 	orr.w	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	f043 0208 	orr.w	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	f043 0208 	orr.w	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f240 723a 	movw	r2, #1850	; 0x73a
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 fe4c 	bl	800503c <SDMMC_CmdStopTransfer>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f855 	bl	8003478 <HAL_SD_ErrorCallback>
}
 80033ce:	e04a      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d045      	beq.n	8003466 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_SD_IRQHandler+0x282>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d011      	beq.n	8003412 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_SD_IRQHandler+0x304>)
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fb48 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02f      	beq.n	8003466 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fb68 	bl	8003ae0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003410:	e029      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <HAL_SD_IRQHandler+0x2ba>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d011      	beq.n	800344a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_SD_IRQHandler+0x308>)
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fb2c 	bl	8001a90 <HAL_DMA_Abort_IT>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d013      	beq.n	8003466 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fb83 	bl	8003b4e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003448:	e00d      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f002 fa6c 	bl	800593c <HAL_SD_AbortCallback>
}
 8003464:	e7ff      	b.n	8003466 <HAL_SD_IRQHandler+0x2fa>
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	08003ae1 	.word	0x08003ae1
 8003474:	08003b4f 	.word	0x08003b4f

08003478 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	0f9b      	lsrs	r3, r3, #30
 800349c:	b2da      	uxtb	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	0d1b      	lsrs	r3, r3, #20
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350a:	0bdb      	lsrs	r3, r3, #15
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351c:	0b9b      	lsrs	r3, r3, #14
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352e:	0b5b      	lsrs	r3, r3, #13
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	b2da      	uxtb	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	0b1b      	lsrs	r3, r3, #12
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	2b00      	cmp	r3, #0
 800355a:	d163      	bne.n	8003624 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	009a      	lsls	r2, r3, #2
 8003562:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800356c:	0f92      	lsrs	r2, r2, #30
 800356e:	431a      	orrs	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	0edb      	lsrs	r3, r3, #27
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	b2da      	uxtb	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	b2da      	uxtb	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	0d5b      	lsrs	r3, r3, #21
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c0:	0bdb      	lsrs	r3, r3, #15
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	3302      	adds	r3, #2
 80035e4:	2201      	movs	r2, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035ee:	fb02 f203 	mul.w	r2, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	7a1b      	ldrb	r3, [r3, #8]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003610:	0a52      	lsrs	r2, r2, #9
 8003612:	fb02 f203 	mul.w	r2, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003620:	661a      	str	r2, [r3, #96]	; 0x60
 8003622:	e031      	b.n	8003688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b01      	cmp	r3, #1
 800362a:	d11d      	bne.n	8003668 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	029a      	lsls	r2, r3, #10
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
 8003666:	e00f      	b.n	8003688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_SD_GetCardCSD+0x344>)
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e09d      	b.n	80037c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368c:	0b9b      	lsrs	r3, r3, #14
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369e:	09db      	lsrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	0fdb      	lsrs	r3, r3, #31
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	0f5b      	lsrs	r3, r3, #29
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	0d9b      	lsrs	r3, r3, #22
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	0d5b      	lsrs	r3, r3, #21
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	0bdb      	lsrs	r3, r3, #15
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	0b9b      	lsrs	r3, r3, #14
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	b2da      	uxtb	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	0b1b      	lsrs	r3, r3, #12
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	004005ff 	.word	0x004005ff

080037d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af04      	add	r7, sp, #16
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	2b03      	cmp	r3, #3
 800384a:	d02e      	beq.n	80038aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d106      	bne.n	8003862 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
 8003860:	e029      	b.n	80038b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003868:	d10a      	bne.n	8003880 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb28 	bl	8003ec0 <SD_WideBus_Enable>
 8003870:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
 800387e:	e01a      	b.n	80038b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb65 	bl	8003f56 <SD_WideBus_Disable>
 800388c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
 800389a:	e00c      	b.n	80038b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
 80038a8:	e005      	b.n	80038b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <HAL_SD_ConfigWideBusOperation+0x130>)
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038d4:	e01f      	b.n	8003916 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681d      	ldr	r5, [r3, #0]
 80038fc:	466c      	mov	r4, sp
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003910:	4628      	mov	r0, r5
 8003912:	f001 fa0d 	bl	8004d30 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fae2 	bl	8004ee8 <SDMMC_CmdBlockLength>
 8003924:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00c      	beq.n	8003946 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800394e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003952:	4618      	mov	r0, r3
 8003954:	3728      	adds	r7, #40	; 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bdb0      	pop	{r4, r5, r7, pc}
 800395a:	bf00      	nop
 800395c:	004005ff 	.word	0x004005ff

08003960 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa7c 	bl	8003e70 <SD_SendStatus>
 8003978:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003996:	693b      	ldr	r3, [r7, #16]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	2b82      	cmp	r3, #130	; 0x82
 80039de:	d111      	bne.n	8003a04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fb29 	bl	800503c <SDMMC_CmdStopTransfer>
 80039ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff fd3a 	bl	8003478 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0208 	bic.w	r2, r2, #8
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f001 ff99 	bl	8005964 <HAL_SD_RxCpltCallback>
#endif
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f9cc 	bl	8001de8 <HAL_DMA_GetError>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d03e      	beq.n	8003ad4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <SD_DMAError+0x36>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d12d      	bne.n	8003ace <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <SD_DMAError+0xa0>)
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff62 	bl	8003960 <HAL_SD_GetCardState>
 8003a9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d002      	beq.n	8003aaa <SD_DMAError+0x6e>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10a      	bne.n	8003ac0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fac4 	bl	800503c <SDMMC_CmdStopTransfer>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	431a      	orrs	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff fcd2 	bl	8003478 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	004005ff 	.word	0x004005ff

08003ae0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff ff31 	bl	8003960 <HAL_SD_GetCardState>
 8003afe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d002      	beq.n	8003b1a <SD_DMATxAbort+0x3a>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10a      	bne.n	8003b30 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fa8c 	bl	800503c <SDMMC_CmdStopTransfer>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f001 feff 	bl	800593c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003b3e:	e002      	b.n	8003b46 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fc99 	bl	8003478 <HAL_SD_ErrorCallback>
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff fefa 	bl	8003960 <HAL_SD_GetCardState>
 8003b6c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d002      	beq.n	8003b88 <SD_DMARxAbort+0x3a>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d10a      	bne.n	8003b9e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 fa55 	bl	800503c <SDMMC_CmdStopTransfer>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f001 fec8 	bl	800593c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003bac:	e002      	b.n	8003bb4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fc62 	bl	8003478 <HAL_SD_ErrorCallback>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	b094      	sub	sp, #80	; 0x50
 8003bc0:	af04      	add	r7, sp, #16
 8003bc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f907 	bl	8004de0 <SDIO_GetPowerState>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bdc:	e0b6      	b.n	8003d4c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d02f      	beq.n	8003c46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fb30 	bl	8005250 <SDMMC_CmdSendCID>
 8003bf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <SD_InitCard+0x40>
    {
      return errorstate;
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	e0a7      	b.n	8003d4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f931 	bl	8004e6a <SDIO_GetResponse>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2104      	movs	r1, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f928 	bl	8004e6a <SDIO_GetResponse>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2108      	movs	r1, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f91f 	bl	8004e6a <SDIO_GetResponse>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	210c      	movs	r1, #12
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f916 	bl	8004e6a <SDIO_GetResponse>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d00d      	beq.n	8003c6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f107 020e 	add.w	r2, r7, #14
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fb36 	bl	80052ca <SDMMC_CmdSetRelAdd>
 8003c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <SD_InitCard+0xae>
    {
      return errorstate;
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	e070      	b.n	8003d4c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d036      	beq.n	8003ce0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f001 fb00 	bl	800528c <SDMMC_CmdSendCSD>
 8003c8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	e059      	b.n	8003d4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f8e3 	bl	8004e6a <SDIO_GetResponse>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2104      	movs	r1, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f8da 	bl	8004e6a <SDIO_GetResponse>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f8d1 	bl	8004e6a <SDIO_GetResponse>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	210c      	movs	r1, #12
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f8c8 	bl	8004e6a <SDIO_GetResponse>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f8bf 	bl	8004e6a <SDIO_GetResponse>
 8003cec:	4603      	mov	r3, r0
 8003cee:	0d1a      	lsrs	r2, r3, #20
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003cf4:	f107 0310 	add.w	r3, r7, #16
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fbc6 	bl	800348c <HAL_SD_GetCardCSD>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d0a:	e01f      	b.n	8003d4c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	f001 f9af 	bl	8005080 <SDMMC_CmdSelDesel>
 8003d22:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <SD_InitCard+0x172>
  {
    return errorstate;
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	e00e      	b.n	8003d4c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	466c      	mov	r4, sp
 8003d36:	f103 0210 	add.w	r2, r3, #16
 8003d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d40:	3304      	adds	r3, #4
 8003d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 fff3 	bl	8004d30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3740      	adds	r7, #64	; 0x40
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bdb0      	pop	{r4, r5, r7, pc}

08003d54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f9aa 	bl	80050c6 <SDMMC_CmdGoIdleState>
 8003d72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e072      	b.n	8003e64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f9bd 	bl	8005102 <SDMMC_CmdOperCond>
 8003d88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f993 	bl	80050c6 <SDMMC_CmdGoIdleState>
 8003da0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	e05b      	b.n	8003e64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d137      	bne.n	8003e2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f9bd 	bl	8005140 <SDMMC_CmdAppCommand>
 8003dc6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02d      	beq.n	8003e2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dd2:	e047      	b.n	8003e64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 f9b0 	bl	8005140 <SDMMC_CmdAppCommand>
 8003de0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <SD_PowerON+0x98>
    {
      return errorstate;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e03b      	b.n	8003e64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	491e      	ldr	r1, [pc, #120]	; (8003e6c <SD_PowerON+0x118>)
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f9c6 	bl	8005184 <SDMMC_CmdAppOperCommand>
 8003df8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e04:	e02e      	b.n	8003e64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 f82c 	bl	8004e6a <SDIO_GetResponse>
 8003e12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	0fdb      	lsrs	r3, r3, #31
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <SD_PowerON+0xcc>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <SD_PowerON+0xce>
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]

    count++;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d802      	bhi.n	8003e3a <SD_PowerON+0xe6>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0cc      	beq.n	8003dd4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d902      	bls.n	8003e4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e48:	e00c      	b.n	8003e64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
 8003e5a:	e002      	b.n	8003e62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	c1100000 	.word	0xc1100000

08003e70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e84:	e018      	b.n	8003eb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f001 fa3a 	bl	800530c <SDMMC_CmdSendStatus>
 8003e98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e009      	b.n	8003eb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 ffdd 	bl	8004e6a <SDIO_GetResponse>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 ffc7 	bl	8004e6a <SDIO_GetResponse>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee6:	d102      	bne.n	8003eee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eec:	e02f      	b.n	8003f4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f879 	bl	8003fec <SD_FindSCR>
 8003efa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e023      	b.n	8003f4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01c      	beq.n	8003f4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f001 f90f 	bl	8005140 <SDMMC_CmdAppCommand>
 8003f22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	e00f      	b.n	8003f4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 f948 	bl	80051ca <SDMMC_CmdBusWidth>
 8003f3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	e003      	b.n	8003f4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e001      	b.n	8003f4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 ff7c 	bl	8004e6a <SDIO_GetResponse>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7c:	d102      	bne.n	8003f84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f82:	e02f      	b.n	8003fe4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f82e 	bl	8003fec <SD_FindSCR>
 8003f90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e023      	b.n	8003fe4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01c      	beq.n	8003fe0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f001 f8c4 	bl	8005140 <SDMMC_CmdAppCommand>
 8003fb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	e00f      	b.n	8003fe4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f8fd 	bl	80051ca <SDMMC_CmdBusWidth>
 8003fd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	e003      	b.n	8003fe4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e001      	b.n	8003fe4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fe0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b08f      	sub	sp, #60	; 0x3c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003ff6:	f7fd fb33 	bl	8001660 <HAL_GetTick>
 8003ffa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2108      	movs	r1, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ff68 	bl	8004ee8 <SDMMC_CmdBlockLength>
 8004018:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	e0b2      	b.n	800418a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f001 f885 	bl	8005140 <SDMMC_CmdAppCommand>
 8004036:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <SD_FindSCR+0x56>
  {
    return errorstate;
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	e0a3      	b.n	800418a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004046:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004048:	2308      	movs	r3, #8
 800404a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800404c:	2330      	movs	r3, #48	; 0x30
 800404e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004050:	2302      	movs	r3, #2
 8004052:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004054:	2300      	movs	r3, #0
 8004056:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004058:	2301      	movs	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f107 0210 	add.w	r2, r7, #16
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff12 	bl	8004e90 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f8cc 	bl	800520e <SDMMC_CmdSendSCR>
 8004076:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	e083      	b.n	800418a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00f      	beq.n	80040b0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f107 0208 	add.w	r2, r7, #8
 800409c:	18d4      	adds	r4, r2, r3
 800409e:	4608      	mov	r0, r1
 80040a0:	f000 fe71 	bl	8004d86 <SDIO_ReadFIFO>
 80040a4:	4603      	mov	r3, r0
 80040a6:	6023      	str	r3, [r4, #0]
      index++;
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	3301      	adds	r3, #1
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	e006      	b.n	80040be <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d012      	beq.n	80040e4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80040be:	f7fd facf 	bl	8001660 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d102      	bne.n	80040d4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80040ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040d2:	e05a      	b.n	800418a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0cf      	beq.n	8004082 <SD_FindSCR+0x96>
 80040e2:	e000      	b.n	80040e6 <SD_FindSCR+0xfa>
      break;
 80040e4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2208      	movs	r2, #8
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80040fc:	2308      	movs	r3, #8
 80040fe:	e044      	b.n	800418a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2202      	movs	r2, #2
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004116:	2302      	movs	r3, #2
 8004118:	e037      	b.n	800418a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2220      	movs	r2, #32
 800412e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004130:	2320      	movs	r3, #32
 8004132:	e02a      	b.n	800418a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f240 523a 	movw	r2, #1338	; 0x53a
 800413c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	061a      	lsls	r2, r3, #24
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800414a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004154:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	601a      	str	r2, [r3, #0]
    scr++;
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	3304      	adds	r3, #4
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	061a      	lsls	r2, r3, #24
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004172:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800417c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	373c      	adds	r7, #60	; 0x3c
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}

08004192 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03f      	beq.n	800422c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e033      	b.n	800421a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fde5 	bl	8004d86 <SDIO_ReadFIFO>
 80041bc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3b01      	subs	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b07      	cmp	r3, #7
 800421e:	d9c8      	bls.n	80041b2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d043      	beq.n	80042d6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e037      	b.n	80042c4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]
      tmp++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3b01      	subs	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3b01      	subs	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	041a      	lsls	r2, r3, #16
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	60bb      	str	r3, [r7, #8]
      tmp++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3b01      	subs	r3, #1
 8004294:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	061a      	lsls	r2, r3, #24
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f107 0208 	add.w	r2, r7, #8
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fd71 	bl	8004da0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3301      	adds	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	d9c4      	bls.n	8004254 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e07b      	b.n	80043e8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004300:	d009      	beq.n	8004316 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	61da      	str	r2, [r3, #28]
 8004308:	e005      	b.n	8004316 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fd87 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	ea42 0103 	orr.w	r1, r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f003 0104 	and.w	r1, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0210 	and.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_SPI_Transmit_DMA+0x20>
 800440c:	2302      	movs	r3, #2
 800440e:	e09b      	b.n	8004548 <HAL_SPI_Transmit_DMA+0x158>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d002      	beq.n	800442a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004424:	2302      	movs	r3, #2
 8004426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004428:	e089      	b.n	800453e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_SPI_Transmit_DMA+0x46>
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800443a:	e080      	b.n	800453e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2203      	movs	r2, #3
 8004440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004482:	d10f      	bne.n	80044a4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004492:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_SPI_Transmit_DMA+0x160>)
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b0:	4a28      	ldr	r2, [pc, #160]	; (8004554 <HAL_SPI_Transmit_DMA+0x164>)
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	4a27      	ldr	r2, [pc, #156]	; (8004558 <HAL_SPI_Transmit_DMA+0x168>)
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c0:	2200      	movs	r2, #0
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	4619      	mov	r1, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044dc:	f7fd fa80 	bl	80019e0 <HAL_DMA_Start_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80044fe:	e01e      	b.n	800453e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d007      	beq.n	800451e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0220 	orr.w	r2, r2, #32
 800452c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0202 	orr.w	r2, r2, #2
 800453c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08004641 	.word	0x08004641
 8004554:	08004599 	.word	0x08004599
 8004558:	0800465d 	.word	0x0800465d

0800455c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a6:	f7fd f85b 	bl	8001660 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	d03b      	beq.n	8004634 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0202 	bic.w	r2, r2, #2
 80045da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f000 f8e3 	bl	80047ac <SPI_EndRxTxTransaction>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f7ff ffa9 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004632:	e002      	b.n	800463a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f7ff ff91 	bl	800455c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff8e 	bl	8004570 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0203 	bic.w	r2, r2, #3
 8004678:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff ff78 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ac:	f7fc ffd8 	bl	8001660 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046bc:	f7fc ffd0 	bl	8001660 <HAL_GetTick>
 80046c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	015b      	lsls	r3, r3, #5
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d2:	e054      	b.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046da:	d050      	beq.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046dc:	f7fc ffc0 	bl	8001660 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d902      	bls.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13d      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d111      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004714:	d004      	beq.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471e:	d107      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d10f      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e017      	b.n	800479e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3b01      	subs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d19b      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000000 	.word	0x20000000

080047ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <SPI_EndRxTxTransaction+0x7c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <SPI_EndRxTxTransaction+0x80>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0d5b      	lsrs	r3, r3, #21
 80047c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d6:	d112      	bne.n	80047fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff ff5a 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3b01      	subs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d0f2      	beq.n	80047fe <SPI_EndRxTxTransaction+0x52>
 8004818:	e000      	b.n	800481c <SPI_EndRxTxTransaction+0x70>
        break;
 800481a:	bf00      	nop
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000
 800482c:	165e9f81 	.word	0x165e9f81

08004830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e041      	b.n	80048c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f839 	bl	80048ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 f9ca 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e044      	b.n	8004986 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_TIM_Base_Start_IT+0xb0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x6c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d013      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x6c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_TIM_Base_Start_IT+0xb4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x6c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_TIM_Base_Start_IT+0xb8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x6c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x6c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d111      	bne.n	8004974 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d010      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	e007      	b.n	8004984 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8ee 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8e0 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8f1 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8c4 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8b6 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8c7 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f89a 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f88c 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f89d 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f870 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f862 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f873 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fb ffe4 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8e2 	bl	8004d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f838 	bl	8004bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0220 	mvn.w	r2, #32
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8ac 	bl	8004d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <TIM_Base_SetConfig+0xe4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00f      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a31      	ldr	r2, [pc, #196]	; (8004cf0 <TIM_Base_SetConfig+0xe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <TIM_Base_SetConfig+0xec>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x38>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <TIM_Base_SetConfig+0xf0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a25      	ldr	r2, [pc, #148]	; (8004cec <TIM_Base_SetConfig+0xe4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01b      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d017      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <TIM_Base_SetConfig+0xe8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <TIM_Base_SetConfig+0xec>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00f      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <TIM_Base_SetConfig+0xf0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00b      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <TIM_Base_SetConfig+0xf4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d007      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <TIM_Base_SetConfig+0xf8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <TIM_Base_SetConfig+0xfc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d108      	bne.n	8004ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <TIM_Base_SetConfig+0xe4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800

08004d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 001c 	add.w	r0, r7, #28
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	b004      	add	sp, #16
 8004d84:	4770      	bx	lr

08004d86 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004dd0:	2002      	movs	r0, #2
 8004dd2:	f7fc fc51 	bl	8001678 <HAL_Delay>
  
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0303 	and.w	r3, r3, #3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e20:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e36:	f023 030f 	bic.w	r3, r3, #15
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	b2db      	uxtb	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3314      	adds	r3, #20
 8004e78:	461a      	mov	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
}  
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004ebc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ec2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0

}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004efa:	2340      	movs	r3, #64	; 0x40
 8004efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff74 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	2110      	movs	r1, #16
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa44 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f3a:	2311      	movs	r3, #17
 8004f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f3e:	2340      	movs	r3, #64	; 0x40
 8004f40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff52 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	2111      	movs	r1, #17
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa22 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f7e:	2312      	movs	r3, #18
 8004f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f82:	2340      	movs	r3, #64	; 0x40
 8004f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f90:	f107 0308 	add.w	r3, r7, #8
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff30 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	2112      	movs	r1, #18
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa00 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004faa:	69fb      	ldr	r3, [r7, #28]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fc2:	2318      	movs	r3, #24
 8004fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff0e 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	2118      	movs	r1, #24
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9de 	bl	80053a8 <SDMMC_GetCmdResp1>
 8004fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fee:	69fb      	ldr	r3, [r7, #28]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005006:	2319      	movs	r3, #25
 8005008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff feec 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	2119      	movs	r1, #25
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9bc 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005032:	69fb      	ldr	r3, [r7, #28]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005048:	230c      	movs	r3, #12
 800504a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800504c:	2340      	movs	r3, #64	; 0x40
 800504e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fecb 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005066:	4a05      	ldr	r2, [pc, #20]	; (800507c <SDMMC_CmdStopTransfer+0x40>)
 8005068:	210c      	movs	r1, #12
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f99c 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005072:	69fb      	ldr	r3, [r7, #28]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	05f5e100 	.word	0x05f5e100

08005080 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005090:	2307      	movs	r3, #7
 8005092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a2:	f107 0310 	add.w	r3, r7, #16
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fea7 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	2107      	movs	r1, #7
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f977 	bl	80053a8 <SDMMC_GetCmdResp1>
 80050ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fe86 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f92d 	bl	8005350 <SDMMC_GetCmdError>
 80050f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050f8:	69fb      	ldr	r3, [r7, #28]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800510a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800510e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005110:	2308      	movs	r3, #8
 8005112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005114:	2340      	movs	r3, #64	; 0x40
 8005116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800511c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fe67 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fb24 	bl	800577c <SDMMC_GetCmdResp7>
 8005134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800514e:	2337      	movs	r3, #55	; 0x37
 8005150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005152:	2340      	movs	r3, #64	; 0x40
 8005154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800515a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005160:	f107 0308 	add.w	r3, r7, #8
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fe48 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	2137      	movs	r1, #55	; 0x37
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f918 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800519a:	2329      	movs	r3, #41	; 0x29
 800519c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fe22 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa2b 	bl	8005614 <SDMMC_GetCmdResp3>
 80051be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c0:	69fb      	ldr	r3, [r7, #28]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80051d8:	2306      	movs	r3, #6
 80051da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051dc:	2340      	movs	r3, #64	; 0x40
 80051de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fe03 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	2106      	movs	r1, #6
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8d3 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005204:	69fb      	ldr	r3, [r7, #28]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800521a:	2333      	movs	r3, #51	; 0x33
 800521c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800521e:	2340      	movs	r3, #64	; 0x40
 8005220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fde2 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	2133      	movs	r1, #51	; 0x33
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f8b2 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800525c:	2302      	movs	r3, #2
 800525e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005260:	23c0      	movs	r3, #192	; 0xc0
 8005262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800526c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fdc1 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f982 	bl	8005584 <SDMMC_GetCmdResp2>
 8005280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005282:	69fb      	ldr	r3, [r7, #28]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800529a:	2309      	movs	r3, #9
 800529c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800529e:	23c0      	movs	r3, #192	; 0xc0
 80052a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fda2 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f963 	bl	8005584 <SDMMC_GetCmdResp2>
 80052be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052c0:	69fb      	ldr	r3, [r7, #28]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b088      	sub	sp, #32
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052d8:	2303      	movs	r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fd83 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	2103      	movs	r1, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9c8 	bl	8005690 <SDMMC_GetCmdResp6>
 8005300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800531a:	230d      	movs	r3, #13
 800531c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800532c:	f107 0308 	add.w	r3, r7, #8
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fd62 	bl	8004dfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	210d      	movs	r1, #13
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f832 	bl	80053a8 <SDMMC_GetCmdResp1>
 8005344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005346:	69fb      	ldr	r3, [r7, #28]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <SDMMC_GetCmdError+0x50>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <SDMMC_GetCmdError+0x54>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0a5b      	lsrs	r3, r3, #9
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	60fa      	str	r2, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800537c:	e009      	b.n	8005392 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f1      	beq.n	800536e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	22c5      	movs	r2, #197	; 0xc5
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000000 	.word	0x20000000
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053b6:	4b70      	ldr	r3, [pc, #448]	; (8005578 <SDMMC_GetCmdResp1+0x1d0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a70      	ldr	r2, [pc, #448]	; (800557c <SDMMC_GetCmdResp1+0x1d4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	0a5a      	lsrs	r2, r3, #9
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	61fa      	str	r2, [r7, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053d8:	e0c9      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ef      	beq.n	80053ca <SDMMC_GetCmdResp1+0x22>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ea      	bne.n	80053ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2204      	movs	r2, #4
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005406:	2304      	movs	r3, #4
 8005408:	e0b1      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800541c:	2301      	movs	r3, #1
 800541e:	e0a6      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22c5      	movs	r2, #197	; 0xc5
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fd12 	bl	8004e50 <SDIO_GetCommandResponse>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	7afb      	ldrb	r3, [r7, #11]
 8005432:	4293      	cmp	r3, r2
 8005434:	d001      	beq.n	800543a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005436:	2301      	movs	r3, #1
 8005438:	e099      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800543a:	2100      	movs	r1, #0
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff fd14 	bl	8004e6a <SDIO_GetResponse>
 8005442:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4b4e      	ldr	r3, [pc, #312]	; (8005580 <SDMMC_GetCmdResp1+0x1d8>)
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
 8005450:	e08d      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	da02      	bge.n	800545e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800545c:	e087      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	e080      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	e079      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005488:	e071      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005498:	e069      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a8:	e061      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054b8:	e059      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c8:	e051      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d8:	e049      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054e8:	e041      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80054f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f8:	e039      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005508:	e031      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005518:	e029      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005528:	e021      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005538:	e019      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005548:	e011      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005558:	e009      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005564:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005568:	e001      	b.n	800556e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800556a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000000 	.word	0x20000000
 800557c:	10624dd3 	.word	0x10624dd3
 8005580:	fdffe008 	.word	0xfdffe008

08005584 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <SDMMC_GetCmdResp2+0x88>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <SDMMC_GetCmdResp2+0x8c>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0a5b      	lsrs	r3, r3, #9
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055b0:	e026      	b.n	8005600 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ef      	beq.n	80055a2 <SDMMC_GetCmdResp2+0x1e>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ea      	bne.n	80055a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2204      	movs	r2, #4
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055de:	2304      	movs	r3, #4
 80055e0:	e00e      	b.n	8005600 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e003      	b.n	8005600 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	22c5      	movs	r2, #197	; 0xc5
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	20000000 	.word	0x20000000
 8005610:	10624dd3 	.word	0x10624dd3

08005614 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <SDMMC_GetCmdResp3+0x74>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <SDMMC_GetCmdResp3+0x78>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1e5a      	subs	r2, r3, #1
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800563c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005640:	e01b      	b.n	800567a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ef      	beq.n	8005632 <SDMMC_GetCmdResp3+0x1e>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ea      	bne.n	8005632 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2204      	movs	r2, #4
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800566e:	2304      	movs	r3, #4
 8005670:	e003      	b.n	800567a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	22c5      	movs	r2, #197	; 0xc5
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000000 	.word	0x20000000
 800568c:	10624dd3 	.word	0x10624dd3

08005690 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	460b      	mov	r3, r1
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800569e:	4b35      	ldr	r3, [pc, #212]	; (8005774 <SDMMC_GetCmdResp6+0xe4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a35      	ldr	r2, [pc, #212]	; (8005778 <SDMMC_GetCmdResp6+0xe8>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	0a5b      	lsrs	r3, r3, #9
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	61fa      	str	r2, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056c2:	e052      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0ef      	beq.n	80056b4 <SDMMC_GetCmdResp6+0x24>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ea      	bne.n	80056b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2204      	movs	r2, #4
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056f0:	2304      	movs	r3, #4
 80056f2:	e03a      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005706:	2301      	movs	r3, #1
 8005708:	e02f      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fba0 	bl	8004e50 <SDIO_GetCommandResponse>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	4293      	cmp	r3, r2
 8005718:	d001      	beq.n	800571e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800571a:	2301      	movs	r3, #1
 800571c:	e025      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22c5      	movs	r2, #197	; 0xc5
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005724:	2100      	movs	r1, #0
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fb9f 	bl	8004e6a <SDIO_GetResponse>
 800572c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
 8005744:	e011      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005754:	e009      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005764:	e001      	b.n	800576a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000000 	.word	0x20000000
 8005778:	10624dd3 	.word	0x10624dd3

0800577c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005784:	4b22      	ldr	r3, [pc, #136]	; (8005810 <SDMMC_GetCmdResp7+0x94>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <SDMMC_GetCmdResp7+0x98>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0a5b      	lsrs	r3, r3, #9
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1e5a      	subs	r2, r3, #1
 800579e:	60fa      	str	r2, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057a8:	e02c      	b.n	8005804 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0ef      	beq.n	800579a <SDMMC_GetCmdResp7+0x1e>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ea      	bne.n	800579a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2204      	movs	r2, #4
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057d6:	2304      	movs	r3, #4
 80057d8:	e014      	b.n	8005804 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e009      	b.n	8005804 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2240      	movs	r2, #64	; 0x40
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005802:	2300      	movs	r3, #0
  
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	20000000 	.word	0x20000000
 8005814:	10624dd3 	.word	0x10624dd3

08005818 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800581c:	4904      	ldr	r1, [pc, #16]	; (8005830 <MX_FATFS_Init+0x18>)
 800581e:	4805      	ldr	r0, [pc, #20]	; (8005834 <MX_FATFS_Init+0x1c>)
 8005820:	f002 ffba 	bl	8008798 <FATFS_LinkDriver>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <MX_FATFS_Init+0x20>)
 800582a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800582c:	bf00      	nop
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20008d10 	.word	0x20008d10
 8005834:	0800f488 	.word	0x0800f488
 8005838:	20008d0c 	.word	0x20008d0c

0800583c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005840:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005856:	f000 f896 	bl	8005986 <BSP_SD_IsDetected>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d001      	beq.n	8005864 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e012      	b.n	800588a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005864:	480b      	ldr	r0, [pc, #44]	; (8005894 <BSP_SD_Init+0x48>)
 8005866:	f7fd fa0b 	bl	8002c80 <HAL_SD_Init>
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005878:	4806      	ldr	r0, [pc, #24]	; (8005894 <BSP_SD_Init+0x48>)
 800587a:	f7fd ffd7 	bl	800382c <HAL_SD_ConfigWideBusOperation>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005888:	79fb      	ldrb	r3, [r7, #7]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200000a8 	.word	0x200000a8

08005898 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	4806      	ldr	r0, [pc, #24]	; (80058c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80058b0:	f7fd fa94 	bl	8002ddc <HAL_SD_ReadBlocks_DMA>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200000a8 	.word	0x200000a8

080058cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	4806      	ldr	r0, [pc, #24]	; (80058fc <BSP_SD_WriteBlocks_DMA+0x30>)
 80058e4:	f7fd fb5c 	bl	8002fa0 <HAL_SD_WriteBlocks_DMA>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200000a8 	.word	0x200000a8

08005900 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005904:	4805      	ldr	r0, [pc, #20]	; (800591c <BSP_SD_GetCardState+0x1c>)
 8005906:	f7fe f82b 	bl	8003960 <HAL_SD_GetCardState>
 800590a:	4603      	mov	r3, r0
 800590c:	2b04      	cmp	r3, #4
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
}
 8005916:	4618      	mov	r0, r3
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	200000a8 	.word	0x200000a8

08005920 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4803      	ldr	r0, [pc, #12]	; (8005938 <BSP_SD_GetCardInfo+0x18>)
 800592c:	f7fd ff52 	bl	80037d4 <HAL_SD_GetCardInfo>
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200000a8 	.word	0x200000a8

0800593c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005944:	f000 f818 	bl	8005978 <BSP_SD_AbortCallback>
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005958:	f000 f9b4 	bl	8005cc4 <BSP_SD_WriteCpltCallback>
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800596c:	f000 f9bc 	bl	8005ce8 <BSP_SD_ReadCpltCallback>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0

}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800598c:	2301      	movs	r3, #1
 800598e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005990:	f000 f80c 	bl	80059ac <BSP_PlatformIsDetected>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800599a:	2300      	movs	r3, #0
 800599c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	b2db      	uxtb	r3, r3
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80059b2:	2301      	movs	r3, #1
 80059b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80059b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ba:	4806      	ldr	r0, [pc, #24]	; (80059d4 <BSP_PlatformIsDetected+0x28>)
 80059bc:	f7fc fc84 	bl	80022c8 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80059c6:	2300      	movs	r3, #0
 80059c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80059ca:	79fb      	ldrb	r3, [r7, #7]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40020400 	.word	0x40020400

080059d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80059e0:	f002 ffe0 	bl	80089a4 <osKernelGetTickCount>
 80059e4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80059e6:	e006      	b.n	80059f6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80059e8:	f7ff ff8a 	bl	8005900 <BSP_SD_GetCardState>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e009      	b.n	8005a0a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80059f6:	f002 ffd5 	bl	80089a4 <osKernelGetTickCount>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d8f0      	bhi.n	80059e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <SD_CheckStatus+0x38>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a24:	f7ff ff6c 	bl	8005900 <BSP_SD_GetCardState>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d107      	bne.n	8005a3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <SD_CheckStatus+0x38>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <SD_CheckStatus+0x38>)
 8005a3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005a3e:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <SD_CheckStatus+0x38>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b2db      	uxtb	r3, r3
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000021 	.word	0x20000021

08005a50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005a5a:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <SD_initialize+0x7c>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005a60:	f002 ff58 	bl	8008914 <osKernelGetState>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d129      	bne.n	8005abe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005a6a:	f7ff feef 	bl	800584c <BSP_SD_Init>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff ffcc 	bl	8005a14 <SD_CheckStatus>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <SD_initialize+0x7c>)
 8005a82:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <SD_initialize+0x7c>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d017      	beq.n	8005abe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <SD_initialize+0x80>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005a96:	2200      	movs	r2, #0
 8005a98:	2102      	movs	r1, #2
 8005a9a:	200a      	movs	r0, #10
 8005a9c:	f003 f988 	bl	8008db0 <osMessageQueueNew>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <SD_initialize+0x80>)
 8005aa4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <SD_initialize+0x80>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005aae:	4b07      	ldr	r3, [pc, #28]	; (8005acc <SD_initialize+0x7c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <SD_initialize+0x7c>)
 8005abc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005abe:	4b03      	ldr	r3, [pc, #12]	; (8005acc <SD_initialize+0x7c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b2db      	uxtb	r3, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000021 	.word	0x20000021
 8005ad0:	20004370 	.word	0x20004370

08005ad4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff97 	bl	8005a14 <SD_CheckStatus>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005b04:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b08:	f7ff ff66 	bl	80059d8 <SD_CheckStatusWithTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da01      	bge.n	8005b16 <SD_read+0x26>
  {
    return res;
 8005b12:	7ffb      	ldrb	r3, [r7, #31]
 8005b14:	e02f      	b.n	8005b76 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	68b8      	ldr	r0, [r7, #8]
 8005b1c:	f7ff febc 	bl	8005898 <BSP_SD_ReadBlocks_DMA>
 8005b20:	4603      	mov	r3, r0
 8005b22:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005b24:	7fbb      	ldrb	r3, [r7, #30]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d124      	bne.n	8005b74 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <SD_read+0x90>)
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f107 0112 	add.w	r1, r7, #18
 8005b32:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b36:	2200      	movs	r2, #0
 8005b38:	f003 fa0e 	bl	8008f58 <osMessageQueueGet>
 8005b3c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d117      	bne.n	8005b74 <SD_read+0x84>
 8005b44:	8a7b      	ldrh	r3, [r7, #18]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d114      	bne.n	8005b74 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8005b4a:	f002 ff2b 	bl	80089a4 <osKernelGetTickCount>
 8005b4e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005b50:	e007      	b.n	8005b62 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b52:	f7ff fed5 	bl	8005900 <BSP_SD_GetCardState>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <SD_read+0x72>
              {
                res = RES_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005b60:	e008      	b.n	8005b74 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005b62:	f002 ff1f 	bl	80089a4 <osKernelGetTickCount>
 8005b66:	4602      	mov	r2, r0
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d9ee      	bls.n	8005b52 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20004370 	.word	0x20004370

08005b84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005b98:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b9c:	f7ff ff1c 	bl	80059d8 <SD_CheckStatusWithTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	da01      	bge.n	8005baa <SD_write+0x26>
  {
    return res;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
 8005ba8:	e02d      	b.n	8005c06 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	68b8      	ldr	r0, [r7, #8]
 8005bb0:	f7ff fe8c 	bl	80058cc <BSP_SD_WriteBlocks_DMA>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d124      	bne.n	8005c04 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <SD_write+0x8c>)
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f107 0112 	add.w	r1, r7, #18
 8005bc2:	f247 5330 	movw	r3, #30000	; 0x7530
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f003 f9c6 	bl	8008f58 <osMessageQueueGet>
 8005bcc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d117      	bne.n	8005c04 <SD_write+0x80>
 8005bd4:	8a7b      	ldrh	r3, [r7, #18]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d114      	bne.n	8005c04 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8005bda:	f002 fee3 	bl	80089a4 <osKernelGetTickCount>
 8005bde:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005be0:	e007      	b.n	8005bf2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005be2:	f7ff fe8d 	bl	8005900 <BSP_SD_GetCardState>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <SD_write+0x6e>
          {
            res = RES_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	77fb      	strb	r3, [r7, #31]
            break;
 8005bf0:	e008      	b.n	8005c04 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005bf2:	f002 fed7 	bl	80089a4 <osKernelGetTickCount>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f247 522f 	movw	r2, #29999	; 0x752f
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d9ee      	bls.n	8005be2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20004370 	.word	0x20004370

08005c14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	603a      	str	r2, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	460b      	mov	r3, r1
 8005c22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <SD_ioctl+0xac>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <SD_ioctl+0x28>
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e03c      	b.n	8005cb6 <SD_ioctl+0xa2>

  switch (cmd)
 8005c3c:	79bb      	ldrb	r3, [r7, #6]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d834      	bhi.n	8005cac <SD_ioctl+0x98>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <SD_ioctl+0x34>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c61 	.word	0x08005c61
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c93 	.word	0x08005c93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c5e:	e028      	b.n	8005cb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fe5b 	bl	8005920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c76:	e01c      	b.n	8005cb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fe4f 	bl	8005920 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c90:	e00f      	b.n	8005cb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c92:	f107 030c 	add.w	r3, r7, #12
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fe42 	bl	8005920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	0a5a      	lsrs	r2, r3, #9
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005caa:	e002      	b.n	8005cb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3730      	adds	r7, #48	; 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000021 	.word	0x20000021

08005cc4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <BSP_SD_WriteCpltCallback+0x20>)
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	1db9      	adds	r1, r7, #6
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f003 f8de 	bl	8008e98 <osMessageQueuePut>
#endif
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20004370 	.word	0x20004370

08005ce8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <BSP_SD_ReadCpltCallback+0x20>)
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	1db9      	adds	r1, r7, #6
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f003 f8cc 	bl	8008e98 <osMessageQueuePut>
#endif
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20004370 	.word	0x20004370

08005d0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <disk_status+0x30>)
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	79fa      	ldrb	r2, [r7, #7]
 8005d24:	4905      	ldr	r1, [pc, #20]	; (8005d3c <disk_status+0x30>)
 8005d26:	440a      	add	r2, r1
 8005d28:	7a12      	ldrb	r2, [r2, #8]
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	2000439c 	.word	0x2000439c

08005d40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <disk_initialize+0x48>)
 8005d52:	5cd3      	ldrb	r3, [r2, r3]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d111      	bne.n	8005d7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <disk_initialize+0x48>)
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <disk_initialize+0x48>)
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	79fa      	ldrb	r2, [r7, #7]
 8005d6e:	4906      	ldr	r1, [pc, #24]	; (8005d88 <disk_initialize+0x48>)
 8005d70:	440a      	add	r2, r1
 8005d72:	7a12      	ldrb	r2, [r2, #8]
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000439c 	.word	0x2000439c

08005d8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <disk_read+0x3c>)
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	689c      	ldr	r4, [r3, #8]
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <disk_read+0x3c>)
 8005dac:	4413      	add	r3, r2
 8005dae:	7a18      	ldrb	r0, [r3, #8]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	47a0      	blx	r4
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2000439c 	.word	0x2000439c

08005dcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <disk_write+0x3c>)
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68dc      	ldr	r4, [r3, #12]
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <disk_write+0x3c>)
 8005dec:	4413      	add	r3, r2
 8005dee:	7a18      	ldrb	r0, [r3, #8]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	47a0      	blx	r4
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2000439c 	.word	0x2000439c

08005e0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	603a      	str	r2, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <disk_ioctl+0x38>)
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	4906      	ldr	r1, [pc, #24]	; (8005e44 <disk_ioctl+0x38>)
 8005e2c:	440a      	add	r2, r1
 8005e2e:	7a10      	ldrb	r0, [r2, #8]
 8005e30:	79b9      	ldrb	r1, [r7, #6]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000439c 	.word	0x2000439c

08005e48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3301      	adds	r3, #1
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	b21a      	sxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b21b      	sxth	r3, r3
 8005e64:	4313      	orrs	r3, r2
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e6a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3303      	adds	r3, #3
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	3202      	adds	r2, #2
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	3201      	adds	r2, #1
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
	return rv;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	887a      	ldrh	r2, [r7, #2]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00d      	beq.n	8005f82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	1c53      	adds	r3, r2, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	6179      	str	r1, [r7, #20]
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f1      	bne.n	8005f66 <mem_cpy+0x1a>
	}
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	617a      	str	r2, [r7, #20]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f3      	bne.n	8005f9e <mem_set+0x10>
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005fc4:	b480      	push	{r7}
 8005fc6:	b089      	sub	sp, #36	; 0x24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	61fa      	str	r2, [r7, #28]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	61ba      	str	r2, [r7, #24]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	1acb      	subs	r3, r1, r3
 8005ff0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <mem_cmp+0x40>
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0eb      	beq.n	8005fdc <mem_cmp+0x18>

	return r;
 8006004:	697b      	ldr	r3, [r7, #20]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3724      	adds	r7, #36	; 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800601c:	e002      	b.n	8006024 <chk_chr+0x12>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3301      	adds	r3, #1
 8006022:	607b      	str	r3, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <chk_chr+0x26>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	4293      	cmp	r3, r2
 8006036:	d1f2      	bne.n	800601e <chk_chr+0xc>
	return *str;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	781b      	ldrb	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <lock_fs+0x22>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	4618      	mov	r0, r3
 800605c:	f002 fbd2 	bl	8008804 <ff_req_grant>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <lock_fs+0x22>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <lock_fs+0x24>
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <unlock_fs+0x2e>
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b0c      	cmp	r3, #12
 800608a:	d00a      	beq.n	80060a2 <unlock_fs+0x2e>
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b0b      	cmp	r3, #11
 8006090:	d007      	beq.n	80060a2 <unlock_fs+0x2e>
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d004      	beq.n	80060a2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fbc6 	bl	800882e <ff_rel_grant>
	}
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e029      	b.n	8006114 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80060c0:	4a27      	ldr	r2, [pc, #156]	; (8006160 <chk_lock+0xb4>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	4413      	add	r3, r2
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01d      	beq.n	800610a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060ce:	4a24      	ldr	r2, [pc, #144]	; (8006160 <chk_lock+0xb4>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	4413      	add	r3, r2
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d116      	bne.n	800610e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80060e0:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <chk_lock+0xb4>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d10c      	bne.n	800610e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060f4:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <chk_lock+0xb4>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4413      	add	r3, r2
 80060fc:	3308      	adds	r3, #8
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006104:	429a      	cmp	r2, r3
 8006106:	d102      	bne.n	800610e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006108:	e007      	b.n	800611a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800610a:	2301      	movs	r3, #1
 800610c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d9d2      	bls.n	80060c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d109      	bne.n	8006134 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <chk_lock+0x80>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d101      	bne.n	8006130 <chk_lock+0x84>
 800612c:	2300      	movs	r3, #0
 800612e:	e010      	b.n	8006152 <chk_lock+0xa6>
 8006130:	2312      	movs	r3, #18
 8006132:	e00e      	b.n	8006152 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <chk_lock+0xa0>
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <chk_lock+0xb4>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	330c      	adds	r3, #12
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d101      	bne.n	8006150 <chk_lock+0xa4>
 800614c:	2310      	movs	r3, #16
 800614e:	e000      	b.n	8006152 <chk_lock+0xa6>
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	2000437c 	.word	0x2000437c

08006164 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	e002      	b.n	8006176 <enq_lock+0x12>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3301      	adds	r3, #1
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d806      	bhi.n	800618a <enq_lock+0x26>
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <enq_lock+0x40>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	4413      	add	r3, r2
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f2      	bne.n	8006170 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b02      	cmp	r3, #2
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000437c 	.word	0x2000437c

080061a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e01f      	b.n	80061f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80061b8:	4a41      	ldr	r2, [pc, #260]	; (80062c0 <inc_lock+0x118>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	4413      	add	r3, r2
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d113      	bne.n	80061f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80061ca:	4a3d      	ldr	r2, [pc, #244]	; (80062c0 <inc_lock+0x118>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	4413      	add	r3, r2
 80061d2:	3304      	adds	r3, #4
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80061da:	429a      	cmp	r2, r3
 80061dc:	d109      	bne.n	80061f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80061de:	4a38      	ldr	r2, [pc, #224]	; (80062c0 <inc_lock+0x118>)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	4413      	add	r3, r2
 80061e6:	3308      	adds	r3, #8
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d006      	beq.n	8006200 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d9dc      	bls.n	80061b8 <inc_lock+0x10>
 80061fe:	e000      	b.n	8006202 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006200:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d132      	bne.n	800626e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e002      	b.n	8006214 <inc_lock+0x6c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d806      	bhi.n	8006228 <inc_lock+0x80>
 800621a:	4a29      	ldr	r2, [pc, #164]	; (80062c0 <inc_lock+0x118>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	4413      	add	r3, r2
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f2      	bne.n	800620e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d101      	bne.n	8006232 <inc_lock+0x8a>
 800622e:	2300      	movs	r3, #0
 8006230:	e040      	b.n	80062b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4922      	ldr	r1, [pc, #136]	; (80062c0 <inc_lock+0x118>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	440b      	add	r3, r1
 800623e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	491e      	ldr	r1, [pc, #120]	; (80062c0 <inc_lock+0x118>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	440b      	add	r3, r1
 800624c:	3304      	adds	r3, #4
 800624e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	491a      	ldr	r1, [pc, #104]	; (80062c0 <inc_lock+0x118>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	440b      	add	r3, r1
 800625c:	3308      	adds	r3, #8
 800625e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <inc_lock+0x118>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	4413      	add	r3, r2
 8006268:	330c      	adds	r3, #12
 800626a:	2200      	movs	r2, #0
 800626c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <inc_lock+0xe0>
 8006274:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <inc_lock+0x118>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	4413      	add	r3, r2
 800627c:	330c      	adds	r3, #12
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <inc_lock+0xe0>
 8006284:	2300      	movs	r3, #0
 8006286:	e015      	b.n	80062b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <inc_lock+0xf8>
 800628e:	4a0c      	ldr	r2, [pc, #48]	; (80062c0 <inc_lock+0x118>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	330c      	adds	r3, #12
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	e001      	b.n	80062a4 <inc_lock+0xfc>
 80062a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062a4:	4906      	ldr	r1, [pc, #24]	; (80062c0 <inc_lock+0x118>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	440b      	add	r3, r1
 80062ac:	330c      	adds	r3, #12
 80062ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000437c 	.word	0x2000437c

080062c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e010      	b.n	80062f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80062d2:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <clear_lock+0x44>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d105      	bne.n	80062ee <clear_lock+0x2a>
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <clear_lock+0x44>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d9eb      	bls.n	80062d2 <clear_lock+0xe>
	}
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	2000437c 	.word	0x2000437c

0800630c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	78db      	ldrb	r3, [r3, #3]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d034      	beq.n	800638a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7858      	ldrb	r0, [r3, #1]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006330:	2301      	movs	r3, #1
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	f7ff fd4a 	bl	8005dcc <disk_write>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <sync_window+0x38>
			res = FR_DISK_ERR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e022      	b.n	800638a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	429a      	cmp	r2, r3
 8006358:	d217      	bcs.n	800638a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	789b      	ldrb	r3, [r3, #2]
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e010      	b.n	8006384 <sync_window+0x78>
					wsect += fs->fsize;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7858      	ldrb	r0, [r3, #1]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006376:	2301      	movs	r3, #1
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	f7ff fd27 	bl	8005dcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3b01      	subs	r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d8eb      	bhi.n	8006362 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d01b      	beq.n	80063e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ffad 	bl	800630c <sync_window>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d113      	bne.n	80063e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	7858      	ldrb	r0, [r3, #1]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063c6:	2301      	movs	r3, #1
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	f7ff fcdf 	bl	8005d8c <disk_read>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff87 	bl	800630c <sync_window>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d159      	bne.n	80064bc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d149      	bne.n	80064a4 <sync_fs+0xb4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	791b      	ldrb	r3, [r3, #4]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d145      	bne.n	80064a4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	899b      	ldrh	r3, [r3, #12]
 8006422:	461a      	mov	r2, r3
 8006424:	2100      	movs	r1, #0
 8006426:	f7ff fdb2 	bl	8005f8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3338      	adds	r3, #56	; 0x38
 800642e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006432:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fd41 	bl	8005ebe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3338      	adds	r3, #56	; 0x38
 8006440:	4921      	ldr	r1, [pc, #132]	; (80064c8 <sync_fs+0xd8>)
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fd56 	bl	8005ef4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3338      	adds	r3, #56	; 0x38
 800644c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006450:	491e      	ldr	r1, [pc, #120]	; (80064cc <sync_fs+0xdc>)
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fd4e 	bl	8005ef4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3338      	adds	r3, #56	; 0x38
 800645c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f7ff fd44 	bl	8005ef4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7ff fd3a 	bl	8005ef4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7858      	ldrb	r0, [r3, #1]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006498:	2301      	movs	r3, #1
 800649a:	f7ff fc97 	bl	8005dcc <disk_write>
			fs->fsi_flag = 0;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2200      	movs	r2, #0
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fcad 	bl	8005e0c <disk_ioctl>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <sync_fs+0xcc>
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	41615252 	.word	0x41615252
 80064cc:	61417272 	.word	0x61417272

080064d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	3b02      	subs	r3, #2
 80064de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	3b02      	subs	r3, #2
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d301      	bcc.n	80064f0 <clust2sect+0x20>
 80064ec:	2300      	movs	r3, #0
 80064ee:	e008      	b.n	8006502 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	895b      	ldrh	r3, [r3, #10]
 80064f4:	461a      	mov	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	fb03 f202 	mul.w	r2, r3, r2
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	4413      	add	r3, r2
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d904      	bls.n	800652e <get_fat+0x20>
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <get_fat+0x26>
		val = 1;	/* Internal error */
 800652e:	2301      	movs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e0bb      	b.n	80066ac <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006538:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b03      	cmp	r3, #3
 8006540:	f000 8083 	beq.w	800664a <get_fat+0x13c>
 8006544:	2b03      	cmp	r3, #3
 8006546:	f300 80a7 	bgt.w	8006698 <get_fat+0x18a>
 800654a:	2b01      	cmp	r3, #1
 800654c:	d002      	beq.n	8006554 <get_fat+0x46>
 800654e:	2b02      	cmp	r3, #2
 8006550:	d056      	beq.n	8006600 <get_fat+0xf2>
 8006552:	e0a1      	b.n	8006698 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	899b      	ldrh	r3, [r3, #12]
 800656a:	4619      	mov	r1, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006572:	4413      	add	r3, r2
 8006574:	4619      	mov	r1, r3
 8006576:	6938      	ldr	r0, [r7, #16]
 8006578:	f7ff ff0c 	bl	8006394 <move_window>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 808d 	bne.w	800669e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	60fa      	str	r2, [r7, #12]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	8992      	ldrh	r2, [r2, #12]
 800658e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006592:	fb02 f201 	mul.w	r2, r2, r1
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	899b      	ldrh	r3, [r3, #12]
 80065aa:	4619      	mov	r1, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80065b2:	4413      	add	r3, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	6938      	ldr	r0, [r7, #16]
 80065b8:	f7ff feec 	bl	8006394 <move_window>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d16f      	bne.n	80066a2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	899b      	ldrh	r3, [r3, #12]
 80065c6:	461a      	mov	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ce:	fb02 f201 	mul.w	r2, r2, r1
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <get_fat+0xe8>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	e002      	b.n	80065fc <get_fat+0xee>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	617b      	str	r3, [r7, #20]
			break;
 80065fe:	e055      	b.n	80066ac <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	899b      	ldrh	r3, [r3, #12]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	4619      	mov	r1, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	fbb3 f3f1 	udiv	r3, r3, r1
 8006614:	4413      	add	r3, r2
 8006616:	4619      	mov	r1, r3
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f7ff febb 	bl	8006394 <move_window>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d140      	bne.n	80066a6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	8992      	ldrh	r2, [r2, #12]
 8006632:	fbb3 f0f2 	udiv	r0, r3, r2
 8006636:	fb02 f200 	mul.w	r2, r2, r0
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	440b      	add	r3, r1
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fc02 	bl	8005e48 <ld_word>
 8006644:	4603      	mov	r3, r0
 8006646:	617b      	str	r3, [r7, #20]
			break;
 8006648:	e030      	b.n	80066ac <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	899b      	ldrh	r3, [r3, #12]
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	b29b      	uxth	r3, r3
 8006656:	4619      	mov	r1, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	fbb3 f3f1 	udiv	r3, r3, r1
 800665e:	4413      	add	r3, r2
 8006660:	4619      	mov	r1, r3
 8006662:	6938      	ldr	r0, [r7, #16]
 8006664:	f7ff fe96 	bl	8006394 <move_window>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d11d      	bne.n	80066aa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	8992      	ldrh	r2, [r2, #12]
 800667c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006680:	fb02 f200 	mul.w	r2, r2, r0
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	440b      	add	r3, r1
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fbf5 	bl	8005e78 <ld_dword>
 800668e:	4603      	mov	r3, r0
 8006690:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006694:	617b      	str	r3, [r7, #20]
			break;
 8006696:	e009      	b.n	80066ac <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e006      	b.n	80066ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800669e:	bf00      	nop
 80066a0:	e004      	b.n	80066ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066aa:	bf00      	nop
		}
	}

	return val;
 80066ac:	697b      	ldr	r3, [r7, #20]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80066b6:	b590      	push	{r4, r7, lr}
 80066b8:	b089      	sub	sp, #36	; 0x24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80066c2:	2302      	movs	r3, #2
 80066c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f240 8102 	bls.w	80068d2 <put_fat+0x21c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	f080 80fc 	bcs.w	80068d2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	f000 80b6 	beq.w	8006850 <put_fat+0x19a>
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	f300 80fd 	bgt.w	80068e4 <put_fat+0x22e>
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d003      	beq.n	80066f6 <put_fat+0x40>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f000 8083 	beq.w	80067fa <put_fat+0x144>
 80066f4:	e0f6      	b.n	80068e4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4413      	add	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	899b      	ldrh	r3, [r3, #12]
 800670c:	4619      	mov	r1, r3
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	fbb3 f3f1 	udiv	r3, r3, r1
 8006714:	4413      	add	r3, r2
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fe3b 	bl	8006394 <move_window>
 800671e:	4603      	mov	r3, r0
 8006720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 80d6 	bne.w	80068d6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	61ba      	str	r2, [r7, #24]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	8992      	ldrh	r2, [r2, #12]
 800673a:	fbb3 f0f2 	udiv	r0, r3, r2
 800673e:	fb02 f200 	mul.w	r2, r2, r0
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	440b      	add	r3, r1
 8006746:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <put_fat+0xb8>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	b25b      	sxtb	r3, r3
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	b25a      	sxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	b25b      	sxtb	r3, r3
 8006766:	4313      	orrs	r3, r2
 8006768:	b25b      	sxtb	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	e001      	b.n	8006772 <put_fat+0xbc>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	899b      	ldrh	r3, [r3, #12]
 8006784:	4619      	mov	r1, r3
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	fbb3 f3f1 	udiv	r3, r3, r1
 800678c:	4413      	add	r3, r2
 800678e:	4619      	mov	r1, r3
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff fdff 	bl	8006394 <move_window>
 8006796:	4603      	mov	r3, r0
 8006798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800679a:	7ffb      	ldrb	r3, [r7, #31]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 809c 	bne.w	80068da <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	899b      	ldrh	r3, [r3, #12]
 80067ac:	461a      	mov	r2, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80067b4:	fb02 f200 	mul.w	r2, r2, r0
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	440b      	add	r3, r1
 80067bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <put_fat+0x11a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e00e      	b.n	80067ee <put_fat+0x138>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f023 030f 	bic.w	r3, r3, #15
 80067da:	b25a      	sxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	b25b      	sxtb	r3, r3
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	4313      	orrs	r3, r2
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	70da      	strb	r2, [r3, #3]
			break;
 80067f8:	e074      	b.n	80068e4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	899b      	ldrh	r3, [r3, #12]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	b29b      	uxth	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	fbb3 f3f1 	udiv	r3, r3, r1
 800680e:	4413      	add	r3, r2
 8006810:	4619      	mov	r1, r3
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fdbe 	bl	8006394 <move_window>
 8006818:	4603      	mov	r3, r0
 800681a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800681c:	7ffb      	ldrb	r3, [r7, #31]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d15d      	bne.n	80068de <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	8992      	ldrh	r2, [r2, #12]
 8006830:	fbb3 f0f2 	udiv	r0, r3, r2
 8006834:	fb02 f200 	mul.w	r2, r2, r0
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	440b      	add	r3, r1
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	b292      	uxth	r2, r2
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff fb3b 	bl	8005ebe <st_word>
			fs->wflag = 1;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	70da      	strb	r2, [r3, #3]
			break;
 800684e:	e049      	b.n	80068e4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	899b      	ldrh	r3, [r3, #12]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	fbb3 f3f1 	udiv	r3, r3, r1
 8006864:	4413      	add	r3, r2
 8006866:	4619      	mov	r1, r3
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fd93 	bl	8006394 <move_window>
 800686e:	4603      	mov	r3, r0
 8006870:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006872:	7ffb      	ldrb	r3, [r7, #31]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d134      	bne.n	80068e2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	8992      	ldrh	r2, [r2, #12]
 800688c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006890:	fb02 f200 	mul.w	r2, r2, r0
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	440b      	add	r3, r1
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff faed 	bl	8005e78 <ld_dword>
 800689e:	4603      	mov	r3, r0
 80068a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068a4:	4323      	orrs	r3, r4
 80068a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	8992      	ldrh	r2, [r2, #12]
 80068b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80068ba:	fb02 f200 	mul.w	r2, r2, r0
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	440b      	add	r3, r1
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fb15 	bl	8005ef4 <st_dword>
			fs->wflag = 1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	70da      	strb	r2, [r3, #3]
			break;
 80068d0:	e008      	b.n	80068e4 <put_fat+0x22e>
		}
	}
 80068d2:	bf00      	nop
 80068d4:	e006      	b.n	80068e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80068d6:	bf00      	nop
 80068d8:	e004      	b.n	80068e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80068da:	bf00      	nop
 80068dc:	e002      	b.n	80068e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80068e2:	bf00      	nop
	return res;
 80068e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3724      	adds	r7, #36	; 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd90      	pop	{r4, r7, pc}

080068ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b088      	sub	sp, #32
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d904      	bls.n	8006914 <remove_chain+0x26>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	d301      	bcc.n	8006918 <remove_chain+0x2a>
 8006914:	2302      	movs	r3, #2
 8006916:	e04b      	b.n	80069b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800691e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	69b8      	ldr	r0, [r7, #24]
 8006926:	f7ff fec6 	bl	80066b6 <put_fat>
 800692a:	4603      	mov	r3, r0
 800692c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800692e:	7ffb      	ldrb	r3, [r7, #31]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <remove_chain+0x4a>
 8006934:	7ffb      	ldrb	r3, [r7, #31]
 8006936:	e03b      	b.n	80069b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff fde7 	bl	800650e <get_fat>
 8006940:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d031      	beq.n	80069ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <remove_chain+0x64>
 800694e:	2302      	movs	r3, #2
 8006950:	e02e      	b.n	80069b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006958:	d101      	bne.n	800695e <remove_chain+0x70>
 800695a:	2301      	movs	r3, #1
 800695c:	e028      	b.n	80069b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800695e:	2200      	movs	r2, #0
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	69b8      	ldr	r0, [r7, #24]
 8006964:	f7ff fea7 	bl	80066b6 <put_fat>
 8006968:	4603      	mov	r3, r0
 800696a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800696c:	7ffb      	ldrb	r3, [r7, #31]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <remove_chain+0x88>
 8006972:	7ffb      	ldrb	r3, [r7, #31]
 8006974:	e01c      	b.n	80069b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	3b02      	subs	r3, #2
 8006980:	429a      	cmp	r2, r3
 8006982:	d20b      	bcs.n	800699c <remove_chain+0xae>
			fs->free_clst++;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3c6      	bcc.n	8006938 <remove_chain+0x4a>
 80069aa:	e000      	b.n	80069ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <create_chain+0x2c>
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d31b      	bcc.n	8006a1c <create_chain+0x64>
 80069e4:	2301      	movs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e018      	b.n	8006a1c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff fd8e 	bl	800650e <get_fat>
 80069f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d801      	bhi.n	80069fe <create_chain+0x46>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e070      	b.n	8006ae0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a04:	d101      	bne.n	8006a0a <create_chain+0x52>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	e06a      	b.n	8006ae0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d201      	bcs.n	8006a18 <create_chain+0x60>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	e063      	b.n	8006ae0 <create_chain+0x128>
		scl = clst;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	3301      	adds	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d307      	bcc.n	8006a40 <create_chain+0x88>
				ncl = 2;
 8006a30:	2302      	movs	r3, #2
 8006a32:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d901      	bls.n	8006a40 <create_chain+0x88>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e04f      	b.n	8006ae0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fd63 	bl	800650e <get_fat>
 8006a48:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d003      	beq.n	8006a5e <create_chain+0xa6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5c:	d101      	bne.n	8006a62 <create_chain+0xaa>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	e03e      	b.n	8006ae0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d1da      	bne.n	8006a20 <create_chain+0x68>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e038      	b.n	8006ae0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a6e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6938      	ldr	r0, [r7, #16]
 8006a78:	f7ff fe1d 	bl	80066b6 <put_fat>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <create_chain+0xe2>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d006      	beq.n	8006a9a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f7ff fe10 	bl	80066b6 <put_fat>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d116      	bne.n	8006ace <create_chain+0x116>
		fs->last_clst = ncl;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	3b02      	subs	r3, #2
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d804      	bhi.n	8006abe <create_chain+0x106>
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	1e5a      	subs	r2, r3, #1
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	791b      	ldrb	r3, [r3, #4]
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	711a      	strb	r2, [r3, #4]
 8006acc:	e007      	b.n	8006ade <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d102      	bne.n	8006ada <create_chain+0x122>
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad8:	e000      	b.n	8006adc <create_chain+0x124>
 8006ada:	2301      	movs	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ade:	69fb      	ldr	r3, [r7, #28]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	3304      	adds	r3, #4
 8006afe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	899b      	ldrh	r3, [r3, #12]
 8006b04:	461a      	mov	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	8952      	ldrh	r2, [r2, #10]
 8006b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1d1a      	adds	r2, r3, #4
 8006b1a:	613a      	str	r2, [r7, #16]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <clmt_clust+0x42>
 8006b26:	2300      	movs	r3, #0
 8006b28:	e010      	b.n	8006b4c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d307      	bcc.n	8006b42 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b40:	e7e9      	b.n	8006b16 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006b42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4413      	add	r3, r2
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b6e:	d204      	bcs.n	8006b7a <dir_sdi+0x22>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e071      	b.n	8006c62 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <dir_sdi+0x46>
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d902      	bls.n	8006b9e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	8912      	ldrh	r2, [r2, #8]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d301      	bcc.n	8006bb4 <dir_sdi+0x5c>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e056      	b.n	8006c62 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	61da      	str	r2, [r3, #28]
 8006bbc:	e02d      	b.n	8006c1a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	895b      	ldrh	r3, [r3, #10]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	899b      	ldrh	r3, [r3, #12]
 8006bc8:	fb03 f302 	mul.w	r3, r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bce:	e019      	b.n	8006c04 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fc9a 	bl	800650e <get_fat>
 8006bda:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be2:	d101      	bne.n	8006be8 <dir_sdi+0x90>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e03c      	b.n	8006c62 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d904      	bls.n	8006bf8 <dir_sdi+0xa0>
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d301      	bcc.n	8006bfc <dir_sdi+0xa4>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e032      	b.n	8006c62 <dir_sdi+0x10a>
			ofs -= csz;
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d2e1      	bcs.n	8006bd0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	6938      	ldr	r0, [r7, #16]
 8006c10:	f7ff fc5e 	bl	80064d0 <clust2sect>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <dir_sdi+0xd4>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e01a      	b.n	8006c62 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	899b      	ldrh	r3, [r3, #12]
 8006c34:	4619      	mov	r1, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	899b      	ldrh	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c54:	fb02 f200 	mul.w	r2, r2, r0
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	18ca      	adds	r2, r1, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	3320      	adds	r3, #32
 8006c80:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <dir_next+0x28>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c90:	d301      	bcc.n	8006c96 <dir_next+0x2c>
 8006c92:	2304      	movs	r3, #4
 8006c94:	e0bb      	b.n	8006e0e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	899b      	ldrh	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ca2:	fb02 f201 	mul.w	r2, r2, r1
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 809d 	bne.w	8006de8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	8912      	ldrh	r2, [r2, #8]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	f0c0 808d 	bcc.w	8006de8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	61da      	str	r2, [r3, #28]
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	e09a      	b.n	8006e0e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	899b      	ldrh	r3, [r3, #12]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	8952      	ldrh	r2, [r2, #10]
 8006ce8:	3a01      	subs	r2, #1
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d17b      	bne.n	8006de8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f7ff fc08 	bl	800650e <get_fat>
 8006cfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d801      	bhi.n	8006d0a <dir_next+0xa0>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e081      	b.n	8006e0e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d10:	d101      	bne.n	8006d16 <dir_next+0xac>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e07b      	b.n	8006e0e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d359      	bcc.n	8006dd4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	61da      	str	r2, [r3, #28]
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	e06e      	b.n	8006e0e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7ff fe3d 	bl	80069b8 <create_chain>
 8006d3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <dir_next+0xe0>
 8006d46:	2307      	movs	r3, #7
 8006d48:	e061      	b.n	8006e0e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <dir_next+0xea>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e05c      	b.n	8006e0e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5a:	d101      	bne.n	8006d60 <dir_next+0xf6>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e056      	b.n	8006e0e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fad3 	bl	800630c <sync_window>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <dir_next+0x106>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04e      	b.n	8006e0e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	899b      	ldrh	r3, [r3, #12]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f7ff f906 	bl	8005f8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fba1 	bl	80064d0 <clust2sect>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	635a      	str	r2, [r3, #52]	; 0x34
 8006d94:	e012      	b.n	8006dbc <dir_next+0x152>
						fs->wflag = 1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fab5 	bl	800630c <sync_window>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <dir_next+0x142>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e030      	b.n	8006e0e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3301      	adds	r3, #1
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	635a      	str	r2, [r3, #52]	; 0x34
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	895b      	ldrh	r3, [r3, #10]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d3e6      	bcc.n	8006d96 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006dda:	6979      	ldr	r1, [r7, #20]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fb77 	bl	80064d0 <clust2sect>
 8006de2:	4602      	mov	r2, r0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	899b      	ldrh	r3, [r3, #12]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e00:	fb02 f200 	mul.w	r2, r2, r0
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	18ca      	adds	r2, r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e26:	2100      	movs	r1, #0
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fe95 	bl	8006b58 <dir_sdi>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d12b      	bne.n	8006e90 <dir_alloc+0x7a>
		n = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4619      	mov	r1, r3
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff faa6 	bl	8006394 <move_window>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11d      	bne.n	8006e8e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2be5      	cmp	r3, #229	; 0xe5
 8006e5a:	d004      	beq.n	8006e66 <dir_alloc+0x50>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d107      	bne.n	8006e76 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d102      	bne.n	8006e7a <dir_alloc+0x64>
 8006e74:	e00c      	b.n	8006e90 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fef4 	bl	8006c6a <dir_next>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0d7      	beq.n	8006e3c <dir_alloc+0x26>
 8006e8c:	e000      	b.n	8006e90 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e8e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d101      	bne.n	8006e9a <dir_alloc+0x84>
 8006e96:	2307      	movs	r3, #7
 8006e98:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	331a      	adds	r3, #26
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe ffc8 	bl	8005e48 <ld_word>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d109      	bne.n	8006ed8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ffbd 	bl	8005e48 <ld_word>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	331a      	adds	r3, #26
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe ffe0 	bl	8005ebe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d109      	bne.n	8006f1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f103 0214 	add.w	r2, r3, #20
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	4610      	mov	r0, r2
 8006f16:	f7fe ffd2 	bl	8005ebe <st_word>
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f30:	2100      	movs	r1, #0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fe10 	bl	8006b58 <dir_sdi>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <dir_find+0x24>
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	e03e      	b.n	8006fc4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6938      	ldr	r0, [r7, #16]
 8006f4e:	f7ff fa21 	bl	8006394 <move_window>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d12f      	bne.n	8006fbc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <dir_find+0x4e>
 8006f6a:	2304      	movs	r3, #4
 8006f6c:	75fb      	strb	r3, [r7, #23]
 8006f6e:	e028      	b.n	8006fc2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	330b      	adds	r3, #11
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	330b      	adds	r3, #11
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <dir_find+0x86>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a18      	ldr	r0, [r3, #32]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3324      	adds	r3, #36	; 0x24
 8006f9a:	220b      	movs	r2, #11
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f7ff f811 	bl	8005fc4 <mem_cmp>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fe5d 	bl	8006c6a <dir_next>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0c5      	beq.n	8006f46 <dir_find+0x24>
 8006fba:	e002      	b.n	8006fc2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fc0:	bf00      	nop

	return res;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006fda:	2101      	movs	r1, #1
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ff1a 	bl	8006e16 <dir_alloc>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11c      	bne.n	8007026 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68b8      	ldr	r0, [r7, #8]
 8006ff4:	f7ff f9ce 	bl	8006394 <move_window>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d111      	bne.n	8007026 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	2220      	movs	r2, #32
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe ffbf 	bl	8005f8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a18      	ldr	r0, [r3, #32]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3324      	adds	r3, #36	; 0x24
 8007018:	220b      	movs	r2, #11
 800701a:	4619      	mov	r1, r3
 800701c:	f7fe ff96 	bl	8005f4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2201      	movs	r2, #1
 8007024:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007046:	220b      	movs	r2, #11
 8007048:	2120      	movs	r1, #32
 800704a:	68b8      	ldr	r0, [r7, #8]
 800704c:	f7fe ff9f 	bl	8005f8e <mem_set>
	si = i = 0; ni = 8;
 8007050:	2300      	movs	r3, #0
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	2308      	movs	r3, #8
 800705a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	61fa      	str	r2, [r7, #28]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800706a:	7efb      	ldrb	r3, [r7, #27]
 800706c:	2b20      	cmp	r3, #32
 800706e:	d94e      	bls.n	800710e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007070:	7efb      	ldrb	r3, [r7, #27]
 8007072:	2b2f      	cmp	r3, #47	; 0x2f
 8007074:	d006      	beq.n	8007084 <create_name+0x54>
 8007076:	7efb      	ldrb	r3, [r7, #27]
 8007078:	2b5c      	cmp	r3, #92	; 0x5c
 800707a:	d110      	bne.n	800709e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800707c:	e002      	b.n	8007084 <create_name+0x54>
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3301      	adds	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b2f      	cmp	r3, #47	; 0x2f
 800708e:	d0f6      	beq.n	800707e <create_name+0x4e>
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b5c      	cmp	r3, #92	; 0x5c
 800709a:	d0f0      	beq.n	800707e <create_name+0x4e>
			break;
 800709c:	e038      	b.n	8007110 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800709e:	7efb      	ldrb	r3, [r7, #27]
 80070a0:	2b2e      	cmp	r3, #46	; 0x2e
 80070a2:	d003      	beq.n	80070ac <create_name+0x7c>
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d30c      	bcc.n	80070c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b0b      	cmp	r3, #11
 80070b0:	d002      	beq.n	80070b8 <create_name+0x88>
 80070b2:	7efb      	ldrb	r3, [r7, #27]
 80070b4:	2b2e      	cmp	r3, #46	; 0x2e
 80070b6:	d001      	beq.n	80070bc <create_name+0x8c>
 80070b8:	2306      	movs	r3, #6
 80070ba:	e044      	b.n	8007146 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80070bc:	2308      	movs	r3, #8
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	230b      	movs	r3, #11
 80070c2:	617b      	str	r3, [r7, #20]
			continue;
 80070c4:	e022      	b.n	800710c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80070c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da04      	bge.n	80070d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80070ce:	7efb      	ldrb	r3, [r7, #27]
 80070d0:	3b80      	subs	r3, #128	; 0x80
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <create_name+0x120>)
 80070d4:	5cd3      	ldrb	r3, [r2, r3]
 80070d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80070d8:	7efb      	ldrb	r3, [r7, #27]
 80070da:	4619      	mov	r1, r3
 80070dc:	481d      	ldr	r0, [pc, #116]	; (8007154 <create_name+0x124>)
 80070de:	f7fe ff98 	bl	8006012 <chk_chr>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <create_name+0xbc>
 80070e8:	2306      	movs	r3, #6
 80070ea:	e02c      	b.n	8007146 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80070ec:	7efb      	ldrb	r3, [r7, #27]
 80070ee:	2b60      	cmp	r3, #96	; 0x60
 80070f0:	d905      	bls.n	80070fe <create_name+0xce>
 80070f2:	7efb      	ldrb	r3, [r7, #27]
 80070f4:	2b7a      	cmp	r3, #122	; 0x7a
 80070f6:	d802      	bhi.n	80070fe <create_name+0xce>
 80070f8:	7efb      	ldrb	r3, [r7, #27]
 80070fa:	3b20      	subs	r3, #32
 80070fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	613a      	str	r2, [r7, #16]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4413      	add	r3, r2
 8007108:	7efa      	ldrb	r2, [r7, #27]
 800710a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800710c:	e7a6      	b.n	800705c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800710e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	441a      	add	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <create_name+0xf4>
 8007120:	2306      	movs	r3, #6
 8007122:	e010      	b.n	8007146 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2be5      	cmp	r3, #229	; 0xe5
 800712a:	d102      	bne.n	8007132 <create_name+0x102>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2205      	movs	r2, #5
 8007130:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007132:	7efb      	ldrb	r3, [r7, #27]
 8007134:	2b20      	cmp	r3, #32
 8007136:	d801      	bhi.n	800713c <create_name+0x10c>
 8007138:	2204      	movs	r2, #4
 800713a:	e000      	b.n	800713e <create_name+0x10e>
 800713c:	2200      	movs	r2, #0
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	330b      	adds	r3, #11
 8007142:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007144:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	0800f49c 	.word	0x0800f49c
 8007154:	0800cb14 	.word	0x0800cb14

08007158 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800716c:	e002      	b.n	8007174 <follow_path+0x1c>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b2f      	cmp	r3, #47	; 0x2f
 800717a:	d0f8      	beq.n	800716e <follow_path+0x16>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b5c      	cmp	r3, #92	; 0x5c
 8007182:	d0f4      	beq.n	800716e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b1f      	cmp	r3, #31
 8007190:	d80a      	bhi.n	80071a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800719a:	2100      	movs	r1, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fcdb 	bl	8006b58 <dir_sdi>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
 80071a6:	e048      	b.n	800723a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071a8:	463b      	mov	r3, r7
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff3f 	bl	8007030 <create_name>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d139      	bne.n	8007230 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff feb0 	bl	8006f22 <dir_find>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d12c      	bne.n	8007234 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d127      	bne.n	8007234 <follow_path+0xdc>
 80071e4:	2305      	movs	r3, #5
 80071e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80071e8:	e024      	b.n	8007234 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d121      	bne.n	8007238 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	799b      	ldrb	r3, [r3, #6]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007200:	2305      	movs	r3, #5
 8007202:	75fb      	strb	r3, [r7, #23]
 8007204:	e019      	b.n	800723a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	8992      	ldrh	r2, [r2, #12]
 8007214:	fbb3 f0f2 	udiv	r0, r3, r2
 8007218:	fb02 f200 	mul.w	r2, r2, r0
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	440b      	add	r3, r1
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff fe3e 	bl	8006ea4 <ld_clust>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800722e:	e7bb      	b.n	80071a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007230:	bf00      	nop
 8007232:	e002      	b.n	800723a <follow_path+0xe2>
				break;
 8007234:	bf00      	nop
 8007236:	e000      	b.n	800723a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007238:	bf00      	nop
			}
		}
	}

	return res;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007250:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d031      	beq.n	80072be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e002      	b.n	8007268 <get_ldnumber+0x24>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	3301      	adds	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b20      	cmp	r3, #32
 800726e:	d903      	bls.n	8007278 <get_ldnumber+0x34>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b3a      	cmp	r3, #58	; 0x3a
 8007276:	d1f4      	bne.n	8007262 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b3a      	cmp	r3, #58	; 0x3a
 800727e:	d11c      	bne.n	80072ba <get_ldnumber+0x76>
			tp = *path;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	60fa      	str	r2, [r7, #12]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	3b30      	subs	r3, #48	; 0x30
 8007290:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b09      	cmp	r3, #9
 8007296:	d80e      	bhi.n	80072b6 <get_ldnumber+0x72>
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	429a      	cmp	r2, r3
 800729e:	d10a      	bne.n	80072b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d107      	bne.n	80072b6 <get_ldnumber+0x72>
					vol = (int)i;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3301      	adds	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	e002      	b.n	80072c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072be:	693b      	ldr	r3, [r7, #16]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	70da      	strb	r2, [r3, #3]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff f854 	bl	8006394 <move_window>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <check_fs+0x2a>
 80072f2:	2304      	movs	r3, #4
 80072f4:	e038      	b.n	8007368 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3338      	adds	r3, #56	; 0x38
 80072fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fda2 	bl	8005e48 <ld_word>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800730c:	429a      	cmp	r2, r3
 800730e:	d001      	beq.n	8007314 <check_fs+0x48>
 8007310:	2303      	movs	r3, #3
 8007312:	e029      	b.n	8007368 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800731a:	2be9      	cmp	r3, #233	; 0xe9
 800731c:	d009      	beq.n	8007332 <check_fs+0x66>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007324:	2beb      	cmp	r3, #235	; 0xeb
 8007326:	d11e      	bne.n	8007366 <check_fs+0x9a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800732e:	2b90      	cmp	r3, #144	; 0x90
 8007330:	d119      	bne.n	8007366 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3338      	adds	r3, #56	; 0x38
 8007336:	3336      	adds	r3, #54	; 0x36
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fd9d 	bl	8005e78 <ld_dword>
 800733e:	4603      	mov	r3, r0
 8007340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007344:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <check_fs+0xa4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <check_fs+0x82>
 800734a:	2300      	movs	r3, #0
 800734c:	e00c      	b.n	8007368 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3338      	adds	r3, #56	; 0x38
 8007352:	3352      	adds	r3, #82	; 0x52
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fd8f 	bl	8005e78 <ld_dword>
 800735a:	4603      	mov	r3, r0
 800735c:	4a05      	ldr	r2, [pc, #20]	; (8007374 <check_fs+0xa8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <check_fs+0x9a>
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007366:	2302      	movs	r3, #2
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	00544146 	.word	0x00544146
 8007374:	33544146 	.word	0x33544146

08007378 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b096      	sub	sp, #88	; 0x58
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff ff59 	bl	8007244 <get_ldnumber>
 8007392:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	2b00      	cmp	r3, #0
 8007398:	da01      	bge.n	800739e <find_volume+0x26>
 800739a:	230b      	movs	r3, #11
 800739c:	e26c      	b.n	8007878 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800739e:	4aa4      	ldr	r2, [pc, #656]	; (8007630 <find_volume+0x2b8>)
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <find_volume+0x3a>
 80073ae:	230c      	movs	r3, #12
 80073b0:	e262      	b.n	8007878 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80073b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073b4:	f7fe fe48 	bl	8006048 <lock_fs>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <find_volume+0x4a>
 80073be:	230f      	movs	r3, #15
 80073c0:	e25a      	b.n	8007878 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fc95 	bl	8005d0c <disk_status>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <find_volume+0x92>
 80073fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007406:	230a      	movs	r3, #10
 8007408:	e236      	b.n	8007878 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800740a:	2300      	movs	r3, #0
 800740c:	e234      	b.n	8007878 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fc8d 	bl	8005d40 <disk_initialize>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800742c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007438:	2303      	movs	r3, #3
 800743a:	e21d      	b.n	8007878 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <find_volume+0xda>
 8007442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800744e:	230a      	movs	r3, #10
 8007450:	e212      	b.n	8007878 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	7858      	ldrb	r0, [r3, #1]
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	330c      	adds	r3, #12
 800745a:	461a      	mov	r2, r3
 800745c:	2102      	movs	r1, #2
 800745e:	f7fe fcd5 	bl	8005e0c <disk_ioctl>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <find_volume+0xf4>
 8007468:	2301      	movs	r3, #1
 800746a:	e205      	b.n	8007878 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	899b      	ldrh	r3, [r3, #12]
 8007470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007474:	d80d      	bhi.n	8007492 <find_volume+0x11a>
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	899b      	ldrh	r3, [r3, #12]
 800747a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747e:	d308      	bcc.n	8007492 <find_volume+0x11a>
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	899b      	ldrh	r3, [r3, #12]
 8007484:	461a      	mov	r2, r3
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	899b      	ldrh	r3, [r3, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <find_volume+0x11e>
 8007492:	2301      	movs	r3, #1
 8007494:	e1f0      	b.n	8007878 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800749a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800749c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800749e:	f7ff ff15 	bl	80072cc <check_fs>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d14b      	bne.n	8007548 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074b0:	2300      	movs	r3, #0
 80074b2:	643b      	str	r3, [r7, #64]	; 0x40
 80074b4:	e01f      	b.n	80074f6 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80074bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80074c4:	4413      	add	r3, r2
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	3304      	adds	r3, #4
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <find_volume+0x168>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	3308      	adds	r3, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fcce 	bl	8005e78 <ld_dword>
 80074dc:	4602      	mov	r2, r0
 80074de:	e000      	b.n	80074e2 <find_volume+0x16a>
 80074e0:	2200      	movs	r2, #0
 80074e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80074ea:	440b      	add	r3, r1
 80074ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f2:	3301      	adds	r3, #1
 80074f4:	643b      	str	r3, [r7, #64]	; 0x40
 80074f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d9dc      	bls.n	80074b6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80074fc:	2300      	movs	r3, #0
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <find_volume+0x194>
 8007506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007508:	3b01      	subs	r3, #1
 800750a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007514:	4413      	add	r3, r2
 8007516:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800751a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800751c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <find_volume+0x1b6>
 8007522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007526:	f7ff fed1 	bl	80072cc <check_fs>
 800752a:	4603      	mov	r3, r0
 800752c:	e000      	b.n	8007530 <find_volume+0x1b8>
 800752e:	2303      	movs	r3, #3
 8007530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007538:	2b01      	cmp	r3, #1
 800753a:	d905      	bls.n	8007548 <find_volume+0x1d0>
 800753c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753e:	3301      	adds	r3, #1
 8007540:	643b      	str	r3, [r7, #64]	; 0x40
 8007542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007544:	2b03      	cmp	r3, #3
 8007546:	d9e1      	bls.n	800750c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800754c:	2b04      	cmp	r3, #4
 800754e:	d101      	bne.n	8007554 <find_volume+0x1dc>
 8007550:	2301      	movs	r3, #1
 8007552:	e191      	b.n	8007878 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007558:	2b01      	cmp	r3, #1
 800755a:	d901      	bls.n	8007560 <find_volume+0x1e8>
 800755c:	230d      	movs	r3, #13
 800755e:	e18b      	b.n	8007878 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	3338      	adds	r3, #56	; 0x38
 8007564:	330b      	adds	r3, #11
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fc6e 	bl	8005e48 <ld_word>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	899b      	ldrh	r3, [r3, #12]
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <find_volume+0x204>
 8007578:	230d      	movs	r3, #13
 800757a:	e17d      	b.n	8007878 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	3338      	adds	r3, #56	; 0x38
 8007580:	3316      	adds	r3, #22
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fc60 	bl	8005e48 <ld_word>
 8007588:	4603      	mov	r3, r0
 800758a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <find_volume+0x228>
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	3338      	adds	r3, #56	; 0x38
 8007596:	3324      	adds	r3, #36	; 0x24
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fc6d 	bl	8005e78 <ld_dword>
 800759e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	789b      	ldrb	r3, [r3, #2]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d005      	beq.n	80075c4 <find_volume+0x24c>
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	789b      	ldrb	r3, [r3, #2]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d001      	beq.n	80075c4 <find_volume+0x24c>
 80075c0:	230d      	movs	r3, #13
 80075c2:	e159      	b.n	8007878 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	789b      	ldrb	r3, [r3, #2]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075cc:	fb02 f303 	mul.w	r3, r2, r3
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	895b      	ldrh	r3, [r3, #10]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <find_volume+0x280>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	895b      	ldrh	r3, [r3, #10]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	895b      	ldrh	r3, [r3, #10]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <find_volume+0x284>
 80075f8:	230d      	movs	r3, #13
 80075fa:	e13d      	b.n	8007878 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	3338      	adds	r3, #56	; 0x38
 8007600:	3311      	adds	r3, #17
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fc20 	bl	8005e48 <ld_word>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	891b      	ldrh	r3, [r3, #8]
 8007614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007616:	8992      	ldrh	r2, [r2, #12]
 8007618:	0952      	lsrs	r2, r2, #5
 800761a:	b292      	uxth	r2, r2
 800761c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007620:	fb02 f201 	mul.w	r2, r2, r1
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <find_volume+0x2bc>
 800762c:	230d      	movs	r3, #13
 800762e:	e123      	b.n	8007878 <find_volume+0x500>
 8007630:	20004374 	.word	0x20004374

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	3338      	adds	r3, #56	; 0x38
 8007638:	3313      	adds	r3, #19
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fc04 	bl	8005e48 <ld_word>
 8007640:	4603      	mov	r3, r0
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <find_volume+0x2e0>
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	3338      	adds	r3, #56	; 0x38
 800764e:	3320      	adds	r3, #32
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fc11 	bl	8005e78 <ld_dword>
 8007656:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	3338      	adds	r3, #56	; 0x38
 800765c:	330e      	adds	r3, #14
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fbf2 	bl	8005e48 <ld_word>
 8007664:	4603      	mov	r3, r0
 8007666:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007668:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <find_volume+0x2fa>
 800766e:	230d      	movs	r3, #13
 8007670:	e102      	b.n	8007878 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007672:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007676:	4413      	add	r3, r2
 8007678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767a:	8911      	ldrh	r1, [r2, #8]
 800767c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767e:	8992      	ldrh	r2, [r2, #12]
 8007680:	0952      	lsrs	r2, r2, #5
 8007682:	b292      	uxth	r2, r2
 8007684:	fbb1 f2f2 	udiv	r2, r1, r2
 8007688:	b292      	uxth	r2, r2
 800768a:	4413      	add	r3, r2
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800768e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	429a      	cmp	r2, r3
 8007694:	d201      	bcs.n	800769a <find_volume+0x322>
 8007696:	230d      	movs	r3, #13
 8007698:	e0ee      	b.n	8007878 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800769a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a2:	8952      	ldrh	r2, [r2, #10]
 80076a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <find_volume+0x33c>
 80076b0:	230d      	movs	r3, #13
 80076b2:	e0e1      	b.n	8007878 <find_volume+0x500>
		fmt = FS_FAT32;
 80076b4:	2303      	movs	r3, #3
 80076b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d802      	bhi.n	80076ca <find_volume+0x352>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d802      	bhi.n	80076da <find_volume+0x362>
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80076e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ec:	441a      	add	r2, r3
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80076f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	441a      	add	r2, r3
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80076fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007700:	2b03      	cmp	r3, #3
 8007702:	d11e      	bne.n	8007742 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	3338      	adds	r3, #56	; 0x38
 8007708:	332a      	adds	r3, #42	; 0x2a
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fb9c 	bl	8005e48 <ld_word>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <find_volume+0x3a2>
 8007716:	230d      	movs	r3, #13
 8007718:	e0ae      	b.n	8007878 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	891b      	ldrh	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <find_volume+0x3ae>
 8007722:	230d      	movs	r3, #13
 8007724:	e0a8      	b.n	8007878 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	3338      	adds	r3, #56	; 0x38
 800772a:	332c      	adds	r3, #44	; 0x2c
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe fba3 	bl	8005e78 <ld_dword>
 8007732:	4602      	mov	r2, r0
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
 8007740:	e01f      	b.n	8007782 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	891b      	ldrh	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <find_volume+0x3d6>
 800774a:	230d      	movs	r3, #13
 800774c:	e094      	b.n	8007878 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007754:	441a      	add	r2, r3
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800775a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800775e:	2b02      	cmp	r3, #2
 8007760:	d103      	bne.n	800776a <find_volume+0x3f2>
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	e00a      	b.n	8007780 <find_volume+0x408>
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	69da      	ldr	r2, [r3, #28]
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	085a      	lsrs	r2, r3, #1
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	4619      	mov	r1, r3
 800778c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778e:	440b      	add	r3, r1
 8007790:	3b01      	subs	r3, #1
 8007792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007794:	8989      	ldrh	r1, [r1, #12]
 8007796:	fbb3 f3f1 	udiv	r3, r3, r1
 800779a:	429a      	cmp	r2, r3
 800779c:	d201      	bcs.n	80077a2 <find_volume+0x42a>
 800779e:	230d      	movs	r3, #13
 80077a0:	e06a      	b.n	8007878 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a8:	619a      	str	r2, [r3, #24]
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2280      	movs	r2, #128	; 0x80
 80077b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80077b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d149      	bne.n	8007854 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	3338      	adds	r3, #56	; 0x38
 80077c4:	3330      	adds	r3, #48	; 0x30
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fb3e 	bl	8005e48 <ld_word>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d140      	bne.n	8007854 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80077d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d4:	3301      	adds	r3, #1
 80077d6:	4619      	mov	r1, r3
 80077d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077da:	f7fe fddb 	bl	8006394 <move_window>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d137      	bne.n	8007854 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	2200      	movs	r2, #0
 80077e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	3338      	adds	r3, #56	; 0x38
 80077ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fb28 	bl	8005e48 <ld_word>
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007800:	429a      	cmp	r2, r3
 8007802:	d127      	bne.n	8007854 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	3338      	adds	r3, #56	; 0x38
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fb35 	bl	8005e78 <ld_dword>
 800780e:	4603      	mov	r3, r0
 8007810:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <find_volume+0x508>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d11e      	bne.n	8007854 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	3338      	adds	r3, #56	; 0x38
 800781a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fb2a 	bl	8005e78 <ld_dword>
 8007824:	4603      	mov	r3, r0
 8007826:	4a17      	ldr	r2, [pc, #92]	; (8007884 <find_volume+0x50c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d113      	bne.n	8007854 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	3338      	adds	r3, #56	; 0x38
 8007830:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fb1f 	bl	8005e78 <ld_dword>
 800783a:	4602      	mov	r2, r0
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	3338      	adds	r3, #56	; 0x38
 8007844:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fb15 	bl	8005e78 <ld_dword>
 800784e:	4602      	mov	r2, r0
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800785a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <find_volume+0x510>)
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	4b08      	ldr	r3, [pc, #32]	; (8007888 <find_volume+0x510>)
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <find_volume+0x510>)
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007870:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007872:	f7fe fd27 	bl	80062c4 <clear_lock>
#endif
	return FR_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3758      	adds	r7, #88	; 0x58
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	41615252 	.word	0x41615252
 8007884:	61417272 	.word	0x61417272
 8007888:	20004378 	.word	0x20004378

0800788c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007896:	2309      	movs	r3, #9
 8007898:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d02e      	beq.n	80078fe <validate+0x72>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02a      	beq.n	80078fe <validate+0x72>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d025      	beq.n	80078fe <validate+0x72>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	889a      	ldrh	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	88db      	ldrh	r3, [r3, #6]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d11e      	bne.n	80078fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fbbf 	bl	8006048 <lock_fs>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d014      	beq.n	80078fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fa18 	bl	8005d0c <disk_status>
 80078dc:	4603      	mov	r3, r0
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <validate+0x60>
				res = FR_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
 80078ea:	e008      	b.n	80078fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fbbe 	bl	8006074 <unlock_fs>
 80078f8:	e001      	b.n	80078fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80078fa:	230f      	movs	r3, #15
 80078fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <validate+0x7e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	e000      	b.n	800790c <validate+0x80>
 800790a:	2300      	movs	r3, #0
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	6013      	str	r3, [r2, #0]
	return res;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff fc86 	bl	8007244 <get_ldnumber>
 8007938:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	da01      	bge.n	8007944 <f_mount+0x28>
 8007940:	230b      	movs	r3, #11
 8007942:	e048      	b.n	80079d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007944:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <f_mount+0xc4>)
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00f      	beq.n	8007974 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007954:	69b8      	ldr	r0, [r7, #24]
 8007956:	f7fe fcb5 	bl	80062c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ff44 	bl	80087ec <ff_del_syncobj>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <f_mount+0x52>
 800796a:	2302      	movs	r3, #2
 800796c:	e033      	b.n	80079d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00f      	beq.n	800799a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3310      	adds	r3, #16
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f000 ff13 	bl	80087b6 <ff_cre_syncobj>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <f_mount+0x7e>
 8007996:	2302      	movs	r3, #2
 8007998:	e01d      	b.n	80079d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4910      	ldr	r1, [pc, #64]	; (80079e0 <f_mount+0xc4>)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <f_mount+0x94>
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d001      	beq.n	80079b4 <f_mount+0x98>
 80079b0:	2300      	movs	r3, #0
 80079b2:	e010      	b.n	80079d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80079b4:	f107 010c 	add.w	r1, r7, #12
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	2200      	movs	r2, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fcda 	bl	8007378 <find_volume>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	7dfa      	ldrb	r2, [r7, #23]
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fb50 	bl	8006074 <unlock_fs>
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20004374 	.word	0x20004374

080079e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b098      	sub	sp, #96	; 0x60
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <f_open+0x18>
 80079f8:	2309      	movs	r3, #9
 80079fa:	e1c2      	b.n	8007d82 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a04:	79fa      	ldrb	r2, [r7, #7]
 8007a06:	f107 0110 	add.w	r1, r7, #16
 8007a0a:	f107 0308 	add.w	r3, r7, #8
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fcb2 	bl	8007378 <find_volume>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 819f 	bne.w	8007d62 <f_open+0x37e>
		dj.obj.fs = fs;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	f107 0314 	add.w	r3, r7, #20
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fb91 	bl	8007158 <follow_path>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11a      	bne.n	8007a7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da03      	bge.n	8007a56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a4e:	2306      	movs	r3, #6
 8007a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a54:	e011      	b.n	8007a7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fb1c 	bl	80060ac <chk_lock>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 031c 	and.w	r3, r3, #28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d07f      	beq.n	8007b84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d017      	beq.n	8007abc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d10e      	bne.n	8007ab2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a94:	f7fe fb66 	bl	8006164 <enq_lock>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d006      	beq.n	8007aac <f_open+0xc8>
 8007a9e:	f107 0314 	add.w	r3, r7, #20
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fa92 	bl	8006fcc <dir_register>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	e000      	b.n	8007aae <f_open+0xca>
 8007aac:	2312      	movs	r3, #18
 8007aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f043 0308 	orr.w	r3, r3, #8
 8007ab8:	71fb      	strb	r3, [r7, #7]
 8007aba:	e010      	b.n	8007ade <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007abc:	7ebb      	ldrb	r3, [r7, #26]
 8007abe:	f003 0311 	and.w	r3, r3, #17
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <f_open+0xea>
					res = FR_DENIED;
 8007ac6:	2307      	movs	r3, #7
 8007ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007acc:	e007      	b.n	8007ade <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <f_open+0xfa>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d168      	bne.n	8007bb8 <f_open+0x1d4>
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d063      	beq.n	8007bb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007af0:	f7fd fea4 	bl	800583c <get_fattime>
 8007af4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	330e      	adds	r3, #14
 8007afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe f9f9 	bl	8005ef4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	3316      	adds	r3, #22
 8007b06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fe f9f3 	bl	8005ef4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	330b      	adds	r3, #11
 8007b12:	2220      	movs	r2, #32
 8007b14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff f9c1 	bl	8006ea4 <ld_clust>
 8007b22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff f9d9 	bl	8006ee2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	331c      	adds	r3, #28
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe f9dc 	bl	8005ef4 <st_dword>
					fs->wflag = 1;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d037      	beq.n	8007bb8 <f_open+0x1d4>
						dw = fs->winsect;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	2200      	movs	r2, #0
 8007b54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fec9 	bl	80068ee <remove_chain>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d126      	bne.n	8007bb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fc10 	bl	8006394 <move_window>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b7e:	3a01      	subs	r2, #1
 8007b80:	615a      	str	r2, [r3, #20]
 8007b82:	e019      	b.n	8007bb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d115      	bne.n	8007bb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b8c:	7ebb      	ldrb	r3, [r7, #26]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007b96:	2304      	movs	r3, #4
 8007b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b9c:	e00c      	b.n	8007bb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <f_open+0x1d4>
 8007ba8:	7ebb      	ldrb	r3, [r7, #26]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <f_open+0x1d4>
						res = FR_DENIED;
 8007bb2:	2307      	movs	r3, #7
 8007bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d128      	bne.n	8007c12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fad5 	bl	80061a8 <inc_lock>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <f_open+0x22e>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 80a3 	bne.w	8007d62 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff f93e 	bl	8006ea4 <ld_clust>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c30:	331c      	adds	r3, #28
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe f920 	bl	8005e78 <ld_dword>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	88da      	ldrh	r2, [r3, #6]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	79fa      	ldrb	r2, [r7, #7]
 8007c56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3330      	adds	r3, #48	; 0x30
 8007c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c72:	2100      	movs	r1, #0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe f98a 	bl	8005f8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d06e      	beq.n	8007d62 <f_open+0x37e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d06a      	beq.n	8007d62 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	895b      	ldrh	r3, [r3, #10]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	899b      	ldrh	r3, [r3, #12]
 8007c9e:	fb03 f302 	mul.w	r3, r3, r2
 8007ca2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb0:	e016      	b.n	8007ce0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fc29 	bl	800650e <get_fat>
 8007cbc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d802      	bhi.n	8007cca <f_open+0x2e6>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd0:	d102      	bne.n	8007cd8 <f_open+0x2f4>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <f_open+0x30c>
 8007ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d8e0      	bhi.n	8007cb2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d131      	bne.n	8007d62 <f_open+0x37e>
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	899b      	ldrh	r3, [r3, #12]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d0a:	fb02 f201 	mul.w	r2, r2, r1
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d026      	beq.n	8007d62 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fbd9 	bl	80064d0 <clust2sect>
 8007d1e:	6478      	str	r0, [r7, #68]	; 0x44
 8007d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <f_open+0x34a>
						res = FR_INT_ERR;
 8007d26:	2302      	movs	r3, #2
 8007d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d2c:	e019      	b.n	8007d62 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	899b      	ldrh	r3, [r3, #12]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	7858      	ldrb	r0, [r3, #1]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1a      	ldr	r2, [r3, #32]
 8007d50:	2301      	movs	r3, #1
 8007d52:	f7fe f81b 	bl	8005d8c <disk_read>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <f_open+0x37e>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <f_open+0x38c>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe f97b 	bl	8006074 <unlock_fs>
 8007d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3760      	adds	r7, #96	; 0x60
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b08c      	sub	sp, #48	; 0x30
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f107 0210 	add.w	r2, r7, #16
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fd6e 	bl	800788c <validate>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <f_write+0x44>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	7d5b      	ldrb	r3, [r3, #21]
 8007dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <f_write+0x58>
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe f94c 	bl	8006074 <unlock_fs>
 8007ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007de0:	e192      	b.n	8008108 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	7d1b      	ldrb	r3, [r3, #20]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <f_write+0x72>
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2107      	movs	r1, #7
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe f93e 	bl	8006074 <unlock_fs>
 8007df8:	2307      	movs	r3, #7
 8007dfa:	e185      	b.n	8008108 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	441a      	add	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	f080 816a 	bcs.w	80080e2 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007e16:	e164      	b.n	80080e2 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	8992      	ldrh	r2, [r2, #12]
 8007e20:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e24:	fb02 f201 	mul.w	r2, r2, r1
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 810f 	bne.w	800804e <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	8992      	ldrh	r2, [r2, #12]
 8007e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	8952      	ldrh	r2, [r2, #10]
 8007e40:	3a01      	subs	r2, #1
 8007e42:	4013      	ands	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d14d      	bne.n	8007ee8 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10c      	bne.n	8007e6e <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11a      	bne.n	8007e96 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fda7 	bl	80069b8 <create_chain>
 8007e6a:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e6c:	e013      	b.n	8007e96 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7fe fe33 	bl	8006ae8 <clmt_clust>
 8007e82:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e84:	e007      	b.n	8007e96 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7fe fd92 	bl	80069b8 <create_chain>
 8007e94:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8127 	beq.w	80080ec <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d109      	bne.n	8007eb8 <f_write+0x12e>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	755a      	strb	r2, [r3, #21]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2102      	movs	r1, #2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe f8e0 	bl	8006074 <unlock_fs>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e127      	b.n	8008108 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ebe:	d109      	bne.n	8007ed4 <f_write+0x14a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	755a      	strb	r2, [r3, #21]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2101      	movs	r1, #1
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe f8d2 	bl	8006074 <unlock_fs>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e119      	b.n	8008108 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <f_write+0x15e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	7d1b      	ldrb	r3, [r3, #20]
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da1d      	bge.n	8007f2e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	7858      	ldrb	r0, [r3, #1]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a1a      	ldr	r2, [r3, #32]
 8007f00:	2301      	movs	r3, #1
 8007f02:	f7fd ff63 	bl	8005dcc <disk_write>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <f_write+0x196>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	755a      	strb	r2, [r3, #21]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2101      	movs	r1, #1
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe f8ac 	bl	8006074 <unlock_fs>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0f3      	b.n	8008108 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	7d1b      	ldrb	r3, [r3, #20]
 8007f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f7fe faca 	bl	80064d0 <clust2sect>
 8007f3c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <f_write+0x1ce>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2202      	movs	r2, #2
 8007f48:	755a      	strb	r2, [r3, #21]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe f890 	bl	8006074 <unlock_fs>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e0d7      	b.n	8008108 <f_write+0x37e>
			sect += csect;
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	899b      	ldrh	r3, [r3, #12]
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d048      	beq.n	8008006 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	4413      	add	r3, r2
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	8952      	ldrh	r2, [r2, #10]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d905      	bls.n	8007f8e <f_write+0x204>
					cc = fs->csize - csect;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	895b      	ldrh	r3, [r3, #10]
 8007f86:	461a      	mov	r2, r3
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	7858      	ldrb	r0, [r3, #1]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	69f9      	ldr	r1, [r7, #28]
 8007f98:	f7fd ff18 	bl	8005dcc <disk_write>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <f_write+0x22c>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	755a      	strb	r2, [r3, #21]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2101      	movs	r1, #1
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe f861 	bl	8006074 <unlock_fs>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0a8      	b.n	8008108 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d918      	bls.n	8007ff6 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1a      	ldr	r2, [r3, #32]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	8992      	ldrh	r2, [r2, #12]
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	18d1      	adds	r1, r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	899b      	ldrh	r3, [r3, #12]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7fd ffb2 	bl	8005f4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7d1b      	ldrb	r3, [r3, #20]
 8007fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	899b      	ldrh	r3, [r3, #12]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008004:	e050      	b.n	80080a8 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	429a      	cmp	r2, r3
 800800e:	d01b      	beq.n	8008048 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008018:	429a      	cmp	r2, r3
 800801a:	d215      	bcs.n	8008048 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	7858      	ldrb	r0, [r3, #1]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008026:	2301      	movs	r3, #1
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	f7fd feaf 	bl	8005d8c <disk_read>
 800802e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	755a      	strb	r2, [r3, #21]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2101      	movs	r1, #1
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe f818 	bl	8006074 <unlock_fs>
 8008044:	2301      	movs	r3, #1
 8008046:	e05f      	b.n	8008108 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	899b      	ldrh	r3, [r3, #12]
 8008052:	4618      	mov	r0, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	8992      	ldrh	r2, [r2, #12]
 800805c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008060:	fb02 f201 	mul.w	r2, r2, r1
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	1ac3      	subs	r3, r0, r3
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800806a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d901      	bls.n	8008076 <f_write+0x2ec>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	8992      	ldrh	r2, [r2, #12]
 8008084:	fbb3 f0f2 	udiv	r0, r3, r2
 8008088:	fb02 f200 	mul.w	r2, r2, r0
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	440b      	add	r3, r1
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fd ff59 	bl	8005f4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	7d1b      	ldrb	r3, [r3, #20]
 800809e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	4413      	add	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	441a      	add	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	619a      	str	r2, [r3, #24]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bf38      	it	cc
 80080c8:	461a      	movcc	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	441a      	add	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f ae97 	bne.w	8007e18 <f_write+0x8e>
 80080ea:	e000      	b.n	80080ee <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080ec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	7d1b      	ldrb	r3, [r3, #20]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd ffb7 	bl	8006074 <unlock_fs>
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f107 0208 	add.w	r2, r7, #8
 800811e:	4611      	mov	r1, r2
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fbb3 	bl	800788c <validate>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d16d      	bne.n	800820c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7d1b      	ldrb	r3, [r3, #20]
 8008134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d067      	beq.n	800820c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7d1b      	ldrb	r3, [r3, #20]
 8008140:	b25b      	sxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	da1a      	bge.n	800817c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	7858      	ldrb	r0, [r3, #1]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1a      	ldr	r2, [r3, #32]
 8008154:	2301      	movs	r3, #1
 8008156:	f7fd fe39 	bl	8005dcc <disk_write>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <f_sync+0x5e>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2101      	movs	r1, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd ff85 	bl	8006074 <unlock_fs>
 800816a:	2301      	movs	r3, #1
 800816c:	e055      	b.n	800821a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7d1b      	ldrb	r3, [r3, #20]
 8008172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008176:	b2da      	uxtb	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800817c:	f7fd fb5e 	bl	800583c <get_fattime>
 8008180:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe f902 	bl	8006394 <move_window>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d138      	bne.n	800820c <f_sync+0xfc>
					dir = fp->dir_ptr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	330b      	adds	r3, #11
 80081a4:	781a      	ldrb	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	330b      	adds	r3, #11
 80081aa:	f042 0220 	orr.w	r2, r2, #32
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68f9      	ldr	r1, [r7, #12]
 80081be:	f7fe fe90 	bl	8006ee2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f103 021c 	add.w	r2, r3, #28
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7fd fe90 	bl	8005ef4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3316      	adds	r3, #22
 80081d8:	6939      	ldr	r1, [r7, #16]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fd fe8a 	bl	8005ef4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3312      	adds	r3, #18
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fd fe69 	bl	8005ebe <st_word>
					fs->wflag = 1;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2201      	movs	r2, #1
 80081f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe f8fb 	bl	80063f0 <sync_fs>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7d1b      	ldrb	r3, [r3, #20]
 8008202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008206:	b2da      	uxtb	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	7dfa      	ldrb	r2, [r7, #23]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd ff2e 	bl	8006074 <unlock_fs>
 8008218:	7dfb      	ldrb	r3, [r7, #23]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b090      	sub	sp, #64	; 0x40
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f107 0208 	add.w	r2, r7, #8
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fb29 	bl	800788c <validate>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <f_lseek+0x2e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7d5b      	ldrb	r3, [r3, #21]
 800824c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008250:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008254:	2b00      	cmp	r3, #0
 8008256:	d009      	beq.n	800826c <f_lseek+0x4a>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7fd ff07 	bl	8006074 <unlock_fs>
 8008266:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800826a:	e244      	b.n	80086f6 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80f2 	beq.w	800845a <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827c:	d164      	bne.n	8008348 <f_lseek+0x126>
			tbl = fp->cltbl;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	627a      	str	r2, [r7, #36]	; 0x24
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	2302      	movs	r3, #2
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	d044      	beq.n	8008328 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	2300      	movs	r3, #0
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	3302      	adds	r3, #2
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	3301      	adds	r3, #1
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe f927 	bl	800650e <get_fat>
 80082c0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d809      	bhi.n	80082dc <f_lseek+0xba>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	755a      	strb	r2, [r3, #21]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2102      	movs	r1, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fd fece 	bl	8006074 <unlock_fs>
 80082d8:	2302      	movs	r3, #2
 80082da:	e20c      	b.n	80086f6 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e2:	d109      	bne.n	80082f8 <f_lseek+0xd6>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	755a      	strb	r2, [r3, #21]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd fec0 	bl	8006074 <unlock_fs>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e1fe      	b.n	80086f6 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	429a      	cmp	r2, r3
 8008300:	d0d4      	beq.n	80082ac <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	429a      	cmp	r2, r3
 8008308:	d809      	bhi.n	800831e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	627a      	str	r2, [r7, #36]	; 0x24
 8008310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	627a      	str	r2, [r7, #36]	; 0x24
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008324:	429a      	cmp	r2, r3
 8008326:	d3ba      	bcc.n	800829e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800832e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	429a      	cmp	r2, r3
 8008336:	d803      	bhi.n	8008340 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e1d1      	b.n	80086e4 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008340:	2311      	movs	r3, #17
 8008342:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008346:	e1cd      	b.n	80086e4 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d902      	bls.n	8008358 <f_lseek+0x136>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 81bf 	beq.w	80086e4 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fe fbbb 	bl	8006ae8 <clmt_clust>
 8008372:	4602      	mov	r2, r0
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fe f8a5 	bl	80064d0 <clust2sect>
 8008386:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <f_lseek+0x180>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	755a      	strb	r2, [r3, #21]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2102      	movs	r1, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd fe6b 	bl	8006074 <unlock_fs>
 800839e:	2302      	movs	r3, #2
 80083a0:	e1a9      	b.n	80086f6 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	8992      	ldrh	r2, [r2, #12]
 80083aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	8952      	ldrh	r2, [r2, #10]
 80083b2:	3a01      	subs	r2, #1
 80083b4:	4013      	ands	r3, r2
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4413      	add	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	8992      	ldrh	r2, [r2, #12]
 80083c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083c8:	fb02 f201 	mul.w	r2, r2, r1
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8188 	beq.w	80086e4 <f_lseek+0x4c2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f000 8182 	beq.w	80086e4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7d1b      	ldrb	r3, [r3, #20]
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da1d      	bge.n	8008426 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	7858      	ldrb	r0, [r3, #1]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	2301      	movs	r3, #1
 80083fa:	f7fd fce7 	bl	8005dcc <disk_write>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d009      	beq.n	8008418 <f_lseek+0x1f6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	755a      	strb	r2, [r3, #21]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2101      	movs	r1, #1
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd fe30 	bl	8006074 <unlock_fs>
 8008414:	2301      	movs	r3, #1
 8008416:	e16e      	b.n	80086f6 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7d1b      	ldrb	r3, [r3, #20]
 800841c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7858      	ldrb	r0, [r3, #1]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008430:	2301      	movs	r3, #1
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	f7fd fcaa 	bl	8005d8c <disk_read>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <f_lseek+0x230>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	755a      	strb	r2, [r3, #21]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2101      	movs	r1, #1
 8008448:	4618      	mov	r0, r3
 800844a:	f7fd fe13 	bl	8006074 <unlock_fs>
 800844e:	2301      	movs	r3, #1
 8008450:	e151      	b.n	80086f6 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	621a      	str	r2, [r3, #32]
 8008458:	e144      	b.n	80086e4 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d908      	bls.n	8008476 <f_lseek+0x254>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7d1b      	ldrb	r3, [r3, #20]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	637b      	str	r3, [r7, #52]	; 0x34
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008484:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 80ce 	beq.w	800862a <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	895b      	ldrh	r3, [r3, #10]
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	899b      	ldrh	r3, [r3, #12]
 8008498:	fb03 f302 	mul.w	r3, r3, r2
 800849c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	1e59      	subs	r1, r3, #1
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d30f      	bcc.n	80084dc <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	1e5a      	subs	r2, r3, #1
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	425b      	negs	r3, r3
 80084c4:	401a      	ands	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084da:	e02c      	b.n	8008536 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d123      	bne.n	8008530 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fa63 	bl	80069b8 <create_chain>
 80084f2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d109      	bne.n	800850e <f_lseek+0x2ec>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	755a      	strb	r2, [r3, #21]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd fdb5 	bl	8006074 <unlock_fs>
 800850a:	2302      	movs	r3, #2
 800850c:	e0f3      	b.n	80086f6 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008514:	d109      	bne.n	800852a <f_lseek+0x308>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	755a      	strb	r2, [r3, #21]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2101      	movs	r1, #1
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd fda7 	bl	8006074 <unlock_fs>
 8008526:	2301      	movs	r3, #1
 8008528:	e0e5      	b.n	80086f6 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800852e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008534:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	d076      	beq.n	800862a <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 800853c:	e044      	b.n	80085c8 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	441a      	add	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fa28 	bl	80069b8 <create_chain>
 8008568:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	2b00      	cmp	r3, #0
 800856e:	d108      	bne.n	8008582 <f_lseek+0x360>
							ofs = 0; break;
 8008570:	2300      	movs	r3, #0
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	e02c      	b.n	80085d0 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd ffc7 	bl	800650e <get_fat>
 8008580:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008588:	d109      	bne.n	800859e <f_lseek+0x37c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	755a      	strb	r2, [r3, #21]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd fd6d 	bl	8006074 <unlock_fs>
 800859a:	2301      	movs	r3, #1
 800859c:	e0ab      	b.n	80086f6 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d904      	bls.n	80085ae <f_lseek+0x38c>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d309      	bcc.n	80085c2 <f_lseek+0x3a0>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	755a      	strb	r2, [r3, #21]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2102      	movs	r1, #2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fd fd5b 	bl	8006074 <unlock_fs>
 80085be:	2302      	movs	r3, #2
 80085c0:	e099      	b.n	80086f6 <f_lseek+0x4d4>
					fp->clust = clst;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d8b6      	bhi.n	800853e <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	441a      	add	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	899b      	ldrh	r3, [r3, #12]
 80085e0:	461a      	mov	r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80085e8:	fb02 f201 	mul.w	r2, r2, r1
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fd ff6a 	bl	80064d0 <clust2sect>
 80085fc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	2b00      	cmp	r3, #0
 8008602:	d109      	bne.n	8008618 <f_lseek+0x3f6>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	755a      	strb	r2, [r3, #21]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2102      	movs	r1, #2
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd fd30 	bl	8006074 <unlock_fs>
 8008614:	2302      	movs	r3, #2
 8008616:	e06e      	b.n	80086f6 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	899b      	ldrh	r3, [r3, #12]
 800861c:	461a      	mov	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	fbb3 f3f2 	udiv	r3, r3, r2
 8008624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008626:	4413      	add	r3, r2
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d90a      	bls.n	800864c <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7d1b      	ldrb	r3, [r3, #20]
 8008642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	8992      	ldrh	r2, [r2, #12]
 8008654:	fbb3 f1f2 	udiv	r1, r3, r2
 8008658:	fb02 f201 	mul.w	r2, r2, r1
 800865c:	1a9b      	subs	r3, r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d040      	beq.n	80086e4 <f_lseek+0x4c2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008668:	429a      	cmp	r2, r3
 800866a:	d03b      	beq.n	80086e4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	b25b      	sxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	da1d      	bge.n	80086b2 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	7858      	ldrb	r0, [r3, #1]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	2301      	movs	r3, #1
 8008686:	f7fd fba1 	bl	8005dcc <disk_write>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <f_lseek+0x482>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	755a      	strb	r2, [r3, #21]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2101      	movs	r1, #1
 800869a:	4618      	mov	r0, r3
 800869c:	f7fd fcea 	bl	8006074 <unlock_fs>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e028      	b.n	80086f6 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7d1b      	ldrb	r3, [r3, #20]
 80086a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	7858      	ldrb	r0, [r3, #1]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086bc:	2301      	movs	r3, #1
 80086be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c0:	f7fd fb64 	bl	8005d8c <disk_read>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <f_lseek+0x4bc>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	755a      	strb	r2, [r3, #21]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2101      	movs	r1, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fd fccd 	bl	8006074 <unlock_fs>
 80086da:	2301      	movs	r3, #1
 80086dc:	e00b      	b.n	80086f6 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd fcc1 	bl	8006074 <unlock_fs>
 80086f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3740      	adds	r7, #64	; 0x40
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008716:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008718:	7a5b      	ldrb	r3, [r3, #9]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d131      	bne.n	8008784 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008720:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008722:	7a5b      	ldrb	r3, [r3, #9]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 800872a:	2100      	movs	r1, #0
 800872c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800872e:	4b19      	ldr	r3, [pc, #100]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008730:	7a5b      	ldrb	r3, [r3, #9]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	4a17      	ldr	r2, [pc, #92]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008740:	7a5b      	ldrb	r3, [r3, #9]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	4b13      	ldr	r3, [pc, #76]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008748:	4413      	add	r3, r2
 800874a:	79fa      	ldrb	r2, [r7, #7]
 800874c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 8008750:	7a5b      	ldrb	r3, [r3, #9]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	b2d1      	uxtb	r1, r2
 8008758:	4a0e      	ldr	r2, [pc, #56]	; (8008794 <FATFS_LinkDriverEx+0x94>)
 800875a:	7251      	strb	r1, [r2, #9]
 800875c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	3330      	adds	r3, #48	; 0x30
 8008762:	b2da      	uxtb	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3301      	adds	r3, #1
 800876c:	223a      	movs	r2, #58	; 0x3a
 800876e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	3302      	adds	r3, #2
 8008774:	222f      	movs	r2, #47	; 0x2f
 8008776:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	3303      	adds	r3, #3
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	2000439c 	.word	0x2000439c

08008798 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087a2:	2200      	movs	r2, #0
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff ffaa 	bl	8008700 <FATFS_LinkDriverEx>
 80087ac:	4603      	mov	r3, r0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	4603      	mov	r3, r0
 80087be:	6039      	str	r1, [r7, #0]
 80087c0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80087c2:	2200      	movs	r2, #0
 80087c4:	2101      	movs	r1, #1
 80087c6:	2001      	movs	r0, #1
 80087c8:	f000 f9ae 	bl	8008b28 <osSemaphoreNew>
 80087cc:	4602      	mov	r2, r0
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bf14      	ite	ne
 80087da:	2301      	movne	r3, #1
 80087dc:	2300      	moveq	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	60fb      	str	r3, [r7, #12]

    return ret;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fab7 	bl	8008d68 <osSemaphoreDelete>
#endif
    return 1;
 80087fa:	2301      	movs	r3, #1
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa11 	bl	8008c3c <osSemaphoreAcquire>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008820:	2301      	movs	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008824:	68fb      	ldr	r3, [r7, #12]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa52 	bl	8008ce0 <osSemaphoreRelease>
#endif
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <__NVIC_SetPriority>:
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008854:	2b00      	cmp	r3, #0
 8008856:	db0a      	blt.n	800886e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	490c      	ldr	r1, [pc, #48]	; (8008890 <__NVIC_SetPriority+0x4c>)
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	0112      	lsls	r2, r2, #4
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	440b      	add	r3, r1
 8008868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800886c:	e00a      	b.n	8008884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	4908      	ldr	r1, [pc, #32]	; (8008894 <__NVIC_SetPriority+0x50>)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	3b04      	subs	r3, #4
 800887c:	0112      	lsls	r2, r2, #4
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	440b      	add	r3, r1
 8008882:	761a      	strb	r2, [r3, #24]
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	e000e100 	.word	0xe000e100
 8008894:	e000ed00 	.word	0xe000ed00

08008898 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <SysTick_Handler+0x1c>)
 800889e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088a0:	f002 fade 	bl	800ae60 <xTaskGetSchedulerState>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d001      	beq.n	80088ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088aa:	f003 f9c5 	bl	800bc38 <xPortSysTickHandler>
  }
}
 80088ae:	bf00      	nop
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	e000e010 	.word	0xe000e010

080088b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088bc:	2100      	movs	r1, #0
 80088be:	f06f 0004 	mvn.w	r0, #4
 80088c2:	f7ff ffbf 	bl	8008844 <__NVIC_SetPriority>
#endif
}
 80088c6:	bf00      	nop
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d2:	f3ef 8305 	mrs	r3, IPSR
 80088d6:	603b      	str	r3, [r7, #0]
  return(result);
 80088d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088de:	f06f 0305 	mvn.w	r3, #5
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	e00c      	b.n	8008900 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <osKernelInitialize+0x44>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d105      	bne.n	80088fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ee:	4b08      	ldr	r3, [pc, #32]	; (8008910 <osKernelInitialize+0x44>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	e002      	b.n	8008900 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008900:	687b      	ldr	r3, [r7, #4]
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	200043a8 	.word	0x200043a8

08008914 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800891a:	f002 faa1 	bl	800ae60 <xTaskGetSchedulerState>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <osKernelGetState+0x1a>
 8008924:	2b02      	cmp	r3, #2
 8008926:	d105      	bne.n	8008934 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008928:	2302      	movs	r3, #2
 800892a:	607b      	str	r3, [r7, #4]
      break;
 800892c:	e00c      	b.n	8008948 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800892e:	2303      	movs	r3, #3
 8008930:	607b      	str	r3, [r7, #4]
      break;
 8008932:	e009      	b.n	8008948 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008934:	4b07      	ldr	r3, [pc, #28]	; (8008954 <osKernelGetState+0x40>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d102      	bne.n	8008942 <osKernelGetState+0x2e>
        state = osKernelReady;
 800893c:	2301      	movs	r3, #1
 800893e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008940:	e001      	b.n	8008946 <osKernelGetState+0x32>
        state = osKernelInactive;
 8008942:	2300      	movs	r3, #0
 8008944:	607b      	str	r3, [r7, #4]
      break;
 8008946:	bf00      	nop
  }

  return (state);
 8008948:	687b      	ldr	r3, [r7, #4]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200043a8 	.word	0x200043a8

08008958 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800895e:	f3ef 8305 	mrs	r3, IPSR
 8008962:	603b      	str	r3, [r7, #0]
  return(result);
 8008964:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <osKernelStart+0x1a>
    stat = osErrorISR;
 800896a:	f06f 0305 	mvn.w	r3, #5
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	e010      	b.n	8008994 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008972:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <osKernelStart+0x48>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d109      	bne.n	800898e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800897a:	f7ff ff9d 	bl	80088b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800897e:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <osKernelStart+0x48>)
 8008980:	2202      	movs	r2, #2
 8008982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008984:	f001 fe12 	bl	800a5ac <vTaskStartScheduler>
      stat = osOK;
 8008988:	2300      	movs	r3, #0
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	e002      	b.n	8008994 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	200043a8 	.word	0x200043a8

080089a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089aa:	f3ef 8305 	mrs	r3, IPSR
 80089ae:	603b      	str	r3, [r7, #0]
  return(result);
 80089b0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80089b6:	f001 ff1b 	bl	800a7f0 <xTaskGetTickCountFromISR>
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	e002      	b.n	80089c4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80089be:	f001 ff07 	bl	800a7d0 <xTaskGetTickCount>
 80089c2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80089c4:	687b      	ldr	r3, [r7, #4]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b08e      	sub	sp, #56	; 0x38
 80089d2:	af04      	add	r7, sp, #16
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089de:	f3ef 8305 	mrs	r3, IPSR
 80089e2:	617b      	str	r3, [r7, #20]
  return(result);
 80089e4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d17e      	bne.n	8008ae8 <osThreadNew+0x11a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d07b      	beq.n	8008ae8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089f4:	2318      	movs	r3, #24
 80089f6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d045      	beq.n	8008a94 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <osThreadNew+0x48>
        name = attr->name;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <osThreadNew+0x6e>
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2b38      	cmp	r3, #56	; 0x38
 8008a2e:	d805      	bhi.n	8008a3c <osThreadNew+0x6e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <osThreadNew+0x72>
        return (NULL);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e054      	b.n	8008aea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	089b      	lsrs	r3, r3, #2
 8008a4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <osThreadNew+0xa8>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	2b5b      	cmp	r3, #91	; 0x5b
 8008a5e:	d90a      	bls.n	8008a76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <osThreadNew+0xa8>
        mem = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	e010      	b.n	8008a98 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <osThreadNew+0xca>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <osThreadNew+0xca>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <osThreadNew+0xca>
          mem = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]
 8008a92:	e001      	b.n	8008a98 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d110      	bne.n	8008ac0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aa6:	9202      	str	r2, [sp, #8]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f001 fba3 	bl	800a200 <xTaskCreateStatic>
 8008aba:	4603      	mov	r3, r0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	e013      	b.n	8008ae8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d110      	bne.n	8008ae8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	f107 0310 	add.w	r3, r7, #16
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f001 fbee 	bl	800a2ba <xTaskCreate>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d001      	beq.n	8008ae8 <osThreadNew+0x11a>
            hTask = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ae8:	693b      	ldr	r3, [r7, #16]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3728      	adds	r7, #40	; 0x28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008afa:	f3ef 8305 	mrs	r3, IPSR
 8008afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <osDelay+0x1c>
    stat = osErrorISR;
 8008b06:	f06f 0305 	mvn.w	r3, #5
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e007      	b.n	8008b1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fd13 	bl	800a544 <vTaskDelay>
    }
  }

  return (stat);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b38:	f3ef 8305 	mrs	r3, IPSR
 8008b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d175      	bne.n	8008c30 <osSemaphoreNew+0x108>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d072      	beq.n	8008c30 <osSemaphoreNew+0x108>
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d86e      	bhi.n	8008c30 <osSemaphoreNew+0x108>
    mem = -1;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d015      	beq.n	8008b8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <osSemaphoreNew+0x4c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b4f      	cmp	r3, #79	; 0x4f
 8008b6c:	d902      	bls.n	8008b74 <osSemaphoreNew+0x4c>
        mem = 1;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	e00c      	b.n	8008b8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d108      	bne.n	8008b8e <osSemaphoreNew+0x66>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <osSemaphoreNew+0x66>
          mem = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61bb      	str	r3, [r7, #24]
 8008b88:	e001      	b.n	8008b8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b94:	d04c      	beq.n	8008c30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d128      	bne.n	8008bee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d10a      	bne.n	8008bb8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	9200      	str	r2, [sp, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2100      	movs	r1, #0
 8008bae:	2001      	movs	r0, #1
 8008bb0:	f000 fb80 	bl	80092b4 <xQueueGenericCreateStatic>
 8008bb4:	61f8      	str	r0, [r7, #28]
 8008bb6:	e005      	b.n	8008bc4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008bb8:	2203      	movs	r2, #3
 8008bba:	2100      	movs	r1, #0
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f000 fbf1 	bl	80093a4 <xQueueGenericCreate>
 8008bc2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d022      	beq.n	8008c10 <osSemaphoreNew+0xe8>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01f      	beq.n	8008c10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	69f8      	ldr	r0, [r7, #28]
 8008bd8:	f000 fcac 	bl	8009534 <xQueueGenericSend>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d016      	beq.n	8008c10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008be2:	69f8      	ldr	r0, [r7, #28]
 8008be4:	f001 f938 	bl	8009e58 <vQueueDelete>
            hSemaphore = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e010      	b.n	8008c10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d108      	bne.n	8008c06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fc2e 	bl	800945e <xQueueCreateCountingSemaphoreStatic>
 8008c02:	61f8      	str	r0, [r7, #28]
 8008c04:	e004      	b.n	8008c10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fc5f 	bl	80094cc <xQueueCreateCountingSemaphore>
 8008c0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00c      	beq.n	8008c30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e001      	b.n	8008c28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008c28:	6979      	ldr	r1, [r7, #20]
 8008c2a:	69f8      	ldr	r0, [r7, #28]
 8008c2c:	f001 fa60 	bl	800a0f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008c30:	69fb      	ldr	r3, [r7, #28]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d103      	bne.n	8008c5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008c54:	f06f 0303 	mvn.w	r3, #3
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e039      	b.n	8008cd0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c5c:	f3ef 8305 	mrs	r3, IPSR
 8008c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d022      	beq.n	8008cae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008c6e:	f06f 0303 	mvn.w	r3, #3
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e02c      	b.n	8008cd0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2100      	movs	r1, #0
 8008c82:	6938      	ldr	r0, [r7, #16]
 8008c84:	f001 f868 	bl	8009d58 <xQueueReceiveFromISR>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d003      	beq.n	8008c96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008c8e:	f06f 0302 	mvn.w	r3, #2
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e01c      	b.n	8008cd0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d019      	beq.n	8008cd0 <osSemaphoreAcquire+0x94>
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <osSemaphoreAcquire+0xa0>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	e010      	b.n	8008cd0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6938      	ldr	r0, [r7, #16]
 8008cb2:	f000 ff45 	bl	8009b40 <xQueueSemaphoreTake>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d009      	beq.n	8008cd0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008cc2:	f06f 0301 	mvn.w	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e002      	b.n	8008cd0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008cca:	f06f 0302 	mvn.w	r3, #2
 8008cce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	e000ed04 	.word	0xe000ed04

08008ce0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008cf6:	f06f 0303 	mvn.w	r3, #3
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	e02c      	b.n	8008d58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfe:	f3ef 8305 	mrs	r3, IPSR
 8008d02:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01a      	beq.n	8008d40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4619      	mov	r1, r3
 8008d14:	6938      	ldr	r0, [r7, #16]
 8008d16:	f000 fda6 	bl	8009866 <xQueueGiveFromISR>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d003      	beq.n	8008d28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008d20:	f06f 0302 	mvn.w	r3, #2
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e017      	b.n	8008d58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d014      	beq.n	8008d58 <osSemaphoreRelease+0x78>
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <osSemaphoreRelease+0x84>)
 8008d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	e00b      	b.n	8008d58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d40:	2300      	movs	r3, #0
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	6938      	ldr	r0, [r7, #16]
 8008d48:	f000 fbf4 	bl	8009534 <xQueueGenericSend>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d002      	beq.n	8008d58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008d52:	f06f 0302 	mvn.w	r3, #2
 8008d56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008d58:	697b      	ldr	r3, [r7, #20]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d74:	f3ef 8305 	mrs	r3, IPSR
 8008d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008d80:	f06f 0305 	mvn.w	r3, #5
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e00e      	b.n	8008da6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008d8e:	f06f 0303 	mvn.w	r3, #3
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	e007      	b.n	8008da6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f001 f9d4 	bl	800a144 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008da0:	6938      	ldr	r0, [r7, #16]
 8008da2:	f001 f859 	bl	8009e58 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008da6:	697b      	ldr	r3, [r7, #20]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc0:	f3ef 8305 	mrs	r3, IPSR
 8008dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8008dc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d15f      	bne.n	8008e8c <osMessageQueueNew+0xdc>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d05c      	beq.n	8008e8c <osMessageQueueNew+0xdc>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d059      	beq.n	8008e8c <osMessageQueueNew+0xdc>
    mem = -1;
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ddc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d029      	beq.n	8008e38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <osMessageQueueNew+0x62>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b4f      	cmp	r3, #79	; 0x4f
 8008df2:	d90e      	bls.n	8008e12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695a      	ldr	r2, [r3, #20]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <osMessageQueueNew+0x62>
        mem = 1;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	61bb      	str	r3, [r7, #24]
 8008e10:	e014      	b.n	8008e3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d110      	bne.n	8008e3c <osMessageQueueNew+0x8c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10c      	bne.n	8008e3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d108      	bne.n	8008e3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d104      	bne.n	8008e3c <osMessageQueueNew+0x8c>
          mem = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	e001      	b.n	8008e3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10b      	bne.n	8008e5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	9100      	str	r1, [sp, #0]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa2f 	bl	80092b4 <xQueueGenericCreateStatic>
 8008e56:	61f8      	str	r0, [r7, #28]
 8008e58:	e008      	b.n	8008e6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008e60:	2200      	movs	r2, #0
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 fa9d 	bl	80093a4 <xQueueGenericCreate>
 8008e6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e001      	b.n	8008e84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e84:	6979      	ldr	r1, [r7, #20]
 8008e86:	69f8      	ldr	r0, [r7, #28]
 8008e88:	f001 f932 	bl	800a0f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eb0:	f3ef 8305 	mrs	r3, IPSR
 8008eb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008eb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d028      	beq.n	8008f0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <osMessageQueuePut+0x36>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <osMessageQueuePut+0x36>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008ece:	f06f 0303 	mvn.w	r3, #3
 8008ed2:	61fb      	str	r3, [r7, #28]
 8008ed4:	e038      	b.n	8008f48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008eda:	f107 0210 	add.w	r2, r7, #16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	69b8      	ldr	r0, [r7, #24]
 8008ee4:	f000 fc24 	bl	8009730 <xQueueGenericSendFromISR>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d003      	beq.n	8008ef6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008eee:	f06f 0302 	mvn.w	r3, #2
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	e028      	b.n	8008f48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d025      	beq.n	8008f48 <osMessageQueuePut+0xb0>
 8008efc:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <osMessageQueuePut+0xbc>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	e01c      	b.n	8008f48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <osMessageQueuePut+0x82>
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d103      	bne.n	8008f22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008f1a:	f06f 0303 	mvn.w	r3, #3
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	e012      	b.n	8008f48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f22:	2300      	movs	r3, #0
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	69b8      	ldr	r0, [r7, #24]
 8008f2a:	f000 fb03 	bl	8009534 <xQueueGenericSend>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d009      	beq.n	8008f48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008f3a:	f06f 0301 	mvn.w	r3, #1
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e002      	b.n	8008f48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008f42:	f06f 0302 	mvn.w	r3, #2
 8008f46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f48:	69fb      	ldr	r3, [r7, #28]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	e000ed04 	.word	0xe000ed04

08008f58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f6e:	f3ef 8305 	mrs	r3, IPSR
 8008f72:	617b      	str	r3, [r7, #20]
  return(result);
 8008f74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d028      	beq.n	8008fcc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <osMessageQueueGet+0x34>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <osMessageQueueGet+0x34>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008f8c:	f06f 0303 	mvn.w	r3, #3
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	e037      	b.n	8009004 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f98:	f107 0310 	add.w	r3, r7, #16
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	69b8      	ldr	r0, [r7, #24]
 8008fa2:	f000 fed9 	bl	8009d58 <xQueueReceiveFromISR>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d003      	beq.n	8008fb4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008fac:	f06f 0302 	mvn.w	r3, #2
 8008fb0:	61fb      	str	r3, [r7, #28]
 8008fb2:	e027      	b.n	8009004 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d024      	beq.n	8009004 <osMessageQueueGet+0xac>
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <osMessageQueueGet+0xb8>)
 8008fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	e01b      	b.n	8009004 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <osMessageQueueGet+0x80>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008fd8:	f06f 0303 	mvn.w	r3, #3
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	e011      	b.n	8009004 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	69b8      	ldr	r0, [r7, #24]
 8008fe6:	f000 fccb 	bl	8009980 <xQueueReceive>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d009      	beq.n	8009004 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008ff6:	f06f 0301 	mvn.w	r3, #1
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	e002      	b.n	8009004 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008ffe:	f06f 0302 	mvn.w	r3, #2
 8009002:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009004:	69fb      	ldr	r3, [r7, #28]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a07      	ldr	r2, [pc, #28]	; (8009040 <vApplicationGetIdleTaskMemory+0x2c>)
 8009024:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	4a06      	ldr	r2, [pc, #24]	; (8009044 <vApplicationGetIdleTaskMemory+0x30>)
 800902a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2280      	movs	r2, #128	; 0x80
 8009030:	601a      	str	r2, [r3, #0]
}
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	200043ac 	.word	0x200043ac
 8009044:	20004408 	.word	0x20004408

08009048 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a07      	ldr	r2, [pc, #28]	; (8009074 <vApplicationGetTimerTaskMemory+0x2c>)
 8009058:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	4a06      	ldr	r2, [pc, #24]	; (8009078 <vApplicationGetTimerTaskMemory+0x30>)
 800905e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009066:	601a      	str	r2, [r3, #0]
}
 8009068:	bf00      	nop
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	20004608 	.word	0x20004608
 8009078:	20004664 	.word	0x20004664

0800907c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0208 	add.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009094:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f103 0208 	add.w	r2, r3, #8
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f103 0208 	add.w	r2, r3, #8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009134:	d103      	bne.n	800913e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	e00c      	b.n	8009158 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3308      	adds	r3, #8
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e002      	b.n	800914c <vListInsert+0x2e>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	429a      	cmp	r2, r3
 8009156:	d2f6      	bcs.n	8009146 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6892      	ldr	r2, [r2, #8]
 80091a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6852      	ldr	r2, [r2, #4]
 80091b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d103      	bne.n	80091c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	1e5a      	subs	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800920e:	f002 fc81 	bl	800bb14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	441a      	add	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	3b01      	subs	r3, #1
 8009240:	68f9      	ldr	r1, [r7, #12]
 8009242:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	441a      	add	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	22ff      	movs	r2, #255	; 0xff
 8009252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d114      	bne.n	800928e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01a      	beq.n	80092a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f001 fc37 	bl	800aae4 <xTaskRemoveFromEventList>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d012      	beq.n	80092a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <xQueueGenericReset+0xcc>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	e009      	b.n	80092a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3310      	adds	r3, #16
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fef2 	bl	800907c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff feed 	bl	800907c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092a2:	f002 fc67 	bl	800bb74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092a6:	2301      	movs	r3, #1
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	; 0x38
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <xQueueGenericCreateStatic+0x52>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <xQueueGenericCreateStatic+0x56>
 8009306:	2301      	movs	r3, #1
 8009308:	e000      	b.n	800930c <xQueueGenericCreateStatic+0x58>
 800930a:	2300      	movs	r3, #0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	623b      	str	r3, [r7, #32]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <xQueueGenericCreateStatic+0x7e>
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueGenericCreateStatic+0x82>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueGenericCreateStatic+0x84>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61fb      	str	r3, [r7, #28]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009352:	2350      	movs	r3, #80	; 0x50
 8009354:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b50      	cmp	r3, #80	; 0x50
 800935a:	d00a      	beq.n	8009372 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	61bb      	str	r3, [r7, #24]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009372:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00d      	beq.n	800939a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009386:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4613      	mov	r3, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f83f 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800939c:	4618      	mov	r0, r3
 800939e:	3730      	adds	r7, #48	; 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	613b      	str	r3, [r7, #16]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3350      	adds	r3, #80	; 0x50
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 fcbb 	bl	800bd58 <pvPortMalloc>
 80093e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d011      	beq.n	800940e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	3350      	adds	r3, #80	; 0x50
 80093f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f805 	bl	8009418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800940e:	69bb      	ldr	r3, [r7, #24]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	3720      	adds	r7, #32
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	e002      	b.n	800943a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009446:	2101      	movs	r1, #1
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f7ff fecb 	bl	80091e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800945e:	b580      	push	{r7, lr}
 8009460:	b08a      	sub	sp, #40	; 0x28
 8009462:	af02      	add	r7, sp, #8
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	61bb      	str	r3, [r7, #24]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	429a      	cmp	r2, r3
 800948c:	d90a      	bls.n	80094a4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	617b      	str	r3, [r7, #20]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80094a4:	2302      	movs	r3, #2
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff ff00 	bl	80092b4 <xQueueGenericCreateStatic>
 80094b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80094c2:	69fb      	ldr	r3, [r7, #28]
	}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	613b      	str	r3, [r7, #16]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d90a      	bls.n	8009510 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	60fb      	str	r3, [r7, #12]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009510:	2202      	movs	r2, #2
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff ff45 	bl	80093a4 <xQueueGenericCreate>
 800951a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009528:	697b      	ldr	r3, [r7, #20]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009542:	2300      	movs	r3, #0
 8009544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <xQueueGenericSend+0x32>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <xQueueGenericSend+0x40>
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <xQueueGenericSend+0x44>
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <xQueueGenericSend+0x46>
 8009578:	2300      	movs	r3, #0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <xQueueGenericSend+0x60>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d103      	bne.n	80095a2 <xQueueGenericSend+0x6e>
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <xQueueGenericSend+0x72>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueGenericSend+0x74>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095c2:	f001 fc4d 	bl	800ae60 <xTaskGetSchedulerState>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xQueueGenericSend+0x9e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueGenericSend+0xa2>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueGenericSend+0xa4>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61fb      	str	r3, [r7, #28]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095f2:	f002 fa8f 	bl	800bb14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <xQueueGenericSend+0xd4>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d129      	bne.n	800965c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800960e:	f000 fc5e 	bl	8009ece <prvCopyDataToQueue>
 8009612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d010      	beq.n	800963e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f001 fa5f 	bl	800aae4 <xTaskRemoveFromEventList>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d013      	beq.n	8009654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800962c:	4b3f      	ldr	r3, [pc, #252]	; (800972c <xQueueGenericSend+0x1f8>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	e00a      	b.n	8009654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d007      	beq.n	8009654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009644:	4b39      	ldr	r3, [pc, #228]	; (800972c <xQueueGenericSend+0x1f8>)
 8009646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009654:	f002 fa8e 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	e063      	b.n	8009724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009662:	f002 fa87 	bl	800bb74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009666:	2300      	movs	r3, #0
 8009668:	e05c      	b.n	8009724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009670:	f107 0314 	add.w	r3, r7, #20
 8009674:	4618      	mov	r0, r3
 8009676:	f001 fa99 	bl	800abac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800967e:	f002 fa79 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009682:	f000 fff9 	bl	800a678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009686:	f002 fa45 	bl	800bb14 <vPortEnterCritical>
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009690:	b25b      	sxtb	r3, r3
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009696:	d103      	bne.n	80096a0 <xQueueGenericSend+0x16c>
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ac:	d103      	bne.n	80096b6 <xQueueGenericSend+0x182>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096b6:	f002 fa5d 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096ba:	1d3a      	adds	r2, r7, #4
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 fa88 	bl	800abd8 <xTaskCheckForTimeOut>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d124      	bne.n	8009718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d0:	f000 fcf5 	bl	800a0be <prvIsQueueFull>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d018      	beq.n	800970c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	3310      	adds	r3, #16
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 f9ae 	bl	800aa44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ea:	f000 fc80 	bl	8009fee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ee:	f000 ffd1 	bl	800a694 <xTaskResumeAll>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f47f af7c 	bne.w	80095f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <xQueueGenericSend+0x1f8>)
 80096fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	e772      	b.n	80095f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800970c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800970e:	f000 fc6e 	bl	8009fee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009712:	f000 ffbf 	bl	800a694 <xTaskResumeAll>
 8009716:	e76c      	b.n	80095f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800971a:	f000 fc68 	bl	8009fee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800971e:	f000 ffb9 	bl	800a694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009724:	4618      	mov	r0, r3
 8009726:	3738      	adds	r7, #56	; 0x38
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b090      	sub	sp, #64	; 0x40
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10a      	bne.n	800975e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <xQueueGenericSendFromISR+0x3c>
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <xQueueGenericSendFromISR+0x40>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <xQueueGenericSendFromISR+0x42>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d103      	bne.n	800979a <xQueueGenericSendFromISR+0x6a>
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <xQueueGenericSendFromISR+0x6e>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <xQueueGenericSendFromISR+0x70>
 800979e:	2300      	movs	r3, #0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	623b      	str	r3, [r7, #32]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ba:	f002 fa8d 	bl	800bcd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097be:	f3ef 8211 	mrs	r2, BASEPRI
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61fa      	str	r2, [r7, #28]
 80097d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <xQueueGenericSendFromISR+0xbc>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d12f      	bne.n	800984c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009802:	f000 fb64 	bl	8009ece <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800980e:	d112      	bne.n	8009836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d016      	beq.n	8009846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	4618      	mov	r0, r3
 800981e:	f001 f961 	bl	800aae4 <xTaskRemoveFromEventList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00e      	beq.n	8009846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00b      	beq.n	8009846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e007      	b.n	8009846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800983a:	3301      	adds	r3, #1
 800983c:	b2db      	uxtb	r3, r3
 800983e:	b25a      	sxtb	r2, r3
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009846:	2301      	movs	r3, #1
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800984a:	e001      	b.n	8009850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800985a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800985e:	4618      	mov	r0, r3
 8009860:	3740      	adds	r7, #64	; 0x40
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08e      	sub	sp, #56	; 0x38
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	623b      	str	r3, [r7, #32]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	61fb      	str	r3, [r7, #28]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <xQueueGiveFromISR+0x58>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <xQueueGiveFromISR+0x5c>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <xQueueGiveFromISR+0x5e>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <xQueueGiveFromISR+0x78>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	61bb      	str	r3, [r7, #24]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098de:	f002 f9fb 	bl	800bcd8 <vPortValidateInterruptPriority>
	__asm volatile
 80098e2:	f3ef 8211 	mrs	r2, BASEPRI
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	617a      	str	r2, [r7, #20]
 80098f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80098fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800990a:	429a      	cmp	r2, r3
 800990c:	d22b      	bcs.n	8009966 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009928:	d112      	bne.n	8009950 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d016      	beq.n	8009960 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	3324      	adds	r3, #36	; 0x24
 8009936:	4618      	mov	r0, r3
 8009938:	f001 f8d4 	bl	800aae4 <xTaskRemoveFromEventList>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e007      	b.n	8009960 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009954:	3301      	adds	r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	b25a      	sxtb	r2, r3
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009960:	2301      	movs	r3, #1
 8009962:	637b      	str	r3, [r7, #52]	; 0x34
 8009964:	e001      	b.n	800996a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009966:	2300      	movs	r3, #0
 8009968:	637b      	str	r3, [r7, #52]	; 0x34
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f383 8811 	msr	BASEPRI, r3
}
 8009974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009978:	4618      	mov	r0, r3
 800997a:	3738      	adds	r7, #56	; 0x38
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08c      	sub	sp, #48	; 0x30
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <xQueueReceive+0x30>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	623b      	str	r3, [r7, #32]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <xQueueReceive+0x3e>
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <xQueueReceive+0x42>
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <xQueueReceive+0x44>
 80099c2:	2300      	movs	r3, #0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueReceive+0x5e>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	61fb      	str	r3, [r7, #28]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099de:	f001 fa3f 	bl	800ae60 <xTaskGetSchedulerState>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <xQueueReceive+0x6e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <xQueueReceive+0x72>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <xQueueReceive+0x74>
 80099f2:	2300      	movs	r3, #0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueReceive+0x8e>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	61bb      	str	r3, [r7, #24]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a0e:	f002 f881 	bl	800bb14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01f      	beq.n	8009a5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a22:	f000 fabe 	bl	8009fa2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	1e5a      	subs	r2, r3, #1
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00f      	beq.n	8009a56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	3310      	adds	r3, #16
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 f852 	bl	800aae4 <xTaskRemoveFromEventList>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a46:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <xQueueReceive+0x1bc>)
 8009a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a56:	f002 f88d 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e069      	b.n	8009b32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d103      	bne.n	8009a6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a64:	f002 f886 	bl	800bb74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e062      	b.n	8009b32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a72:	f107 0310 	add.w	r3, r7, #16
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 f898 	bl	800abac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a80:	f002 f878 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a84:	f000 fdf8 	bl	800a678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a88:	f002 f844 	bl	800bb14 <vPortEnterCritical>
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a92:	b25b      	sxtb	r3, r3
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a98:	d103      	bne.n	8009aa2 <xQueueReceive+0x122>
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa8:	b25b      	sxtb	r3, r3
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aae:	d103      	bne.n	8009ab8 <xQueueReceive+0x138>
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab8:	f002 f85c 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009abc:	1d3a      	adds	r2, r7, #4
 8009abe:	f107 0310 	add.w	r3, r7, #16
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 f887 	bl	800abd8 <xTaskCheckForTimeOut>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d123      	bne.n	8009b18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad2:	f000 fade 	bl	800a092 <prvIsQueueEmpty>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d017      	beq.n	8009b0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	3324      	adds	r3, #36	; 0x24
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 ffad 	bl	800aa44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aec:	f000 fa7f 	bl	8009fee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009af0:	f000 fdd0 	bl	800a694 <xTaskResumeAll>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d189      	bne.n	8009a0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009afa:	4b10      	ldr	r3, [pc, #64]	; (8009b3c <xQueueReceive+0x1bc>)
 8009afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	e780      	b.n	8009a0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0e:	f000 fa6e 	bl	8009fee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b12:	f000 fdbf 	bl	800a694 <xTaskResumeAll>
 8009b16:	e77a      	b.n	8009a0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1a:	f000 fa68 	bl	8009fee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b1e:	f000 fdb9 	bl	800a694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b24:	f000 fab5 	bl	800a092 <prvIsQueueEmpty>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f43f af6f 	beq.w	8009a0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3730      	adds	r7, #48	; 0x30
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed04 	.word	0xe000ed04

08009b40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	; 0x38
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	623b      	str	r3, [r7, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	61fb      	str	r3, [r7, #28]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b90:	f001 f966 	bl	800ae60 <xTaskGetSchedulerState>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <xQueueSemaphoreTake+0x60>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <xQueueSemaphoreTake+0x64>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <xQueueSemaphoreTake+0x66>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	61bb      	str	r3, [r7, #24]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bc0:	f001 ffa8 	bl	800bb14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d024      	beq.n	8009c1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	1e5a      	subs	r2, r3, #1
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009be0:	f001 fab4 	bl	800b14c <pvTaskIncrementMutexHeldCount>
 8009be4:	4602      	mov	r2, r0
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00f      	beq.n	8009c12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	3310      	adds	r3, #16
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 ff74 	bl	800aae4 <xTaskRemoveFromEventList>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d007      	beq.n	8009c12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c02:	4b54      	ldr	r3, [pc, #336]	; (8009d54 <xQueueSemaphoreTake+0x214>)
 8009c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c12:	f001 ffaf 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e097      	b.n	8009d4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d111      	bne.n	8009c44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	617b      	str	r3, [r7, #20]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c3c:	f001 ff9a 	bl	800bb74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e082      	b.n	8009d4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c4a:	f107 030c 	add.w	r3, r7, #12
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 ffac 	bl	800abac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c58:	f001 ff8c 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c5c:	f000 fd0c 	bl	800a678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c60:	f001 ff58 	bl	800bb14 <vPortEnterCritical>
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c6a:	b25b      	sxtb	r3, r3
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c70:	d103      	bne.n	8009c7a <xQueueSemaphoreTake+0x13a>
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c80:	b25b      	sxtb	r3, r3
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c86:	d103      	bne.n	8009c90 <xQueueSemaphoreTake+0x150>
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c90:	f001 ff70 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c94:	463a      	mov	r2, r7
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 ff9b 	bl	800abd8 <xTaskCheckForTimeOut>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d132      	bne.n	8009d0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009caa:	f000 f9f2 	bl	800a092 <prvIsQueueEmpty>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d026      	beq.n	8009d02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d109      	bne.n	8009cd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009cbc:	f001 ff2a 	bl	800bb14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 f8e9 	bl	800ae9c <xTaskPriorityInherit>
 8009cca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ccc:	f001 ff52 	bl	800bb74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	3324      	adds	r3, #36	; 0x24
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 feb3 	bl	800aa44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ce0:	f000 f985 	bl	8009fee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ce4:	f000 fcd6 	bl	800a694 <xTaskResumeAll>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f47f af68 	bne.w	8009bc0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009cf0:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <xQueueSemaphoreTake+0x214>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	e75e      	b.n	8009bc0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d04:	f000 f973 	bl	8009fee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d08:	f000 fcc4 	bl	800a694 <xTaskResumeAll>
 8009d0c:	e758      	b.n	8009bc0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d10:	f000 f96d 	bl	8009fee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d14:	f000 fcbe 	bl	800a694 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d1a:	f000 f9ba 	bl	800a092 <prvIsQueueEmpty>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f43f af4d 	beq.w	8009bc0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00d      	beq.n	8009d48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d2c:	f001 fef2 	bl	800bb14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d32:	f000 f8b4 	bl	8009e9e <prvGetDisinheritPriorityAfterTimeout>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 f982 	bl	800b048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d44:	f001 ff16 	bl	800bb74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3738      	adds	r7, #56	; 0x38
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	e000ed04 	.word	0xe000ed04

08009d58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	623b      	str	r3, [r7, #32]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <xQueueReceiveFromISR+0x3a>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <xQueueReceiveFromISR+0x3e>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <xQueueReceiveFromISR+0x40>
 8009d96:	2300      	movs	r3, #0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	61fb      	str	r3, [r7, #28]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009db2:	f001 ff91 	bl	800bcd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009db6:	f3ef 8211 	mrs	r2, BASEPRI
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	61ba      	str	r2, [r7, #24]
 8009dcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d02f      	beq.n	8009e3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dec:	f000 f8d9 	bl	8009fa2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	1e5a      	subs	r2, r3, #1
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e00:	d112      	bne.n	8009e28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d016      	beq.n	8009e38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	3310      	adds	r3, #16
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fe68 	bl	800aae4 <xTaskRemoveFromEventList>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00e      	beq.n	8009e38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e007      	b.n	8009e38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	b25a      	sxtb	r2, r3
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e3c:	e001      	b.n	8009e42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f383 8811 	msr	BASEPRI, r3
}
 8009e4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3738      	adds	r7, #56	; 0x38
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <vQueueDelete+0x28>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	60bb      	str	r3, [r7, #8]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 f95f 	bl	800a144 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f002 f82d 	bl	800bef0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009e96:	bf00      	nop
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e001      	b.n	8009ec0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
	}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10d      	bne.n	8009f08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d14d      	bne.n	8009f90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 f837 	bl	800af6c <xTaskPriorityDisinherit>
 8009efe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	609a      	str	r2, [r3, #8]
 8009f06:	e043      	b.n	8009f90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d119      	bne.n	8009f42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6858      	ldr	r0, [r3, #4]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	461a      	mov	r2, r3
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	f002 f931 	bl	800c180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d32b      	bcc.n	8009f90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	605a      	str	r2, [r3, #4]
 8009f40:	e026      	b.n	8009f90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	68d8      	ldr	r0, [r3, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	f002 f917 	bl	800c180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	425b      	negs	r3, r3
 8009f5c:	441a      	add	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d207      	bcs.n	8009f7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	425b      	negs	r3, r3
 8009f78:	441a      	add	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d105      	bne.n	8009f90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f98:	697b      	ldr	r3, [r7, #20]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d018      	beq.n	8009fe6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	441a      	add	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d303      	bcc.n	8009fd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68d9      	ldr	r1, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	461a      	mov	r2, r3
 8009fe0:	6838      	ldr	r0, [r7, #0]
 8009fe2:	f002 f8cd 	bl	800c180 <memcpy>
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ff6:	f001 fd8d 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a000:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a002:	e011      	b.n	800a028 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3324      	adds	r3, #36	; 0x24
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fd67 	bl	800aae4 <xTaskRemoveFromEventList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a01c:	f000 fe3e 	bl	800ac9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	3b01      	subs	r3, #1
 800a024:	b2db      	uxtb	r3, r3
 800a026:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dce9      	bgt.n	800a004 <prvUnlockQueue+0x16>
 800a030:	e000      	b.n	800a034 <prvUnlockQueue+0x46>
					break;
 800a032:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	22ff      	movs	r2, #255	; 0xff
 800a038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a03c:	f001 fd9a 	bl	800bb74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a040:	f001 fd68 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a04a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a04c:	e011      	b.n	800a072 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d012      	beq.n	800a07c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3310      	adds	r3, #16
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 fd42 	bl	800aae4 <xTaskRemoveFromEventList>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a066:	f000 fe19 	bl	800ac9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a076:	2b00      	cmp	r3, #0
 800a078:	dce9      	bgt.n	800a04e <prvUnlockQueue+0x60>
 800a07a:	e000      	b.n	800a07e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a07c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	22ff      	movs	r2, #255	; 0xff
 800a082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a086:	f001 fd75 	bl	800bb74 <vPortExitCritical>
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a09a:	f001 fd3b 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d102      	bne.n	800a0ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	e001      	b.n	800a0b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0b0:	f001 fd60 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0c6:	f001 fd25 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d102      	bne.n	800a0dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e001      	b.n	800a0e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0e0:	f001 fd48 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e014      	b.n	800a12a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <vQueueAddToRegistry+0x50>)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10b      	bne.n	800a124 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a10c:	490c      	ldr	r1, [pc, #48]	; (800a140 <vQueueAddToRegistry+0x50>)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a116:	4a0a      	ldr	r2, [pc, #40]	; (800a140 <vQueueAddToRegistry+0x50>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a122:	e006      	b.n	800a132 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b07      	cmp	r3, #7
 800a12e:	d9e7      	bls.n	800a100 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	2000ad7c 	.word	0x2000ad7c

0800a144 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	e016      	b.n	800a180 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a152:	4a10      	ldr	r2, [pc, #64]	; (800a194 <vQueueUnregisterQueue+0x50>)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	4413      	add	r3, r2
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d10b      	bne.n	800a17a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a162:	4a0c      	ldr	r2, [pc, #48]	; (800a194 <vQueueUnregisterQueue+0x50>)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2100      	movs	r1, #0
 800a168:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a16c:	4a09      	ldr	r2, [pc, #36]	; (800a194 <vQueueUnregisterQueue+0x50>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	4413      	add	r3, r2
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]
				break;
 800a178:	e006      	b.n	800a188 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b07      	cmp	r3, #7
 800a184:	d9e5      	bls.n	800a152 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	2000ad7c 	.word	0x2000ad7c

0800a198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1a8:	f001 fcb4 	bl	800bb14 <vPortEnterCritical>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b8:	d103      	bne.n	800a1c2 <vQueueWaitForMessageRestricted+0x2a>
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ce:	d103      	bne.n	800a1d8 <vQueueWaitForMessageRestricted+0x40>
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d8:	f001 fccc 	bl	800bb74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d106      	bne.n	800a1f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3324      	adds	r3, #36	; 0x24
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fc4d 	bl	800aa8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f7ff fefb 	bl	8009fee <prvUnlockQueue>
	}
 800a1f8:	bf00      	nop
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08e      	sub	sp, #56	; 0x38
 800a204:	af04      	add	r7, sp, #16
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	623b      	str	r3, [r7, #32]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xTaskCreateStatic+0x46>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	61fb      	str	r3, [r7, #28]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a246:	235c      	movs	r3, #92	; 0x5c
 800a248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b5c      	cmp	r3, #92	; 0x5c
 800a24e:	d00a      	beq.n	800a266 <xTaskCreateStatic+0x66>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	61bb      	str	r3, [r7, #24]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01e      	beq.n	800a2ac <xTaskCreateStatic+0xac>
 800a26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01b      	beq.n	800a2ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	2202      	movs	r2, #2
 800a282:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a286:	2300      	movs	r3, #0
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	f107 0314 	add.w	r3, r7, #20
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f850 	bl	800a344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2a6:	f000 f8dd 	bl	800a464 <prvAddNewTaskToReadyList>
 800a2aa:	e001      	b.n	800a2b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2b0:	697b      	ldr	r3, [r7, #20]
	}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3728      	adds	r7, #40	; 0x28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b08c      	sub	sp, #48	; 0x30
 800a2be:	af04      	add	r7, sp, #16
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	603b      	str	r3, [r7, #0]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 fd42 	bl	800bd58 <pvPortMalloc>
 800a2d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00e      	beq.n	800a2fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2dc:	205c      	movs	r0, #92	; 0x5c
 800a2de:	f001 fd3b 	bl	800bd58 <pvPortMalloc>
 800a2e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a2f0:	e005      	b.n	800a2fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2f2:	6978      	ldr	r0, [r7, #20]
 800a2f4:	f001 fdfc 	bl	800bef0 <vPortFree>
 800a2f8:	e001      	b.n	800a2fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d017      	beq.n	800a334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a30c:	88fa      	ldrh	r2, [r7, #6]
 800a30e:	2300      	movs	r3, #0
 800a310:	9303      	str	r3, [sp, #12]
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	9302      	str	r3, [sp, #8]
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 f80e 	bl	800a344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a328:	69f8      	ldr	r0, [r7, #28]
 800a32a:	f000 f89b 	bl	800a464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a32e:	2301      	movs	r3, #1
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	e002      	b.n	800a33a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a33a:	69bb      	ldr	r3, [r7, #24]
	}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	461a      	mov	r2, r3
 800a35c:	21a5      	movs	r1, #165	; 0xa5
 800a35e:	f001 ff1d 	bl	800c19c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	3b01      	subs	r3, #1
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	f023 0307 	bic.w	r3, r3, #7
 800a37a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	617b      	str	r3, [r7, #20]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01f      	beq.n	800a3e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	e012      	b.n	800a3ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	7819      	ldrb	r1, [r3, #0]
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3334      	adds	r3, #52	; 0x34
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d006      	beq.n	800a3d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b0f      	cmp	r3, #15
 800a3d2:	d9e9      	bls.n	800a3a8 <prvInitialiseNewTask+0x64>
 800a3d4:	e000      	b.n	800a3d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a3d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3e0:	e003      	b.n	800a3ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	2b37      	cmp	r3, #55	; 0x37
 800a3ee:	d901      	bls.n	800a3f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3f0:	2337      	movs	r3, #55	; 0x37
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	2200      	movs	r2, #0
 800a404:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	3304      	adds	r3, #4
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fe56 	bl	80090bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	3318      	adds	r3, #24
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe fe51 	bl	80090bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	2200      	movs	r2, #0
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	68f9      	ldr	r1, [r7, #12]
 800a442:	69b8      	ldr	r0, [r7, #24]
 800a444:	f001 fa38 	bl	800b8b8 <pxPortInitialiseStack>
 800a448:	4602      	mov	r2, r0
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a45a:	bf00      	nop
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a46c:	f001 fb52 	bl	800bb14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a470:	4b2d      	ldr	r3, [pc, #180]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	4a2c      	ldr	r2, [pc, #176]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a47a:	4b2c      	ldr	r3, [pc, #176]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a488:	4b27      	ldr	r3, [pc, #156]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d110      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a490:	f000 fc28 	bl	800ace4 <prvInitialiseTaskLists>
 800a494:	e00d      	b.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a496:	4b26      	ldr	r3, [pc, #152]	; (800a530 <prvAddNewTaskToReadyList+0xcc>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a49e:	4b23      	ldr	r3, [pc, #140]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d802      	bhi.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4ac:	4a1f      	ldr	r2, [pc, #124]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4b2:	4b20      	ldr	r3, [pc, #128]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4a1e      	ldr	r2, [pc, #120]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4bc:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c8:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <prvAddNewTaskToReadyList+0xd4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d903      	bls.n	800a4d8 <prvAddNewTaskToReadyList+0x74>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	4a18      	ldr	r2, [pc, #96]	; (800a538 <prvAddNewTaskToReadyList+0xd4>)
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4a15      	ldr	r2, [pc, #84]	; (800a53c <prvAddNewTaskToReadyList+0xd8>)
 800a4e6:	441a      	add	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe fdf1 	bl	80090d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4f4:	f001 fb3e 	bl	800bb74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <prvAddNewTaskToReadyList+0xcc>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00e      	beq.n	800a51e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d207      	bcs.n	800a51e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a50e:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <prvAddNewTaskToReadyList+0xdc>)
 800a510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20004f38 	.word	0x20004f38
 800a52c:	20004a64 	.word	0x20004a64
 800a530:	20004f44 	.word	0x20004f44
 800a534:	20004f54 	.word	0x20004f54
 800a538:	20004f40 	.word	0x20004f40
 800a53c:	20004a68 	.word	0x20004a68
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d017      	beq.n	800a586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <vTaskDelay+0x60>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <vTaskDelay+0x30>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60bb      	str	r3, [r7, #8]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a574:	f000 f880 	bl	800a678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a578:	2100      	movs	r1, #0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fdfa 	bl	800b174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a580:	f000 f888 	bl	800a694 <xTaskResumeAll>
 800a584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d107      	bne.n	800a59c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <vTaskDelay+0x64>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20004f60 	.word	0x20004f60
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08a      	sub	sp, #40	; 0x28
 800a5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5ba:	463a      	mov	r2, r7
 800a5bc:	1d39      	adds	r1, r7, #4
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fd26 	bl	8009014 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	9202      	str	r2, [sp, #8]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	460a      	mov	r2, r1
 800a5da:	4921      	ldr	r1, [pc, #132]	; (800a660 <vTaskStartScheduler+0xb4>)
 800a5dc:	4821      	ldr	r0, [pc, #132]	; (800a664 <vTaskStartScheduler+0xb8>)
 800a5de:	f7ff fe0f 	bl	800a200 <xTaskCreateStatic>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4a20      	ldr	r2, [pc, #128]	; (800a668 <vTaskStartScheduler+0xbc>)
 800a5e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5e8:	4b1f      	ldr	r3, [pc, #124]	; (800a668 <vTaskStartScheduler+0xbc>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e001      	b.n	800a5fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d102      	bne.n	800a606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a600:	f000 fe0c 	bl	800b21c <xTimerCreateTimerTask>
 800a604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d116      	bne.n	800a63a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	613b      	str	r3, [r7, #16]
}
 800a61e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <vTaskStartScheduler+0xc0>)
 800a622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <vTaskStartScheduler+0xc4>)
 800a62a:	2201      	movs	r2, #1
 800a62c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a62e:	4b11      	ldr	r3, [pc, #68]	; (800a674 <vTaskStartScheduler+0xc8>)
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a634:	f001 f9cc 	bl	800b9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a638:	e00e      	b.n	800a658 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a640:	d10a      	bne.n	800a658 <vTaskStartScheduler+0xac>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60fb      	str	r3, [r7, #12]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <vTaskStartScheduler+0xaa>
}
 800a658:	bf00      	nop
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	0800cb58 	.word	0x0800cb58
 800a664:	0800acb5 	.word	0x0800acb5
 800a668:	20004f5c 	.word	0x20004f5c
 800a66c:	20004f58 	.word	0x20004f58
 800a670:	20004f44 	.word	0x20004f44
 800a674:	20004f3c 	.word	0x20004f3c

0800a678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <vTaskSuspendAll+0x18>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	4a03      	ldr	r2, [pc, #12]	; (800a690 <vTaskSuspendAll+0x18>)
 800a684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a686:	bf00      	nop
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20004f60 	.word	0x20004f60

0800a694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6a2:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <xTaskResumeAll+0x118>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	603b      	str	r3, [r7, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6c0:	f001 fa28 	bl	800bb14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6c4:	4b39      	ldr	r3, [pc, #228]	; (800a7ac <xTaskResumeAll+0x118>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	4a38      	ldr	r2, [pc, #224]	; (800a7ac <xTaskResumeAll+0x118>)
 800a6cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ce:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <xTaskResumeAll+0x118>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d162      	bne.n	800a79c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6d6:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <xTaskResumeAll+0x11c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d05e      	beq.n	800a79c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6de:	e02f      	b.n	800a740 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e0:	4b34      	ldr	r3, [pc, #208]	; (800a7b4 <xTaskResumeAll+0x120>)
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3318      	adds	r3, #24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe fd4f 	bl	8009190 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fd4a 	bl	8009190 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4b2d      	ldr	r3, [pc, #180]	; (800a7b8 <xTaskResumeAll+0x124>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d903      	bls.n	800a710 <xTaskResumeAll+0x7c>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a2a      	ldr	r2, [pc, #168]	; (800a7b8 <xTaskResumeAll+0x124>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a27      	ldr	r2, [pc, #156]	; (800a7bc <xTaskResumeAll+0x128>)
 800a71e:	441a      	add	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fe fcd5 	bl	80090d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	4b23      	ldr	r3, [pc, #140]	; (800a7c0 <xTaskResumeAll+0x12c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a736:	429a      	cmp	r2, r3
 800a738:	d302      	bcc.n	800a740 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a73a:	4b22      	ldr	r3, [pc, #136]	; (800a7c4 <xTaskResumeAll+0x130>)
 800a73c:	2201      	movs	r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a740:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <xTaskResumeAll+0x120>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1cb      	bne.n	800a6e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a74e:	f000 fb67 	bl	800ae20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <xTaskResumeAll+0x134>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d010      	beq.n	800a780 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a75e:	f000 f859 	bl	800a814 <xTaskIncrementTick>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a768:	4b16      	ldr	r3, [pc, #88]	; (800a7c4 <xTaskResumeAll+0x130>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3b01      	subs	r3, #1
 800a772:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1f1      	bne.n	800a75e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a77a:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <xTaskResumeAll+0x134>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a780:	4b10      	ldr	r3, [pc, #64]	; (800a7c4 <xTaskResumeAll+0x130>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d009      	beq.n	800a79c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <xTaskResumeAll+0x138>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a79c:	f001 f9ea 	bl	800bb74 <vPortExitCritical>

	return xAlreadyYielded;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20004f60 	.word	0x20004f60
 800a7b0:	20004f38 	.word	0x20004f38
 800a7b4:	20004ef8 	.word	0x20004ef8
 800a7b8:	20004f40 	.word	0x20004f40
 800a7bc:	20004a68 	.word	0x20004a68
 800a7c0:	20004a64 	.word	0x20004a64
 800a7c4:	20004f4c 	.word	0x20004f4c
 800a7c8:	20004f48 	.word	0x20004f48
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <xTaskGetTickCount+0x1c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7dc:	687b      	ldr	r3, [r7, #4]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20004f3c 	.word	0x20004f3c

0800a7f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7f6:	f001 fa6f 	bl	800bcd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a7fe:	4b04      	ldr	r3, [pc, #16]	; (800a810 <xTaskGetTickCountFromISR+0x20>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a804:	683b      	ldr	r3, [r7, #0]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20004f3c 	.word	0x20004f3c

0800a814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a81e:	4b4f      	ldr	r3, [pc, #316]	; (800a95c <xTaskIncrementTick+0x148>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 808f 	bne.w	800a946 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a828:	4b4d      	ldr	r3, [pc, #308]	; (800a960 <xTaskIncrementTick+0x14c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3301      	adds	r3, #1
 800a82e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a830:	4a4b      	ldr	r2, [pc, #300]	; (800a960 <xTaskIncrementTick+0x14c>)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d120      	bne.n	800a87e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a83c:	4b49      	ldr	r3, [pc, #292]	; (800a964 <xTaskIncrementTick+0x150>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <xTaskIncrementTick+0x48>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	603b      	str	r3, [r7, #0]
}
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <xTaskIncrementTick+0x46>
 800a85c:	4b41      	ldr	r3, [pc, #260]	; (800a964 <xTaskIncrementTick+0x150>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	4b41      	ldr	r3, [pc, #260]	; (800a968 <xTaskIncrementTick+0x154>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a3f      	ldr	r2, [pc, #252]	; (800a964 <xTaskIncrementTick+0x150>)
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	4a3f      	ldr	r2, [pc, #252]	; (800a968 <xTaskIncrementTick+0x154>)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	4b3e      	ldr	r3, [pc, #248]	; (800a96c <xTaskIncrementTick+0x158>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	4a3d      	ldr	r2, [pc, #244]	; (800a96c <xTaskIncrementTick+0x158>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	f000 fad1 	bl	800ae20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a87e:	4b3c      	ldr	r3, [pc, #240]	; (800a970 <xTaskIncrementTick+0x15c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d349      	bcc.n	800a91c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a888:	4b36      	ldr	r3, [pc, #216]	; (800a964 <xTaskIncrementTick+0x150>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a892:	4b37      	ldr	r3, [pc, #220]	; (800a970 <xTaskIncrementTick+0x15c>)
 800a894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a898:	601a      	str	r2, [r3, #0]
					break;
 800a89a:	e03f      	b.n	800a91c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89c:	4b31      	ldr	r3, [pc, #196]	; (800a964 <xTaskIncrementTick+0x150>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d203      	bcs.n	800a8bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8b4:	4a2e      	ldr	r2, [pc, #184]	; (800a970 <xTaskIncrementTick+0x15c>)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8ba:	e02f      	b.n	800a91c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fc65 	bl	8009190 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	3318      	adds	r3, #24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fc5c 	bl	8009190 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	4b25      	ldr	r3, [pc, #148]	; (800a974 <xTaskIncrementTick+0x160>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d903      	bls.n	800a8ec <xTaskIncrementTick+0xd8>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	4a22      	ldr	r2, [pc, #136]	; (800a974 <xTaskIncrementTick+0x160>)
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4a1f      	ldr	r2, [pc, #124]	; (800a978 <xTaskIncrementTick+0x164>)
 800a8fa:	441a      	add	r2, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fe fbe7 	bl	80090d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	4b1b      	ldr	r3, [pc, #108]	; (800a97c <xTaskIncrementTick+0x168>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	429a      	cmp	r2, r3
 800a914:	d3b8      	bcc.n	800a888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a91a:	e7b5      	b.n	800a888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a91c:	4b17      	ldr	r3, [pc, #92]	; (800a97c <xTaskIncrementTick+0x168>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a922:	4915      	ldr	r1, [pc, #84]	; (800a978 <xTaskIncrementTick+0x164>)
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d901      	bls.n	800a938 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a938:	4b11      	ldr	r3, [pc, #68]	; (800a980 <xTaskIncrementTick+0x16c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d007      	beq.n	800a950 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e004      	b.n	800a950 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a946:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <xTaskIncrementTick+0x170>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	4a0d      	ldr	r2, [pc, #52]	; (800a984 <xTaskIncrementTick+0x170>)
 800a94e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a950:	697b      	ldr	r3, [r7, #20]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20004f60 	.word	0x20004f60
 800a960:	20004f3c 	.word	0x20004f3c
 800a964:	20004ef0 	.word	0x20004ef0
 800a968:	20004ef4 	.word	0x20004ef4
 800a96c:	20004f50 	.word	0x20004f50
 800a970:	20004f58 	.word	0x20004f58
 800a974:	20004f40 	.word	0x20004f40
 800a978:	20004a68 	.word	0x20004a68
 800a97c:	20004a64 	.word	0x20004a64
 800a980:	20004f4c 	.word	0x20004f4c
 800a984:	20004f48 	.word	0x20004f48

0800a988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a98e:	4b28      	ldr	r3, [pc, #160]	; (800aa30 <vTaskSwitchContext+0xa8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a996:	4b27      	ldr	r3, [pc, #156]	; (800aa34 <vTaskSwitchContext+0xac>)
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a99c:	e041      	b.n	800aa22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a99e:	4b25      	ldr	r3, [pc, #148]	; (800aa34 <vTaskSwitchContext+0xac>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a4:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <vTaskSwitchContext+0xb0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	e010      	b.n	800a9ce <vTaskSwitchContext+0x46>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	607b      	str	r3, [r7, #4]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <vTaskSwitchContext+0x3e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	491b      	ldr	r1, [pc, #108]	; (800aa3c <vTaskSwitchContext+0xb4>)
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	440b      	add	r3, r1
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0e4      	beq.n	800a9ac <vTaskSwitchContext+0x24>
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <vTaskSwitchContext+0xb4>)
 800a9ee:	4413      	add	r3, r2
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	605a      	str	r2, [r3, #4]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	3308      	adds	r3, #8
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d104      	bne.n	800aa12 <vTaskSwitchContext+0x8a>
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	605a      	str	r2, [r3, #4]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <vTaskSwitchContext+0xb8>)
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	4a06      	ldr	r2, [pc, #24]	; (800aa38 <vTaskSwitchContext+0xb0>)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6013      	str	r3, [r2, #0]
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20004f60 	.word	0x20004f60
 800aa34:	20004f4c 	.word	0x20004f4c
 800aa38:	20004f40 	.word	0x20004f40
 800aa3c:	20004a68 	.word	0x20004a68
 800aa40:	20004a64 	.word	0x20004a64

0800aa44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	60fb      	str	r3, [r7, #12]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa6a:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <vTaskPlaceOnEventList+0x44>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3318      	adds	r3, #24
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7fe fb53 	bl	800911e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa78:	2101      	movs	r1, #1
 800aa7a:	6838      	ldr	r0, [r7, #0]
 800aa7c:	f000 fb7a 	bl	800b174 <prvAddCurrentTaskToDelayedList>
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	20004a64 	.word	0x20004a64

0800aa8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	617b      	str	r3, [r7, #20]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3318      	adds	r3, #24
 800aaba:	4619      	mov	r1, r3
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7fe fb0a 	bl	80090d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aacc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	68b8      	ldr	r0, [r7, #8]
 800aad2:	f000 fb4f 	bl	800b174 <prvAddCurrentTaskToDelayedList>
	}
 800aad6:	bf00      	nop
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20004a64 	.word	0x20004a64

0800aae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	60fb      	str	r3, [r7, #12]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3318      	adds	r3, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fb3b 	bl	8009190 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab1a:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <xTaskRemoveFromEventList+0xb0>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d11d      	bne.n	800ab5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fb32 	bl	8009190 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab30:	4b19      	ldr	r3, [pc, #100]	; (800ab98 <xTaskRemoveFromEventList+0xb4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d903      	bls.n	800ab40 <xTaskRemoveFromEventList+0x5c>
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	4a16      	ldr	r2, [pc, #88]	; (800ab98 <xTaskRemoveFromEventList+0xb4>)
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4a13      	ldr	r2, [pc, #76]	; (800ab9c <xTaskRemoveFromEventList+0xb8>)
 800ab4e:	441a      	add	r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fe fabd 	bl	80090d6 <vListInsertEnd>
 800ab5c:	e005      	b.n	800ab6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3318      	adds	r3, #24
 800ab62:	4619      	mov	r1, r3
 800ab64:	480e      	ldr	r0, [pc, #56]	; (800aba0 <xTaskRemoveFromEventList+0xbc>)
 800ab66:	f7fe fab6 	bl	80090d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <xTaskRemoveFromEventList+0xc0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d905      	bls.n	800ab84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <xTaskRemoveFromEventList+0xc4>)
 800ab7e:	2201      	movs	r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e001      	b.n	800ab88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab88:	697b      	ldr	r3, [r7, #20]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20004f60 	.word	0x20004f60
 800ab98:	20004f40 	.word	0x20004f40
 800ab9c:	20004a68 	.word	0x20004a68
 800aba0:	20004ef8 	.word	0x20004ef8
 800aba4:	20004a64 	.word	0x20004a64
 800aba8:	20004f4c 	.word	0x20004f4c

0800abac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <vTaskInternalSetTimeOutState+0x24>)
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abbc:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <vTaskInternalSetTimeOutState+0x28>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	605a      	str	r2, [r3, #4]
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20004f50 	.word	0x20004f50
 800abd4:	20004f3c 	.word	0x20004f3c

0800abd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	613b      	str	r3, [r7, #16]
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	60fb      	str	r3, [r7, #12]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac1a:	f000 ff7b 	bl	800bb14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac1e:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <xTaskCheckForTimeOut+0xbc>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac36:	d102      	bne.n	800ac3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	e023      	b.n	800ac86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <xTaskCheckForTimeOut+0xc0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d007      	beq.n	800ac5a <xTaskCheckForTimeOut+0x82>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac54:	2301      	movs	r3, #1
 800ac56:	61fb      	str	r3, [r7, #28]
 800ac58:	e015      	b.n	800ac86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d20b      	bcs.n	800ac7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	1ad2      	subs	r2, r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff ff9b 	bl	800abac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
 800ac7a:	e004      	b.n	800ac86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac82:	2301      	movs	r3, #1
 800ac84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac86:	f000 ff75 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800ac8a:	69fb      	ldr	r3, [r7, #28]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3720      	adds	r7, #32
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20004f3c 	.word	0x20004f3c
 800ac98:	20004f50 	.word	0x20004f50

0800ac9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aca0:	4b03      	ldr	r3, [pc, #12]	; (800acb0 <vTaskMissedYield+0x14>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
}
 800aca6:	bf00      	nop
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	20004f4c 	.word	0x20004f4c

0800acb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acbc:	f000 f852 	bl	800ad64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <prvIdleTask+0x28>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d9f9      	bls.n	800acbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800acc8:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <prvIdleTask+0x2c>)
 800acca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800acd8:	e7f0      	b.n	800acbc <prvIdleTask+0x8>
 800acda:	bf00      	nop
 800acdc:	20004a68 	.word	0x20004a68
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acea:	2300      	movs	r3, #0
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	e00c      	b.n	800ad0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4a12      	ldr	r2, [pc, #72]	; (800ad44 <prvInitialiseTaskLists+0x60>)
 800acfc:	4413      	add	r3, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe f9bc 	bl	800907c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3301      	adds	r3, #1
 800ad08:	607b      	str	r3, [r7, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b37      	cmp	r3, #55	; 0x37
 800ad0e:	d9ef      	bls.n	800acf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad10:	480d      	ldr	r0, [pc, #52]	; (800ad48 <prvInitialiseTaskLists+0x64>)
 800ad12:	f7fe f9b3 	bl	800907c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad16:	480d      	ldr	r0, [pc, #52]	; (800ad4c <prvInitialiseTaskLists+0x68>)
 800ad18:	f7fe f9b0 	bl	800907c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad1c:	480c      	ldr	r0, [pc, #48]	; (800ad50 <prvInitialiseTaskLists+0x6c>)
 800ad1e:	f7fe f9ad 	bl	800907c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad22:	480c      	ldr	r0, [pc, #48]	; (800ad54 <prvInitialiseTaskLists+0x70>)
 800ad24:	f7fe f9aa 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad28:	480b      	ldr	r0, [pc, #44]	; (800ad58 <prvInitialiseTaskLists+0x74>)
 800ad2a:	f7fe f9a7 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <prvInitialiseTaskLists+0x78>)
 800ad30:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <prvInitialiseTaskLists+0x64>)
 800ad32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <prvInitialiseTaskLists+0x7c>)
 800ad36:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <prvInitialiseTaskLists+0x68>)
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20004a68 	.word	0x20004a68
 800ad48:	20004ec8 	.word	0x20004ec8
 800ad4c:	20004edc 	.word	0x20004edc
 800ad50:	20004ef8 	.word	0x20004ef8
 800ad54:	20004f0c 	.word	0x20004f0c
 800ad58:	20004f24 	.word	0x20004f24
 800ad5c:	20004ef0 	.word	0x20004ef0
 800ad60:	20004ef4 	.word	0x20004ef4

0800ad64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad6a:	e019      	b.n	800ada0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad6c:	f000 fed2 	bl	800bb14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad70:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <prvCheckTasksWaitingTermination+0x50>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fe fa07 	bl	8009190 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad82:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <prvCheckTasksWaitingTermination+0x54>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	4a0b      	ldr	r2, [pc, #44]	; (800adb8 <prvCheckTasksWaitingTermination+0x54>)
 800ad8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <prvCheckTasksWaitingTermination+0x58>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	4a0a      	ldr	r2, [pc, #40]	; (800adbc <prvCheckTasksWaitingTermination+0x58>)
 800ad94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad96:	f000 feed 	bl	800bb74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f810 	bl	800adc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <prvCheckTasksWaitingTermination+0x58>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e1      	bne.n	800ad6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20004f0c 	.word	0x20004f0c
 800adb8:	20004f38 	.word	0x20004f38
 800adbc:	20004f20 	.word	0x20004f20

0800adc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800adce:	2b00      	cmp	r3, #0
 800add0:	d108      	bne.n	800ade4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	4618      	mov	r0, r3
 800add8:	f001 f88a 	bl	800bef0 <vPortFree>
				vPortFree( pxTCB );
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 f887 	bl	800bef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ade2:	e018      	b.n	800ae16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800adea:	2b01      	cmp	r3, #1
 800adec:	d103      	bne.n	800adf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 f87e 	bl	800bef0 <vPortFree>
	}
 800adf4:	e00f      	b.n	800ae16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d00a      	beq.n	800ae16 <prvDeleteTCB+0x56>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	60fb      	str	r3, [r7, #12]
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <prvDeleteTCB+0x54>
	}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvResetNextTaskUnblockTime+0x38>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d104      	bne.n	800ae3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <prvResetNextTaskUnblockTime+0x3c>)
 800ae32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae38:	e008      	b.n	800ae4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <prvResetNextTaskUnblockTime+0x38>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	4a04      	ldr	r2, [pc, #16]	; (800ae5c <prvResetNextTaskUnblockTime+0x3c>)
 800ae4a:	6013      	str	r3, [r2, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20004ef0 	.word	0x20004ef0
 800ae5c:	20004f58 	.word	0x20004f58

0800ae60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae66:	4b0b      	ldr	r3, [pc, #44]	; (800ae94 <xTaskGetSchedulerState+0x34>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	607b      	str	r3, [r7, #4]
 800ae72:	e008      	b.n	800ae86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae74:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <xTaskGetSchedulerState+0x38>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	607b      	str	r3, [r7, #4]
 800ae80:	e001      	b.n	800ae86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae86:	687b      	ldr	r3, [r7, #4]
	}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	20004f44 	.word	0x20004f44
 800ae98:	20004f60 	.word	0x20004f60

0800ae9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d051      	beq.n	800af56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb6:	4b2a      	ldr	r3, [pc, #168]	; (800af60 <xTaskPriorityInherit+0xc4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d241      	bcs.n	800af44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	db06      	blt.n	800aed6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aec8:	4b25      	ldr	r3, [pc, #148]	; (800af60 <xTaskPriorityInherit+0xc4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6959      	ldr	r1, [r3, #20]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4a1f      	ldr	r2, [pc, #124]	; (800af64 <xTaskPriorityInherit+0xc8>)
 800aee8:	4413      	add	r3, r2
 800aeea:	4299      	cmp	r1, r3
 800aeec:	d122      	bne.n	800af34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe f94c 	bl	8009190 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aef8:	4b19      	ldr	r3, [pc, #100]	; (800af60 <xTaskPriorityInherit+0xc4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af06:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xTaskPriorityInherit+0xcc>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d903      	bls.n	800af16 <xTaskPriorityInherit+0x7a>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af12:	4a15      	ldr	r2, [pc, #84]	; (800af68 <xTaskPriorityInherit+0xcc>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <xTaskPriorityInherit+0xc8>)
 800af24:	441a      	add	r2, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	3304      	adds	r3, #4
 800af2a:	4619      	mov	r1, r3
 800af2c:	4610      	mov	r0, r2
 800af2e:	f7fe f8d2 	bl	80090d6 <vListInsertEnd>
 800af32:	e004      	b.n	800af3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <xTaskPriorityInherit+0xc4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af3e:	2301      	movs	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	e008      	b.n	800af56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af48:	4b05      	ldr	r3, [pc, #20]	; (800af60 <xTaskPriorityInherit+0xc4>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	429a      	cmp	r2, r3
 800af50:	d201      	bcs.n	800af56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af52:	2301      	movs	r3, #1
 800af54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af56:	68fb      	ldr	r3, [r7, #12]
	}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20004a64 	.word	0x20004a64
 800af64:	20004a68 	.word	0x20004a68
 800af68:	20004f40 	.word	0x20004f40

0800af6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af78:	2300      	movs	r3, #0
 800af7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d056      	beq.n	800b030 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af82:	4b2e      	ldr	r3, [pc, #184]	; (800b03c <xTaskPriorityDisinherit+0xd0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d00a      	beq.n	800afa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	60bb      	str	r3, [r7, #8]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc4:	1e5a      	subs	r2, r3, #1
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d02c      	beq.n	800b030 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d128      	bne.n	800b030 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fe f8d4 	bl	8009190 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <xTaskPriorityDisinherit+0xd4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d903      	bls.n	800b010 <xTaskPriorityDisinherit+0xa4>
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00c:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <xTaskPriorityDisinherit+0xd4>)
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4a09      	ldr	r2, [pc, #36]	; (800b044 <xTaskPriorityDisinherit+0xd8>)
 800b01e:	441a      	add	r2, r3
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	3304      	adds	r3, #4
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f7fe f855 	bl	80090d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b030:	697b      	ldr	r3, [r7, #20]
	}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20004a64 	.word	0x20004a64
 800b040:	20004f40 	.word	0x20004f40
 800b044:	20004a68 	.word	0x20004a68

0800b048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b056:	2301      	movs	r3, #1
 800b058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d06a      	beq.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	60fb      	str	r3, [r7, #12]
}
 800b07a:	bf00      	nop
 800b07c:	e7fe      	b.n	800b07c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d902      	bls.n	800b08e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e002      	b.n	800b094 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b092:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	69fa      	ldr	r2, [r7, #28]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d04b      	beq.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d146      	bne.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d10a      	bne.n	800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60bb      	str	r3, [r7, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db04      	blt.n	800b0e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	6959      	ldr	r1, [r3, #20]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4a13      	ldr	r2, [pc, #76]	; (800b144 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b0f6:	4413      	add	r3, r2
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d11c      	bne.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe f845 	bl	8009190 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	4b0f      	ldr	r3, [pc, #60]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d903      	bls.n	800b11a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a07      	ldr	r2, [pc, #28]	; (800b144 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b128:	441a      	add	r2, r3
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fd ffd0 	bl	80090d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b136:	bf00      	nop
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20004a64 	.word	0x20004a64
 800b144:	20004a68 	.word	0x20004a68
 800b148:	20004f40 	.word	0x20004f40

0800b14c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b15e:	3201      	adds	r2, #1
 800b160:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b162:	4b03      	ldr	r3, [pc, #12]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b164:	681b      	ldr	r3, [r3, #0]
	}
 800b166:	4618      	mov	r0, r3
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	20004a64 	.word	0x20004a64

0800b174 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b17e:	4b21      	ldr	r3, [pc, #132]	; (800b204 <prvAddCurrentTaskToDelayedList+0x90>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b184:	4b20      	ldr	r3, [pc, #128]	; (800b208 <prvAddCurrentTaskToDelayedList+0x94>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3304      	adds	r3, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe f800 	bl	8009190 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b196:	d10a      	bne.n	800b1ae <prvAddCurrentTaskToDelayedList+0x3a>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d007      	beq.n	800b1ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b19e:	4b1a      	ldr	r3, [pc, #104]	; (800b208 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4819      	ldr	r0, [pc, #100]	; (800b20c <prvAddCurrentTaskToDelayedList+0x98>)
 800b1a8:	f7fd ff95 	bl	80090d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1ac:	e026      	b.n	800b1fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1b6:	4b14      	ldr	r3, [pc, #80]	; (800b208 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d209      	bcs.n	800b1da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1c6:	4b12      	ldr	r3, [pc, #72]	; (800b210 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	f7fd ffa3 	bl	800911e <vListInsert>
}
 800b1d8:	e010      	b.n	800b1fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	f7fd ff99 	bl	800911e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d202      	bcs.n	800b1fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1f6:	4a08      	ldr	r2, [pc, #32]	; (800b218 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6013      	str	r3, [r2, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20004f3c 	.word	0x20004f3c
 800b208:	20004a64 	.word	0x20004a64
 800b20c:	20004f24 	.word	0x20004f24
 800b210:	20004ef4 	.word	0x20004ef4
 800b214:	20004ef0 	.word	0x20004ef0
 800b218:	20004f58 	.word	0x20004f58

0800b21c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b222:	2300      	movs	r3, #0
 800b224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b226:	f000 fb07 	bl	800b838 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b22a:	4b1c      	ldr	r3, [pc, #112]	; (800b29c <xTimerCreateTimerTask+0x80>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d021      	beq.n	800b276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b23a:	1d3a      	adds	r2, r7, #4
 800b23c:	f107 0108 	add.w	r1, r7, #8
 800b240:	f107 030c 	add.w	r3, r7, #12
 800b244:	4618      	mov	r0, r3
 800b246:	f7fd feff 	bl	8009048 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b24a:	6879      	ldr	r1, [r7, #4]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	9202      	str	r2, [sp, #8]
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	2302      	movs	r3, #2
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	2300      	movs	r3, #0
 800b25a:	460a      	mov	r2, r1
 800b25c:	4910      	ldr	r1, [pc, #64]	; (800b2a0 <xTimerCreateTimerTask+0x84>)
 800b25e:	4811      	ldr	r0, [pc, #68]	; (800b2a4 <xTimerCreateTimerTask+0x88>)
 800b260:	f7fe ffce 	bl	800a200 <xTaskCreateStatic>
 800b264:	4603      	mov	r3, r0
 800b266:	4a10      	ldr	r2, [pc, #64]	; (800b2a8 <xTimerCreateTimerTask+0x8c>)
 800b268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b26a:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <xTimerCreateTimerTask+0x8c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b272:	2301      	movs	r3, #1
 800b274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	613b      	str	r3, [r7, #16]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b292:	697b      	ldr	r3, [r7, #20]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	20004f94 	.word	0x20004f94
 800b2a0:	0800cb60 	.word	0x0800cb60
 800b2a4:	0800b3e1 	.word	0x0800b3e1
 800b2a8:	20004f98 	.word	0x20004f98

0800b2ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10a      	bne.n	800b2da <xTimerGenericCommand+0x2e>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	623b      	str	r3, [r7, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2da:	4b1a      	ldr	r3, [pc, #104]	; (800b344 <xTimerGenericCommand+0x98>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d02a      	beq.n	800b338 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	dc18      	bgt.n	800b326 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2f4:	f7ff fdb4 	bl	800ae60 <xTaskGetSchedulerState>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d109      	bne.n	800b312 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2fe:	4b11      	ldr	r3, [pc, #68]	; (800b344 <xTimerGenericCommand+0x98>)
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	f107 0110 	add.w	r1, r7, #16
 800b306:	2300      	movs	r3, #0
 800b308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b30a:	f7fe f913 	bl	8009534 <xQueueGenericSend>
 800b30e:	6278      	str	r0, [r7, #36]	; 0x24
 800b310:	e012      	b.n	800b338 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b312:	4b0c      	ldr	r3, [pc, #48]	; (800b344 <xTimerGenericCommand+0x98>)
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	f107 0110 	add.w	r1, r7, #16
 800b31a:	2300      	movs	r3, #0
 800b31c:	2200      	movs	r2, #0
 800b31e:	f7fe f909 	bl	8009534 <xQueueGenericSend>
 800b322:	6278      	str	r0, [r7, #36]	; 0x24
 800b324:	e008      	b.n	800b338 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b326:	4b07      	ldr	r3, [pc, #28]	; (800b344 <xTimerGenericCommand+0x98>)
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f107 0110 	add.w	r1, r7, #16
 800b32e:	2300      	movs	r3, #0
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	f7fe f9fd 	bl	8009730 <xQueueGenericSendFromISR>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3728      	adds	r7, #40	; 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20004f94 	.word	0x20004f94

0800b348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b352:	4b22      	ldr	r3, [pc, #136]	; (800b3dc <prvProcessExpiredTimer+0x94>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f7fd ff15 	bl	8009190 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b00      	cmp	r3, #0
 800b372:	d022      	beq.n	800b3ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	699a      	ldr	r2, [r3, #24]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	18d1      	adds	r1, r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	6978      	ldr	r0, [r7, #20]
 800b382:	f000 f8d1 	bl	800b528 <prvInsertTimerInActiveList>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01f      	beq.n	800b3cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b38c:	2300      	movs	r3, #0
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	2300      	movs	r3, #0
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	2100      	movs	r1, #0
 800b396:	6978      	ldr	r0, [r7, #20]
 800b398:	f7ff ff88 	bl	800b2ac <xTimerGenericCommand>
 800b39c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d113      	bne.n	800b3cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	60fb      	str	r3, [r7, #12]
}
 800b3b6:	bf00      	nop
 800b3b8:	e7fe      	b.n	800b3b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3c0:	f023 0301 	bic.w	r3, r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	6a1b      	ldr	r3, [r3, #32]
 800b3d0:	6978      	ldr	r0, [r7, #20]
 800b3d2:	4798      	blx	r3
}
 800b3d4:	bf00      	nop
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20004f8c 	.word	0x20004f8c

0800b3e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3e8:	f107 0308 	add.w	r3, r7, #8
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 f857 	bl	800b4a0 <prvGetNextExpireTime>
 800b3f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f803 	bl	800b404 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b3fe:	f000 f8d5 	bl	800b5ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b402:	e7f1      	b.n	800b3e8 <prvTimerTask+0x8>

0800b404 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b40e:	f7ff f933 	bl	800a678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b412:	f107 0308 	add.w	r3, r7, #8
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f866 	bl	800b4e8 <prvSampleTimeNow>
 800b41c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d130      	bne.n	800b486 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <prvProcessTimerOrBlockTask+0x3c>
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d806      	bhi.n	800b440 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b432:	f7ff f92f 	bl	800a694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b436:	68f9      	ldr	r1, [r7, #12]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ff85 	bl	800b348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b43e:	e024      	b.n	800b48a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d008      	beq.n	800b458 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <prvProcessTimerOrBlockTask+0x90>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <prvProcessTimerOrBlockTask+0x50>
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <prvProcessTimerOrBlockTask+0x52>
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b458:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <prvProcessTimerOrBlockTask+0x94>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	f7fe fe97 	bl	800a198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b46a:	f7ff f913 	bl	800a694 <xTaskResumeAll>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b474:	4b09      	ldr	r3, [pc, #36]	; (800b49c <prvProcessTimerOrBlockTask+0x98>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
}
 800b484:	e001      	b.n	800b48a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b486:	f7ff f905 	bl	800a694 <xTaskResumeAll>
}
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20004f90 	.word	0x20004f90
 800b498:	20004f94 	.word	0x20004f94
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4a8:	4b0e      	ldr	r3, [pc, #56]	; (800b4e4 <prvGetNextExpireTime+0x44>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <prvGetNextExpireTime+0x16>
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	e000      	b.n	800b4b8 <prvGetNextExpireTime+0x18>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d105      	bne.n	800b4d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4c4:	4b07      	ldr	r3, [pc, #28]	; (800b4e4 <prvGetNextExpireTime+0x44>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	e001      	b.n	800b4d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20004f8c 	.word	0x20004f8c

0800b4e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b4f0:	f7ff f96e 	bl	800a7d0 <xTaskGetTickCount>
 800b4f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <prvSampleTimeNow+0x3c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d205      	bcs.n	800b50c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b500:	f000 f936 	bl	800b770 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	e002      	b.n	800b512 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b512:	4a04      	ldr	r2, [pc, #16]	; (800b524 <prvSampleTimeNow+0x3c>)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b518:	68fb      	ldr	r3, [r7, #12]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20004f9c 	.word	0x20004f9c

0800b528 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d812      	bhi.n	800b574 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	1ad2      	subs	r2, r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d302      	bcc.n	800b562 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	e01b      	b.n	800b59a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b562:	4b10      	ldr	r3, [pc, #64]	; (800b5a4 <prvInsertTimerInActiveList+0x7c>)
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3304      	adds	r3, #4
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f7fd fdd6 	bl	800911e <vListInsert>
 800b572:	e012      	b.n	800b59a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d206      	bcs.n	800b58a <prvInsertTimerInActiveList+0x62>
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d302      	bcc.n	800b58a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b584:	2301      	movs	r3, #1
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	e007      	b.n	800b59a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b58a:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <prvInsertTimerInActiveList+0x80>)
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3304      	adds	r3, #4
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f7fd fdc2 	bl	800911e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b59a:	697b      	ldr	r3, [r7, #20]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20004f90 	.word	0x20004f90
 800b5a8:	20004f8c 	.word	0x20004f8c

0800b5ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08e      	sub	sp, #56	; 0x38
 800b5b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5b2:	e0ca      	b.n	800b74a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da18      	bge.n	800b5ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5ba:	1d3b      	adds	r3, r7, #4
 800b5bc:	3304      	adds	r3, #4
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10a      	bne.n	800b5dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	61fb      	str	r3, [r7, #28]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e2:	6850      	ldr	r0, [r2, #4]
 800b5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e6:	6892      	ldr	r2, [r2, #8]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f2c0 80aa 	blt.w	800b748 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	3304      	adds	r3, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f7fd fdc3 	bl	8009190 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b60a:	463b      	mov	r3, r7
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff ff6b 	bl	800b4e8 <prvSampleTimeNow>
 800b612:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b09      	cmp	r3, #9
 800b618:	f200 8097 	bhi.w	800b74a <prvProcessReceivedCommands+0x19e>
 800b61c:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <prvProcessReceivedCommands+0x78>)
 800b61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b622:	bf00      	nop
 800b624:	0800b64d 	.word	0x0800b64d
 800b628:	0800b64d 	.word	0x0800b64d
 800b62c:	0800b64d 	.word	0x0800b64d
 800b630:	0800b6c1 	.word	0x0800b6c1
 800b634:	0800b6d5 	.word	0x0800b6d5
 800b638:	0800b71f 	.word	0x0800b71f
 800b63c:	0800b64d 	.word	0x0800b64d
 800b640:	0800b64d 	.word	0x0800b64d
 800b644:	0800b6c1 	.word	0x0800b6c1
 800b648:	0800b6d5 	.word	0x0800b6d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b652:	f043 0301 	orr.w	r3, r3, #1
 800b656:	b2da      	uxtb	r2, r3
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	18d1      	adds	r1, r2, r3
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b66c:	f7ff ff5c 	bl	800b528 <prvInsertTimerInActiveList>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d069      	beq.n	800b74a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b67c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d05e      	beq.n	800b74a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	441a      	add	r2, r3
 800b694:	2300      	movs	r3, #0
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2300      	movs	r3, #0
 800b69a:	2100      	movs	r1, #0
 800b69c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b69e:	f7ff fe05 	bl	800b2ac <xTimerGenericCommand>
 800b6a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d14f      	bne.n	800b74a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	61bb      	str	r3, [r7, #24]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b6d2:	e03a      	b.n	800b74a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6da:	f043 0301 	orr.w	r3, r3, #1
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	617b      	str	r3, [r7, #20]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	18d1      	adds	r1, r2, r3
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b718:	f7ff ff06 	bl	800b528 <prvInsertTimerInActiveList>
					break;
 800b71c:	e015      	b.n	800b74a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b724:	f003 0302 	and.w	r3, r3, #2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d103      	bne.n	800b734 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b72e:	f000 fbdf 	bl	800bef0 <vPortFree>
 800b732:	e00a      	b.n	800b74a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73a:	f023 0301 	bic.w	r3, r3, #1
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b746:	e000      	b.n	800b74a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b748:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b74a:	4b08      	ldr	r3, [pc, #32]	; (800b76c <prvProcessReceivedCommands+0x1c0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	1d39      	adds	r1, r7, #4
 800b750:	2200      	movs	r2, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe f914 	bl	8009980 <xQueueReceive>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f47f af2a 	bne.w	800b5b4 <prvProcessReceivedCommands+0x8>
	}
}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	3730      	adds	r7, #48	; 0x30
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	20004f94 	.word	0x20004f94

0800b770 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b776:	e048      	b.n	800b80a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b778:	4b2d      	ldr	r3, [pc, #180]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b782:	4b2b      	ldr	r3, [pc, #172]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3304      	adds	r3, #4
 800b790:	4618      	mov	r0, r3
 800b792:	f7fd fcfd 	bl	8009190 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02e      	beq.n	800b80a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d90e      	bls.n	800b7dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ca:	4b19      	ldr	r3, [pc, #100]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7fd fca2 	bl	800911e <vListInsert>
 800b7da:	e016      	b.n	800b80a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fd60 	bl	800b2ac <xTimerGenericCommand>
 800b7ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	603b      	str	r3, [r7, #0]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b80a:	4b09      	ldr	r3, [pc, #36]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1b1      	bne.n	800b778 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b81a:	4b06      	ldr	r3, [pc, #24]	; (800b834 <prvSwitchTimerLists+0xc4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a04      	ldr	r2, [pc, #16]	; (800b830 <prvSwitchTimerLists+0xc0>)
 800b820:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b822:	4a04      	ldr	r2, [pc, #16]	; (800b834 <prvSwitchTimerLists+0xc4>)
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	6013      	str	r3, [r2, #0]
}
 800b828:	bf00      	nop
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	20004f8c 	.word	0x20004f8c
 800b834:	20004f90 	.word	0x20004f90

0800b838 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b83e:	f000 f969 	bl	800bb14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <prvCheckForValidListAndQueue+0x60>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d120      	bne.n	800b88c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b84a:	4814      	ldr	r0, [pc, #80]	; (800b89c <prvCheckForValidListAndQueue+0x64>)
 800b84c:	f7fd fc16 	bl	800907c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b850:	4813      	ldr	r0, [pc, #76]	; (800b8a0 <prvCheckForValidListAndQueue+0x68>)
 800b852:	f7fd fc13 	bl	800907c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b856:	4b13      	ldr	r3, [pc, #76]	; (800b8a4 <prvCheckForValidListAndQueue+0x6c>)
 800b858:	4a10      	ldr	r2, [pc, #64]	; (800b89c <prvCheckForValidListAndQueue+0x64>)
 800b85a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b85c:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <prvCheckForValidListAndQueue+0x70>)
 800b85e:	4a10      	ldr	r2, [pc, #64]	; (800b8a0 <prvCheckForValidListAndQueue+0x68>)
 800b860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b862:	2300      	movs	r3, #0
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <prvCheckForValidListAndQueue+0x74>)
 800b868:	4a11      	ldr	r2, [pc, #68]	; (800b8b0 <prvCheckForValidListAndQueue+0x78>)
 800b86a:	2110      	movs	r1, #16
 800b86c:	200a      	movs	r0, #10
 800b86e:	f7fd fd21 	bl	80092b4 <xQueueGenericCreateStatic>
 800b872:	4603      	mov	r3, r0
 800b874:	4a08      	ldr	r2, [pc, #32]	; (800b898 <prvCheckForValidListAndQueue+0x60>)
 800b876:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b878:	4b07      	ldr	r3, [pc, #28]	; (800b898 <prvCheckForValidListAndQueue+0x60>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <prvCheckForValidListAndQueue+0x60>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	490b      	ldr	r1, [pc, #44]	; (800b8b4 <prvCheckForValidListAndQueue+0x7c>)
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fc32 	bl	800a0f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b88c:	f000 f972 	bl	800bb74 <vPortExitCritical>
}
 800b890:	bf00      	nop
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20004f94 	.word	0x20004f94
 800b89c:	20004f64 	.word	0x20004f64
 800b8a0:	20004f78 	.word	0x20004f78
 800b8a4:	20004f8c 	.word	0x20004f8c
 800b8a8:	20004f90 	.word	0x20004f90
 800b8ac:	20005040 	.word	0x20005040
 800b8b0:	20004fa0 	.word	0x20004fa0
 800b8b4:	0800cb68 	.word	0x0800cb68

0800b8b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3b04      	subs	r3, #4
 800b8c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3b04      	subs	r3, #4
 800b8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f023 0201 	bic.w	r2, r3, #1
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3b04      	subs	r3, #4
 800b8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8e8:	4a0c      	ldr	r2, [pc, #48]	; (800b91c <pxPortInitialiseStack+0x64>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3b14      	subs	r3, #20
 800b8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3b04      	subs	r3, #4
 800b8fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f06f 0202 	mvn.w	r2, #2
 800b906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3b20      	subs	r3, #32
 800b90c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b90e:	68fb      	ldr	r3, [r7, #12]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	0800b921 	.word	0x0800b921

0800b920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b92a:	4b12      	ldr	r3, [pc, #72]	; (800b974 <prvTaskExitError+0x54>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b932:	d00a      	beq.n	800b94a <prvTaskExitError+0x2a>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <prvTaskExitError+0x28>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	60bb      	str	r3, [r7, #8]
}
 800b95c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b95e:	bf00      	nop
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0fc      	beq.n	800b960 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b966:	bf00      	nop
 800b968:	bf00      	nop
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	20000024 	.word	0x20000024
	...

0800b980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <pxCurrentTCBConst2>)
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	6808      	ldr	r0, [r1, #0]
 800b986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98a:	f380 8809 	msr	PSP, r0
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f04f 0000 	mov.w	r0, #0
 800b996:	f380 8811 	msr	BASEPRI, r0
 800b99a:	4770      	bx	lr
 800b99c:	f3af 8000 	nop.w

0800b9a0 <pxCurrentTCBConst2>:
 800b9a0:	20004a64 	.word	0x20004a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop

0800b9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9a8:	4808      	ldr	r0, [pc, #32]	; (800b9cc <prvPortStartFirstTask+0x24>)
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f380 8808 	msr	MSP, r0
 800b9b2:	f04f 0000 	mov.w	r0, #0
 800b9b6:	f380 8814 	msr	CONTROL, r0
 800b9ba:	b662      	cpsie	i
 800b9bc:	b661      	cpsie	f
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	df00      	svc	0
 800b9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ca:	bf00      	nop
 800b9cc:	e000ed08 	.word	0xe000ed08

0800b9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9d6:	4b46      	ldr	r3, [pc, #280]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a46      	ldr	r2, [pc, #280]	; (800baf4 <xPortStartScheduler+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d10a      	bne.n	800b9f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	613b      	str	r3, [r7, #16]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9f6:	4b3e      	ldr	r3, [pc, #248]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a3f      	ldr	r2, [pc, #252]	; (800baf8 <xPortStartScheduler+0x128>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10a      	bne.n	800ba16 <xPortStartScheduler+0x46>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba16:	4b39      	ldr	r3, [pc, #228]	; (800bafc <xPortStartScheduler+0x12c>)
 800ba18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b31      	ldr	r3, [pc, #196]	; (800bb00 <xPortStartScheduler+0x130>)
 800ba3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba3e:	4b31      	ldr	r3, [pc, #196]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba40:	2207      	movs	r2, #7
 800ba42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba44:	e009      	b.n	800ba5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba46:	4b2f      	ldr	r3, [pc, #188]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4a2d      	ldr	r2, [pc, #180]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba62:	2b80      	cmp	r3, #128	; 0x80
 800ba64:	d0ef      	beq.n	800ba46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba66:	4b27      	ldr	r3, [pc, #156]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f1c3 0307 	rsb	r3, r3, #7
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d00a      	beq.n	800ba88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	60bb      	str	r3, [r7, #8]
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba88:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba92:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba9a:	4a1a      	ldr	r2, [pc, #104]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <xPortStartScheduler+0x138>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a17      	ldr	r2, [pc, #92]	; (800bb08 <xPortStartScheduler+0x138>)
 800baac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a14      	ldr	r2, [pc, #80]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800babc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800babe:	f000 f8dd 	bl	800bc7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bac2:	4b12      	ldr	r3, [pc, #72]	; (800bb0c <xPortStartScheduler+0x13c>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bac8:	f000 f8fc 	bl	800bcc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xPortStartScheduler+0x140>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a0f      	ldr	r2, [pc, #60]	; (800bb10 <xPortStartScheduler+0x140>)
 800bad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bad8:	f7ff ff66 	bl	800b9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800badc:	f7fe ff54 	bl	800a988 <vTaskSwitchContext>
	prvTaskExitError();
 800bae0:	f7ff ff1e 	bl	800b920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	e000ed00 	.word	0xe000ed00
 800baf4:	410fc271 	.word	0x410fc271
 800baf8:	410fc270 	.word	0x410fc270
 800bafc:	e000e400 	.word	0xe000e400
 800bb00:	20005090 	.word	0x20005090
 800bb04:	20005094 	.word	0x20005094
 800bb08:	e000ed20 	.word	0xe000ed20
 800bb0c:	20000024 	.word	0x20000024
 800bb10:	e000ef34 	.word	0xe000ef34

0800bb14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	607b      	str	r3, [r7, #4]
}
 800bb2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb38:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10f      	bne.n	800bb60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <vPortEnterCritical+0x5c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	603b      	str	r3, [r7, #0]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <vPortEnterCritical+0x4a>
	}
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20000024 	.word	0x20000024
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb7a:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <vPortExitCritical+0x24>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	607b      	str	r3, [r7, #4]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bba2:	4b08      	ldr	r3, [pc, #32]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d105      	bne.n	800bbb6 <vPortExitCritical+0x42>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f383 8811 	msr	BASEPRI, r3
}
 800bbb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20000024 	.word	0x20000024
	...

0800bbd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbd0:	f3ef 8009 	mrs	r0, PSP
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <pxCurrentTCBConst>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	f01e 0f10 	tst.w	lr, #16
 800bbe0:	bf08      	it	eq
 800bbe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	6010      	str	r0, [r2, #0]
 800bbec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbf4:	f380 8811 	msr	BASEPRI, r0
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f7fe fec2 	bl	800a988 <vTaskSwitchContext>
 800bc04:	f04f 0000 	mov.w	r0, #0
 800bc08:	f380 8811 	msr	BASEPRI, r0
 800bc0c:	bc09      	pop	{r0, r3}
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	6808      	ldr	r0, [r1, #0]
 800bc12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc16:	f01e 0f10 	tst.w	lr, #16
 800bc1a:	bf08      	it	eq
 800bc1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc20:	f380 8809 	msr	PSP, r0
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst>:
 800bc30:	20004a64 	.word	0x20004a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc52:	f7fe fddf 	bl	800a814 <xTaskIncrementTick>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc5c:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <xPortSysTickHandler+0x40>)
 800bc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	2300      	movs	r3, #0
 800bc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
}
 800bc6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc86:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <vPortSetupTimerInterrupt+0x38>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <vPortSetupTimerInterrupt+0x3c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a0a      	ldr	r2, [pc, #40]	; (800bcbc <vPortSetupTimerInterrupt+0x40>)
 800bc92:	fba2 2303 	umull	r2, r3, r2, r3
 800bc96:	099b      	lsrs	r3, r3, #6
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <vPortSetupTimerInterrupt+0x44>)
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc9e:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	e000e010 	.word	0xe000e010
 800bcb4:	e000e018 	.word	0xe000e018
 800bcb8:	20000000 	.word	0x20000000
 800bcbc:	10624dd3 	.word	0x10624dd3
 800bcc0:	e000e014 	.word	0xe000e014

0800bcc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcd4 <vPortEnableVFP+0x10>
 800bcc8:	6801      	ldr	r1, [r0, #0]
 800bcca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcce:	6001      	str	r1, [r0, #0]
 800bcd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcd2:	bf00      	nop
 800bcd4:	e000ed88 	.word	0xe000ed88

0800bcd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcde:	f3ef 8305 	mrs	r3, IPSR
 800bce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b0f      	cmp	r3, #15
 800bce8:	d914      	bls.n	800bd14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <vPortValidateInterruptPriority+0x70>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcf4:	4b15      	ldr	r3, [pc, #84]	; (800bd4c <vPortValidateInterruptPriority+0x74>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	7afa      	ldrb	r2, [r7, #11]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d20a      	bcs.n	800bd14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	607b      	str	r3, [r7, #4]
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd14:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <vPortValidateInterruptPriority+0x78>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <vPortValidateInterruptPriority+0x7c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d90a      	bls.n	800bd3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	603b      	str	r3, [r7, #0]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <vPortValidateInterruptPriority+0x60>
	}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	e000e3f0 	.word	0xe000e3f0
 800bd4c:	20005090 	.word	0x20005090
 800bd50:	e000ed0c 	.word	0xe000ed0c
 800bd54:	20005094 	.word	0x20005094

0800bd58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd64:	f7fe fc88 	bl	800a678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd68:	4b5b      	ldr	r3, [pc, #364]	; (800bed8 <pvPortMalloc+0x180>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd70:	f000 f920 	bl	800bfb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd74:	4b59      	ldr	r3, [pc, #356]	; (800bedc <pvPortMalloc+0x184>)
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8093 	bne.w	800bea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01d      	beq.n	800bdc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd88:	2208      	movs	r2, #8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f003 0307 	and.w	r3, r3, #7
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d014      	beq.n	800bdc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	3308      	adds	r3, #8
 800bda2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f003 0307 	and.w	r3, r3, #7
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <pvPortMalloc+0x6c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	617b      	str	r3, [r7, #20]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d06e      	beq.n	800bea8 <pvPortMalloc+0x150>
 800bdca:	4b45      	ldr	r3, [pc, #276]	; (800bee0 <pvPortMalloc+0x188>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d869      	bhi.n	800bea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdd4:	4b43      	ldr	r3, [pc, #268]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdd8:	4b42      	ldr	r3, [pc, #264]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdde:	e004      	b.n	800bdea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d903      	bls.n	800bdfc <pvPortMalloc+0xa4>
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f1      	bne.n	800bde0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdfc:	4b36      	ldr	r3, [pc, #216]	; (800bed8 <pvPortMalloc+0x180>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be02:	429a      	cmp	r2, r3
 800be04:	d050      	beq.n	800bea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2208      	movs	r2, #8
 800be0c:	4413      	add	r3, r2
 800be0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	2308      	movs	r3, #8
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	429a      	cmp	r2, r3
 800be26:	d91f      	bls.n	800be68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <pvPortMalloc+0xf8>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	613b      	str	r3, [r7, #16]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	1ad2      	subs	r2, r2, r3
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be62:	69b8      	ldr	r0, [r7, #24]
 800be64:	f000 f908 	bl	800c078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be68:	4b1d      	ldr	r3, [pc, #116]	; (800bee0 <pvPortMalloc+0x188>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <pvPortMalloc+0x188>)
 800be74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be76:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <pvPortMalloc+0x188>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <pvPortMalloc+0x190>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d203      	bcs.n	800be8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be82:	4b17      	ldr	r3, [pc, #92]	; (800bee0 <pvPortMalloc+0x188>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a18      	ldr	r2, [pc, #96]	; (800bee8 <pvPortMalloc+0x190>)
 800be88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <pvPortMalloc+0x184>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	431a      	orrs	r2, r3
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <pvPortMalloc+0x194>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	4a11      	ldr	r2, [pc, #68]	; (800beec <pvPortMalloc+0x194>)
 800bea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bea8:	f7fe fbf4 	bl	800a694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <pvPortMalloc+0x174>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	60fb      	str	r3, [r7, #12]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <pvPortMalloc+0x172>
	return pvReturn;
 800becc:	69fb      	ldr	r3, [r7, #28]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3728      	adds	r7, #40	; 0x28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20008ca0 	.word	0x20008ca0
 800bedc:	20008cb4 	.word	0x20008cb4
 800bee0:	20008ca4 	.word	0x20008ca4
 800bee4:	20008c98 	.word	0x20008c98
 800bee8:	20008ca8 	.word	0x20008ca8
 800beec:	20008cac 	.word	0x20008cac

0800bef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d04d      	beq.n	800bf9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf02:	2308      	movs	r3, #8
 800bf04:	425b      	negs	r3, r3
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <vPortFree+0xb8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4013      	ands	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <vPortFree+0x44>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	60fb      	str	r3, [r7, #12]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <vPortFree+0x62>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60bb      	str	r3, [r7, #8]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	4b14      	ldr	r3, [pc, #80]	; (800bfa8 <vPortFree+0xb8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d01e      	beq.n	800bf9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d11a      	bne.n	800bf9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <vPortFree+0xb8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	43db      	mvns	r3, r3
 800bf72:	401a      	ands	r2, r3
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf78:	f7fe fb7e 	bl	800a678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <vPortFree+0xbc>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4413      	add	r3, r2
 800bf86:	4a09      	ldr	r2, [pc, #36]	; (800bfac <vPortFree+0xbc>)
 800bf88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf8a:	6938      	ldr	r0, [r7, #16]
 800bf8c:	f000 f874 	bl	800c078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <vPortFree+0xc0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	4a06      	ldr	r2, [pc, #24]	; (800bfb0 <vPortFree+0xc0>)
 800bf98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf9a:	f7fe fb7b 	bl	800a694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf9e:	bf00      	nop
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20008cb4 	.word	0x20008cb4
 800bfac:	20008ca4 	.word	0x20008ca4
 800bfb0:	20008cb0 	.word	0x20008cb0

0800bfb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bfbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfc0:	4b27      	ldr	r3, [pc, #156]	; (800c060 <prvHeapInit+0xac>)
 800bfc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	4a1f      	ldr	r2, [pc, #124]	; (800c060 <prvHeapInit+0xac>)
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfec:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <prvHeapInit+0xb0>)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bff2:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <prvHeapInit+0xb0>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4413      	add	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c000:	2208      	movs	r2, #8
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4a15      	ldr	r2, [pc, #84]	; (800c068 <prvHeapInit+0xb4>)
 800c014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c016:	4b14      	ldr	r3, [pc, #80]	; (800c068 <prvHeapInit+0xb4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <prvHeapInit+0xb4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c034:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <prvHeapInit+0xb4>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4a0a      	ldr	r2, [pc, #40]	; (800c06c <prvHeapInit+0xb8>)
 800c042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	4a09      	ldr	r2, [pc, #36]	; (800c070 <prvHeapInit+0xbc>)
 800c04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <prvHeapInit+0xc0>)
 800c04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c052:	601a      	str	r2, [r3, #0]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	20005098 	.word	0x20005098
 800c064:	20008c98 	.word	0x20008c98
 800c068:	20008ca0 	.word	0x20008ca0
 800c06c:	20008ca8 	.word	0x20008ca8
 800c070:	20008ca4 	.word	0x20008ca4
 800c074:	20008cb4 	.word	0x20008cb4

0800c078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <prvInsertBlockIntoFreeList+0xac>)
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e002      	b.n	800c08c <prvInsertBlockIntoFreeList+0x14>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d8f7      	bhi.n	800c086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d108      	bne.n	800c0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	441a      	add	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d118      	bne.n	800c100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d00d      	beq.n	800c0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	441a      	add	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	e008      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e003      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d002      	beq.n	800c116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	20008c98 	.word	0x20008c98
 800c128:	20008ca0 	.word	0x20008ca0

0800c12c <__errno>:
 800c12c:	4b01      	ldr	r3, [pc, #4]	; (800c134 <__errno+0x8>)
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20000028 	.word	0x20000028

0800c138 <__libc_init_array>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	4d0d      	ldr	r5, [pc, #52]	; (800c170 <__libc_init_array+0x38>)
 800c13c:	4c0d      	ldr	r4, [pc, #52]	; (800c174 <__libc_init_array+0x3c>)
 800c13e:	1b64      	subs	r4, r4, r5
 800c140:	10a4      	asrs	r4, r4, #2
 800c142:	2600      	movs	r6, #0
 800c144:	42a6      	cmp	r6, r4
 800c146:	d109      	bne.n	800c15c <__libc_init_array+0x24>
 800c148:	4d0b      	ldr	r5, [pc, #44]	; (800c178 <__libc_init_array+0x40>)
 800c14a:	4c0c      	ldr	r4, [pc, #48]	; (800c17c <__libc_init_array+0x44>)
 800c14c:	f000 fc62 	bl	800ca14 <_init>
 800c150:	1b64      	subs	r4, r4, r5
 800c152:	10a4      	asrs	r4, r4, #2
 800c154:	2600      	movs	r6, #0
 800c156:	42a6      	cmp	r6, r4
 800c158:	d105      	bne.n	800c166 <__libc_init_array+0x2e>
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c160:	4798      	blx	r3
 800c162:	3601      	adds	r6, #1
 800c164:	e7ee      	b.n	800c144 <__libc_init_array+0xc>
 800c166:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16a:	4798      	blx	r3
 800c16c:	3601      	adds	r6, #1
 800c16e:	e7f2      	b.n	800c156 <__libc_init_array+0x1e>
 800c170:	0800f558 	.word	0x0800f558
 800c174:	0800f558 	.word	0x0800f558
 800c178:	0800f558 	.word	0x0800f558
 800c17c:	0800f55c 	.word	0x0800f55c

0800c180 <memcpy>:
 800c180:	440a      	add	r2, r1
 800c182:	4291      	cmp	r1, r2
 800c184:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c188:	d100      	bne.n	800c18c <memcpy+0xc>
 800c18a:	4770      	bx	lr
 800c18c:	b510      	push	{r4, lr}
 800c18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c196:	4291      	cmp	r1, r2
 800c198:	d1f9      	bne.n	800c18e <memcpy+0xe>
 800c19a:	bd10      	pop	{r4, pc}

0800c19c <memset>:
 800c19c:	4402      	add	r2, r0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d100      	bne.n	800c1a6 <memset+0xa>
 800c1a4:	4770      	bx	lr
 800c1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1aa:	e7f9      	b.n	800c1a0 <memset+0x4>

0800c1ac <sniprintf>:
 800c1ac:	b40c      	push	{r2, r3}
 800c1ae:	b530      	push	{r4, r5, lr}
 800c1b0:	4b17      	ldr	r3, [pc, #92]	; (800c210 <sniprintf+0x64>)
 800c1b2:	1e0c      	subs	r4, r1, #0
 800c1b4:	681d      	ldr	r5, [r3, #0]
 800c1b6:	b09d      	sub	sp, #116	; 0x74
 800c1b8:	da08      	bge.n	800c1cc <sniprintf+0x20>
 800c1ba:	238b      	movs	r3, #139	; 0x8b
 800c1bc:	602b      	str	r3, [r5, #0]
 800c1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1c2:	b01d      	add	sp, #116	; 0x74
 800c1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1c8:	b002      	add	sp, #8
 800c1ca:	4770      	bx	lr
 800c1cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1d4:	bf14      	ite	ne
 800c1d6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c1da:	4623      	moveq	r3, r4
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	9307      	str	r3, [sp, #28]
 800c1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	9006      	str	r0, [sp, #24]
 800c1e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c1ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1ee:	ab21      	add	r3, sp, #132	; 0x84
 800c1f0:	a902      	add	r1, sp, #8
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	f000 f869 	bl	800c2cc <_svfiprintf_r>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	bfbc      	itt	lt
 800c1fe:	238b      	movlt	r3, #139	; 0x8b
 800c200:	602b      	strlt	r3, [r5, #0]
 800c202:	2c00      	cmp	r4, #0
 800c204:	d0dd      	beq.n	800c1c2 <sniprintf+0x16>
 800c206:	9b02      	ldr	r3, [sp, #8]
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
 800c20c:	e7d9      	b.n	800c1c2 <sniprintf+0x16>
 800c20e:	bf00      	nop
 800c210:	20000028 	.word	0x20000028

0800c214 <__ssputs_r>:
 800c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c218:	688e      	ldr	r6, [r1, #8]
 800c21a:	429e      	cmp	r6, r3
 800c21c:	4682      	mov	sl, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	4690      	mov	r8, r2
 800c222:	461f      	mov	r7, r3
 800c224:	d838      	bhi.n	800c298 <__ssputs_r+0x84>
 800c226:	898a      	ldrh	r2, [r1, #12]
 800c228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c22c:	d032      	beq.n	800c294 <__ssputs_r+0x80>
 800c22e:	6825      	ldr	r5, [r4, #0]
 800c230:	6909      	ldr	r1, [r1, #16]
 800c232:	eba5 0901 	sub.w	r9, r5, r1
 800c236:	6965      	ldr	r5, [r4, #20]
 800c238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c23c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c240:	3301      	adds	r3, #1
 800c242:	444b      	add	r3, r9
 800c244:	106d      	asrs	r5, r5, #1
 800c246:	429d      	cmp	r5, r3
 800c248:	bf38      	it	cc
 800c24a:	461d      	movcc	r5, r3
 800c24c:	0553      	lsls	r3, r2, #21
 800c24e:	d531      	bpl.n	800c2b4 <__ssputs_r+0xa0>
 800c250:	4629      	mov	r1, r5
 800c252:	f000 fb39 	bl	800c8c8 <_malloc_r>
 800c256:	4606      	mov	r6, r0
 800c258:	b950      	cbnz	r0, 800c270 <__ssputs_r+0x5c>
 800c25a:	230c      	movs	r3, #12
 800c25c:	f8ca 3000 	str.w	r3, [sl]
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c270:	6921      	ldr	r1, [r4, #16]
 800c272:	464a      	mov	r2, r9
 800c274:	f7ff ff84 	bl	800c180 <memcpy>
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	6126      	str	r6, [r4, #16]
 800c286:	6165      	str	r5, [r4, #20]
 800c288:	444e      	add	r6, r9
 800c28a:	eba5 0509 	sub.w	r5, r5, r9
 800c28e:	6026      	str	r6, [r4, #0]
 800c290:	60a5      	str	r5, [r4, #8]
 800c292:	463e      	mov	r6, r7
 800c294:	42be      	cmp	r6, r7
 800c296:	d900      	bls.n	800c29a <__ssputs_r+0x86>
 800c298:	463e      	mov	r6, r7
 800c29a:	4632      	mov	r2, r6
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	4641      	mov	r1, r8
 800c2a0:	f000 faa8 	bl	800c7f4 <memmove>
 800c2a4:	68a3      	ldr	r3, [r4, #8]
 800c2a6:	6822      	ldr	r2, [r4, #0]
 800c2a8:	1b9b      	subs	r3, r3, r6
 800c2aa:	4432      	add	r2, r6
 800c2ac:	60a3      	str	r3, [r4, #8]
 800c2ae:	6022      	str	r2, [r4, #0]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e7db      	b.n	800c26c <__ssputs_r+0x58>
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	f000 fb61 	bl	800c97c <_realloc_r>
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1e1      	bne.n	800c284 <__ssputs_r+0x70>
 800c2c0:	6921      	ldr	r1, [r4, #16]
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	f000 fab0 	bl	800c828 <_free_r>
 800c2c8:	e7c7      	b.n	800c25a <__ssputs_r+0x46>
	...

0800c2cc <_svfiprintf_r>:
 800c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	898b      	ldrh	r3, [r1, #12]
 800c2d4:	061b      	lsls	r3, r3, #24
 800c2d6:	b09d      	sub	sp, #116	; 0x74
 800c2d8:	4607      	mov	r7, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	d50e      	bpl.n	800c2fe <_svfiprintf_r+0x32>
 800c2e0:	690b      	ldr	r3, [r1, #16]
 800c2e2:	b963      	cbnz	r3, 800c2fe <_svfiprintf_r+0x32>
 800c2e4:	2140      	movs	r1, #64	; 0x40
 800c2e6:	f000 faef 	bl	800c8c8 <_malloc_r>
 800c2ea:	6028      	str	r0, [r5, #0]
 800c2ec:	6128      	str	r0, [r5, #16]
 800c2ee:	b920      	cbnz	r0, 800c2fa <_svfiprintf_r+0x2e>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f8:	e0d1      	b.n	800c49e <_svfiprintf_r+0x1d2>
 800c2fa:	2340      	movs	r3, #64	; 0x40
 800c2fc:	616b      	str	r3, [r5, #20]
 800c2fe:	2300      	movs	r3, #0
 800c300:	9309      	str	r3, [sp, #36]	; 0x24
 800c302:	2320      	movs	r3, #32
 800c304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c308:	f8cd 800c 	str.w	r8, [sp, #12]
 800c30c:	2330      	movs	r3, #48	; 0x30
 800c30e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4b8 <_svfiprintf_r+0x1ec>
 800c312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c316:	f04f 0901 	mov.w	r9, #1
 800c31a:	4623      	mov	r3, r4
 800c31c:	469a      	mov	sl, r3
 800c31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c322:	b10a      	cbz	r2, 800c328 <_svfiprintf_r+0x5c>
 800c324:	2a25      	cmp	r2, #37	; 0x25
 800c326:	d1f9      	bne.n	800c31c <_svfiprintf_r+0x50>
 800c328:	ebba 0b04 	subs.w	fp, sl, r4
 800c32c:	d00b      	beq.n	800c346 <_svfiprintf_r+0x7a>
 800c32e:	465b      	mov	r3, fp
 800c330:	4622      	mov	r2, r4
 800c332:	4629      	mov	r1, r5
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff ff6d 	bl	800c214 <__ssputs_r>
 800c33a:	3001      	adds	r0, #1
 800c33c:	f000 80aa 	beq.w	800c494 <_svfiprintf_r+0x1c8>
 800c340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c342:	445a      	add	r2, fp
 800c344:	9209      	str	r2, [sp, #36]	; 0x24
 800c346:	f89a 3000 	ldrb.w	r3, [sl]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 80a2 	beq.w	800c494 <_svfiprintf_r+0x1c8>
 800c350:	2300      	movs	r3, #0
 800c352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c35a:	f10a 0a01 	add.w	sl, sl, #1
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	9307      	str	r3, [sp, #28]
 800c362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c366:	931a      	str	r3, [sp, #104]	; 0x68
 800c368:	4654      	mov	r4, sl
 800c36a:	2205      	movs	r2, #5
 800c36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c370:	4851      	ldr	r0, [pc, #324]	; (800c4b8 <_svfiprintf_r+0x1ec>)
 800c372:	f7f3 ff35 	bl	80001e0 <memchr>
 800c376:	9a04      	ldr	r2, [sp, #16]
 800c378:	b9d8      	cbnz	r0, 800c3b2 <_svfiprintf_r+0xe6>
 800c37a:	06d0      	lsls	r0, r2, #27
 800c37c:	bf44      	itt	mi
 800c37e:	2320      	movmi	r3, #32
 800c380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c384:	0711      	lsls	r1, r2, #28
 800c386:	bf44      	itt	mi
 800c388:	232b      	movmi	r3, #43	; 0x2b
 800c38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c38e:	f89a 3000 	ldrb.w	r3, [sl]
 800c392:	2b2a      	cmp	r3, #42	; 0x2a
 800c394:	d015      	beq.n	800c3c2 <_svfiprintf_r+0xf6>
 800c396:	9a07      	ldr	r2, [sp, #28]
 800c398:	4654      	mov	r4, sl
 800c39a:	2000      	movs	r0, #0
 800c39c:	f04f 0c0a 	mov.w	ip, #10
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3a6:	3b30      	subs	r3, #48	; 0x30
 800c3a8:	2b09      	cmp	r3, #9
 800c3aa:	d94e      	bls.n	800c44a <_svfiprintf_r+0x17e>
 800c3ac:	b1b0      	cbz	r0, 800c3dc <_svfiprintf_r+0x110>
 800c3ae:	9207      	str	r2, [sp, #28]
 800c3b0:	e014      	b.n	800c3dc <_svfiprintf_r+0x110>
 800c3b2:	eba0 0308 	sub.w	r3, r0, r8
 800c3b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	46a2      	mov	sl, r4
 800c3c0:	e7d2      	b.n	800c368 <_svfiprintf_r+0x9c>
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	1d19      	adds	r1, r3, #4
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	9103      	str	r1, [sp, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bfbb      	ittet	lt
 800c3ce:	425b      	neglt	r3, r3
 800c3d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3d4:	9307      	strge	r3, [sp, #28]
 800c3d6:	9307      	strlt	r3, [sp, #28]
 800c3d8:	bfb8      	it	lt
 800c3da:	9204      	strlt	r2, [sp, #16]
 800c3dc:	7823      	ldrb	r3, [r4, #0]
 800c3de:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e0:	d10c      	bne.n	800c3fc <_svfiprintf_r+0x130>
 800c3e2:	7863      	ldrb	r3, [r4, #1]
 800c3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e6:	d135      	bne.n	800c454 <_svfiprintf_r+0x188>
 800c3e8:	9b03      	ldr	r3, [sp, #12]
 800c3ea:	1d1a      	adds	r2, r3, #4
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	9203      	str	r2, [sp, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfb8      	it	lt
 800c3f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c3f8:	3402      	adds	r4, #2
 800c3fa:	9305      	str	r3, [sp, #20]
 800c3fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4c8 <_svfiprintf_r+0x1fc>
 800c400:	7821      	ldrb	r1, [r4, #0]
 800c402:	2203      	movs	r2, #3
 800c404:	4650      	mov	r0, sl
 800c406:	f7f3 feeb 	bl	80001e0 <memchr>
 800c40a:	b140      	cbz	r0, 800c41e <_svfiprintf_r+0x152>
 800c40c:	2340      	movs	r3, #64	; 0x40
 800c40e:	eba0 000a 	sub.w	r0, r0, sl
 800c412:	fa03 f000 	lsl.w	r0, r3, r0
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	4303      	orrs	r3, r0
 800c41a:	3401      	adds	r4, #1
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c422:	4826      	ldr	r0, [pc, #152]	; (800c4bc <_svfiprintf_r+0x1f0>)
 800c424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c428:	2206      	movs	r2, #6
 800c42a:	f7f3 fed9 	bl	80001e0 <memchr>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d038      	beq.n	800c4a4 <_svfiprintf_r+0x1d8>
 800c432:	4b23      	ldr	r3, [pc, #140]	; (800c4c0 <_svfiprintf_r+0x1f4>)
 800c434:	bb1b      	cbnz	r3, 800c47e <_svfiprintf_r+0x1b2>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	3307      	adds	r3, #7
 800c43a:	f023 0307 	bic.w	r3, r3, #7
 800c43e:	3308      	adds	r3, #8
 800c440:	9303      	str	r3, [sp, #12]
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	4433      	add	r3, r6
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	e767      	b.n	800c31a <_svfiprintf_r+0x4e>
 800c44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c44e:	460c      	mov	r4, r1
 800c450:	2001      	movs	r0, #1
 800c452:	e7a5      	b.n	800c3a0 <_svfiprintf_r+0xd4>
 800c454:	2300      	movs	r3, #0
 800c456:	3401      	adds	r4, #1
 800c458:	9305      	str	r3, [sp, #20]
 800c45a:	4619      	mov	r1, r3
 800c45c:	f04f 0c0a 	mov.w	ip, #10
 800c460:	4620      	mov	r0, r4
 800c462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c466:	3a30      	subs	r2, #48	; 0x30
 800c468:	2a09      	cmp	r2, #9
 800c46a:	d903      	bls.n	800c474 <_svfiprintf_r+0x1a8>
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d0c5      	beq.n	800c3fc <_svfiprintf_r+0x130>
 800c470:	9105      	str	r1, [sp, #20]
 800c472:	e7c3      	b.n	800c3fc <_svfiprintf_r+0x130>
 800c474:	fb0c 2101 	mla	r1, ip, r1, r2
 800c478:	4604      	mov	r4, r0
 800c47a:	2301      	movs	r3, #1
 800c47c:	e7f0      	b.n	800c460 <_svfiprintf_r+0x194>
 800c47e:	ab03      	add	r3, sp, #12
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	462a      	mov	r2, r5
 800c484:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <_svfiprintf_r+0x1f8>)
 800c486:	a904      	add	r1, sp, #16
 800c488:	4638      	mov	r0, r7
 800c48a:	f3af 8000 	nop.w
 800c48e:	1c42      	adds	r2, r0, #1
 800c490:	4606      	mov	r6, r0
 800c492:	d1d6      	bne.n	800c442 <_svfiprintf_r+0x176>
 800c494:	89ab      	ldrh	r3, [r5, #12]
 800c496:	065b      	lsls	r3, r3, #25
 800c498:	f53f af2c 	bmi.w	800c2f4 <_svfiprintf_r+0x28>
 800c49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c49e:	b01d      	add	sp, #116	; 0x74
 800c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a4:	ab03      	add	r3, sp, #12
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	4b06      	ldr	r3, [pc, #24]	; (800c4c4 <_svfiprintf_r+0x1f8>)
 800c4ac:	a904      	add	r1, sp, #16
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f000 f87a 	bl	800c5a8 <_printf_i>
 800c4b4:	e7eb      	b.n	800c48e <_svfiprintf_r+0x1c2>
 800c4b6:	bf00      	nop
 800c4b8:	0800f51c 	.word	0x0800f51c
 800c4bc:	0800f526 	.word	0x0800f526
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	0800c215 	.word	0x0800c215
 800c4c8:	0800f522 	.word	0x0800f522

0800c4cc <_printf_common>:
 800c4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d0:	4616      	mov	r6, r2
 800c4d2:	4699      	mov	r9, r3
 800c4d4:	688a      	ldr	r2, [r1, #8]
 800c4d6:	690b      	ldr	r3, [r1, #16]
 800c4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	bfb8      	it	lt
 800c4e0:	4613      	movlt	r3, r2
 800c4e2:	6033      	str	r3, [r6, #0]
 800c4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b10a      	cbz	r2, 800c4f2 <_printf_common+0x26>
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	6033      	str	r3, [r6, #0]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	0699      	lsls	r1, r3, #26
 800c4f6:	bf42      	ittt	mi
 800c4f8:	6833      	ldrmi	r3, [r6, #0]
 800c4fa:	3302      	addmi	r3, #2
 800c4fc:	6033      	strmi	r3, [r6, #0]
 800c4fe:	6825      	ldr	r5, [r4, #0]
 800c500:	f015 0506 	ands.w	r5, r5, #6
 800c504:	d106      	bne.n	800c514 <_printf_common+0x48>
 800c506:	f104 0a19 	add.w	sl, r4, #25
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	6832      	ldr	r2, [r6, #0]
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	42ab      	cmp	r3, r5
 800c512:	dc26      	bgt.n	800c562 <_printf_common+0x96>
 800c514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c518:	1e13      	subs	r3, r2, #0
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	bf18      	it	ne
 800c51e:	2301      	movne	r3, #1
 800c520:	0692      	lsls	r2, r2, #26
 800c522:	d42b      	bmi.n	800c57c <_printf_common+0xb0>
 800c524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c528:	4649      	mov	r1, r9
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c0      	blx	r8
 800c52e:	3001      	adds	r0, #1
 800c530:	d01e      	beq.n	800c570 <_printf_common+0xa4>
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	68e5      	ldr	r5, [r4, #12]
 800c536:	6832      	ldr	r2, [r6, #0]
 800c538:	f003 0306 	and.w	r3, r3, #6
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	bf08      	it	eq
 800c540:	1aad      	subeq	r5, r5, r2
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	bf0c      	ite	eq
 800c548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c54c:	2500      	movne	r5, #0
 800c54e:	4293      	cmp	r3, r2
 800c550:	bfc4      	itt	gt
 800c552:	1a9b      	subgt	r3, r3, r2
 800c554:	18ed      	addgt	r5, r5, r3
 800c556:	2600      	movs	r6, #0
 800c558:	341a      	adds	r4, #26
 800c55a:	42b5      	cmp	r5, r6
 800c55c:	d11a      	bne.n	800c594 <_printf_common+0xc8>
 800c55e:	2000      	movs	r0, #0
 800c560:	e008      	b.n	800c574 <_printf_common+0xa8>
 800c562:	2301      	movs	r3, #1
 800c564:	4652      	mov	r2, sl
 800c566:	4649      	mov	r1, r9
 800c568:	4638      	mov	r0, r7
 800c56a:	47c0      	blx	r8
 800c56c:	3001      	adds	r0, #1
 800c56e:	d103      	bne.n	800c578 <_printf_common+0xac>
 800c570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c578:	3501      	adds	r5, #1
 800c57a:	e7c6      	b.n	800c50a <_printf_common+0x3e>
 800c57c:	18e1      	adds	r1, r4, r3
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	2030      	movs	r0, #48	; 0x30
 800c582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c586:	4422      	add	r2, r4
 800c588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c590:	3302      	adds	r3, #2
 800c592:	e7c7      	b.n	800c524 <_printf_common+0x58>
 800c594:	2301      	movs	r3, #1
 800c596:	4622      	mov	r2, r4
 800c598:	4649      	mov	r1, r9
 800c59a:	4638      	mov	r0, r7
 800c59c:	47c0      	blx	r8
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d0e6      	beq.n	800c570 <_printf_common+0xa4>
 800c5a2:	3601      	adds	r6, #1
 800c5a4:	e7d9      	b.n	800c55a <_printf_common+0x8e>
	...

0800c5a8 <_printf_i>:
 800c5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	4691      	mov	r9, r2
 800c5b0:	7e27      	ldrb	r7, [r4, #24]
 800c5b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5b4:	2f78      	cmp	r7, #120	; 0x78
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	469a      	mov	sl, r3
 800c5ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5be:	d807      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5c0:	2f62      	cmp	r7, #98	; 0x62
 800c5c2:	d80a      	bhi.n	800c5da <_printf_i+0x32>
 800c5c4:	2f00      	cmp	r7, #0
 800c5c6:	f000 80d8 	beq.w	800c77a <_printf_i+0x1d2>
 800c5ca:	2f58      	cmp	r7, #88	; 0x58
 800c5cc:	f000 80a3 	beq.w	800c716 <_printf_i+0x16e>
 800c5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5d8:	e03a      	b.n	800c650 <_printf_i+0xa8>
 800c5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5de:	2b15      	cmp	r3, #21
 800c5e0:	d8f6      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5e2:	a001      	add	r0, pc, #4	; (adr r0, 800c5e8 <_printf_i+0x40>)
 800c5e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c5e8:	0800c641 	.word	0x0800c641
 800c5ec:	0800c655 	.word	0x0800c655
 800c5f0:	0800c5d1 	.word	0x0800c5d1
 800c5f4:	0800c5d1 	.word	0x0800c5d1
 800c5f8:	0800c5d1 	.word	0x0800c5d1
 800c5fc:	0800c5d1 	.word	0x0800c5d1
 800c600:	0800c655 	.word	0x0800c655
 800c604:	0800c5d1 	.word	0x0800c5d1
 800c608:	0800c5d1 	.word	0x0800c5d1
 800c60c:	0800c5d1 	.word	0x0800c5d1
 800c610:	0800c5d1 	.word	0x0800c5d1
 800c614:	0800c761 	.word	0x0800c761
 800c618:	0800c685 	.word	0x0800c685
 800c61c:	0800c743 	.word	0x0800c743
 800c620:	0800c5d1 	.word	0x0800c5d1
 800c624:	0800c5d1 	.word	0x0800c5d1
 800c628:	0800c783 	.word	0x0800c783
 800c62c:	0800c5d1 	.word	0x0800c5d1
 800c630:	0800c685 	.word	0x0800c685
 800c634:	0800c5d1 	.word	0x0800c5d1
 800c638:	0800c5d1 	.word	0x0800c5d1
 800c63c:	0800c74b 	.word	0x0800c74b
 800c640:	680b      	ldr	r3, [r1, #0]
 800c642:	1d1a      	adds	r2, r3, #4
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	600a      	str	r2, [r1, #0]
 800c648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c650:	2301      	movs	r3, #1
 800c652:	e0a3      	b.n	800c79c <_printf_i+0x1f4>
 800c654:	6825      	ldr	r5, [r4, #0]
 800c656:	6808      	ldr	r0, [r1, #0]
 800c658:	062e      	lsls	r6, r5, #24
 800c65a:	f100 0304 	add.w	r3, r0, #4
 800c65e:	d50a      	bpl.n	800c676 <_printf_i+0xce>
 800c660:	6805      	ldr	r5, [r0, #0]
 800c662:	600b      	str	r3, [r1, #0]
 800c664:	2d00      	cmp	r5, #0
 800c666:	da03      	bge.n	800c670 <_printf_i+0xc8>
 800c668:	232d      	movs	r3, #45	; 0x2d
 800c66a:	426d      	negs	r5, r5
 800c66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c670:	485e      	ldr	r0, [pc, #376]	; (800c7ec <_printf_i+0x244>)
 800c672:	230a      	movs	r3, #10
 800c674:	e019      	b.n	800c6aa <_printf_i+0x102>
 800c676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c67a:	6805      	ldr	r5, [r0, #0]
 800c67c:	600b      	str	r3, [r1, #0]
 800c67e:	bf18      	it	ne
 800c680:	b22d      	sxthne	r5, r5
 800c682:	e7ef      	b.n	800c664 <_printf_i+0xbc>
 800c684:	680b      	ldr	r3, [r1, #0]
 800c686:	6825      	ldr	r5, [r4, #0]
 800c688:	1d18      	adds	r0, r3, #4
 800c68a:	6008      	str	r0, [r1, #0]
 800c68c:	0628      	lsls	r0, r5, #24
 800c68e:	d501      	bpl.n	800c694 <_printf_i+0xec>
 800c690:	681d      	ldr	r5, [r3, #0]
 800c692:	e002      	b.n	800c69a <_printf_i+0xf2>
 800c694:	0669      	lsls	r1, r5, #25
 800c696:	d5fb      	bpl.n	800c690 <_printf_i+0xe8>
 800c698:	881d      	ldrh	r5, [r3, #0]
 800c69a:	4854      	ldr	r0, [pc, #336]	; (800c7ec <_printf_i+0x244>)
 800c69c:	2f6f      	cmp	r7, #111	; 0x6f
 800c69e:	bf0c      	ite	eq
 800c6a0:	2308      	moveq	r3, #8
 800c6a2:	230a      	movne	r3, #10
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6aa:	6866      	ldr	r6, [r4, #4]
 800c6ac:	60a6      	str	r6, [r4, #8]
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	6821      	ldrge	r1, [r4, #0]
 800c6b4:	f021 0104 	bicge.w	r1, r1, #4
 800c6b8:	6021      	strge	r1, [r4, #0]
 800c6ba:	b90d      	cbnz	r5, 800c6c0 <_printf_i+0x118>
 800c6bc:	2e00      	cmp	r6, #0
 800c6be:	d04d      	beq.n	800c75c <_printf_i+0x1b4>
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ca:	5dc7      	ldrb	r7, [r0, r7]
 800c6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d0:	462f      	mov	r7, r5
 800c6d2:	42bb      	cmp	r3, r7
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	d9f4      	bls.n	800c6c2 <_printf_i+0x11a>
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d10b      	bne.n	800c6f4 <_printf_i+0x14c>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07df      	lsls	r7, r3, #31
 800c6e0:	d508      	bpl.n	800c6f4 <_printf_i+0x14c>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	2330      	movle	r3, #48	; 0x30
 800c6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c6f4:	1b92      	subs	r2, r2, r6
 800c6f6:	6122      	str	r2, [r4, #16]
 800c6f8:	f8cd a000 	str.w	sl, [sp]
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	aa03      	add	r2, sp, #12
 800c700:	4621      	mov	r1, r4
 800c702:	4640      	mov	r0, r8
 800c704:	f7ff fee2 	bl	800c4cc <_printf_common>
 800c708:	3001      	adds	r0, #1
 800c70a:	d14c      	bne.n	800c7a6 <_printf_i+0x1fe>
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c710:	b004      	add	sp, #16
 800c712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c716:	4835      	ldr	r0, [pc, #212]	; (800c7ec <_printf_i+0x244>)
 800c718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	680e      	ldr	r6, [r1, #0]
 800c720:	061f      	lsls	r7, r3, #24
 800c722:	f856 5b04 	ldr.w	r5, [r6], #4
 800c726:	600e      	str	r6, [r1, #0]
 800c728:	d514      	bpl.n	800c754 <_printf_i+0x1ac>
 800c72a:	07d9      	lsls	r1, r3, #31
 800c72c:	bf44      	itt	mi
 800c72e:	f043 0320 	orrmi.w	r3, r3, #32
 800c732:	6023      	strmi	r3, [r4, #0]
 800c734:	b91d      	cbnz	r5, 800c73e <_printf_i+0x196>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f023 0320 	bic.w	r3, r3, #32
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	2310      	movs	r3, #16
 800c740:	e7b0      	b.n	800c6a4 <_printf_i+0xfc>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	f043 0320 	orr.w	r3, r3, #32
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2378      	movs	r3, #120	; 0x78
 800c74c:	4828      	ldr	r0, [pc, #160]	; (800c7f0 <_printf_i+0x248>)
 800c74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c752:	e7e3      	b.n	800c71c <_printf_i+0x174>
 800c754:	065e      	lsls	r6, r3, #25
 800c756:	bf48      	it	mi
 800c758:	b2ad      	uxthmi	r5, r5
 800c75a:	e7e6      	b.n	800c72a <_printf_i+0x182>
 800c75c:	4616      	mov	r6, r2
 800c75e:	e7bb      	b.n	800c6d8 <_printf_i+0x130>
 800c760:	680b      	ldr	r3, [r1, #0]
 800c762:	6826      	ldr	r6, [r4, #0]
 800c764:	6960      	ldr	r0, [r4, #20]
 800c766:	1d1d      	adds	r5, r3, #4
 800c768:	600d      	str	r5, [r1, #0]
 800c76a:	0635      	lsls	r5, r6, #24
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	d501      	bpl.n	800c774 <_printf_i+0x1cc>
 800c770:	6018      	str	r0, [r3, #0]
 800c772:	e002      	b.n	800c77a <_printf_i+0x1d2>
 800c774:	0671      	lsls	r1, r6, #25
 800c776:	d5fb      	bpl.n	800c770 <_printf_i+0x1c8>
 800c778:	8018      	strh	r0, [r3, #0]
 800c77a:	2300      	movs	r3, #0
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	4616      	mov	r6, r2
 800c780:	e7ba      	b.n	800c6f8 <_printf_i+0x150>
 800c782:	680b      	ldr	r3, [r1, #0]
 800c784:	1d1a      	adds	r2, r3, #4
 800c786:	600a      	str	r2, [r1, #0]
 800c788:	681e      	ldr	r6, [r3, #0]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	2100      	movs	r1, #0
 800c78e:	4630      	mov	r0, r6
 800c790:	f7f3 fd26 	bl	80001e0 <memchr>
 800c794:	b108      	cbz	r0, 800c79a <_printf_i+0x1f2>
 800c796:	1b80      	subs	r0, r0, r6
 800c798:	6060      	str	r0, [r4, #4]
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a4:	e7a8      	b.n	800c6f8 <_printf_i+0x150>
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	47d0      	blx	sl
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d0ab      	beq.n	800c70c <_printf_i+0x164>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	079b      	lsls	r3, r3, #30
 800c7b8:	d413      	bmi.n	800c7e2 <_printf_i+0x23a>
 800c7ba:	68e0      	ldr	r0, [r4, #12]
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	4298      	cmp	r0, r3
 800c7c0:	bfb8      	it	lt
 800c7c2:	4618      	movlt	r0, r3
 800c7c4:	e7a4      	b.n	800c710 <_printf_i+0x168>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	47d0      	blx	sl
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d09b      	beq.n	800c70c <_printf_i+0x164>
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	9903      	ldr	r1, [sp, #12]
 800c7da:	1a5b      	subs	r3, r3, r1
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dcf2      	bgt.n	800c7c6 <_printf_i+0x21e>
 800c7e0:	e7eb      	b.n	800c7ba <_printf_i+0x212>
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	f104 0619 	add.w	r6, r4, #25
 800c7e8:	e7f5      	b.n	800c7d6 <_printf_i+0x22e>
 800c7ea:	bf00      	nop
 800c7ec:	0800f52d 	.word	0x0800f52d
 800c7f0:	0800f53e 	.word	0x0800f53e

0800c7f4 <memmove>:
 800c7f4:	4288      	cmp	r0, r1
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	eb01 0402 	add.w	r4, r1, r2
 800c7fc:	d902      	bls.n	800c804 <memmove+0x10>
 800c7fe:	4284      	cmp	r4, r0
 800c800:	4623      	mov	r3, r4
 800c802:	d807      	bhi.n	800c814 <memmove+0x20>
 800c804:	1e43      	subs	r3, r0, #1
 800c806:	42a1      	cmp	r1, r4
 800c808:	d008      	beq.n	800c81c <memmove+0x28>
 800c80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c812:	e7f8      	b.n	800c806 <memmove+0x12>
 800c814:	4402      	add	r2, r0
 800c816:	4601      	mov	r1, r0
 800c818:	428a      	cmp	r2, r1
 800c81a:	d100      	bne.n	800c81e <memmove+0x2a>
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c826:	e7f7      	b.n	800c818 <memmove+0x24>

0800c828 <_free_r>:
 800c828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c82a:	2900      	cmp	r1, #0
 800c82c:	d048      	beq.n	800c8c0 <_free_r+0x98>
 800c82e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c832:	9001      	str	r0, [sp, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f1a1 0404 	sub.w	r4, r1, #4
 800c83a:	bfb8      	it	lt
 800c83c:	18e4      	addlt	r4, r4, r3
 800c83e:	f000 f8d3 	bl	800c9e8 <__malloc_lock>
 800c842:	4a20      	ldr	r2, [pc, #128]	; (800c8c4 <_free_r+0x9c>)
 800c844:	9801      	ldr	r0, [sp, #4]
 800c846:	6813      	ldr	r3, [r2, #0]
 800c848:	4615      	mov	r5, r2
 800c84a:	b933      	cbnz	r3, 800c85a <_free_r+0x32>
 800c84c:	6063      	str	r3, [r4, #4]
 800c84e:	6014      	str	r4, [r2, #0]
 800c850:	b003      	add	sp, #12
 800c852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c856:	f000 b8cd 	b.w	800c9f4 <__malloc_unlock>
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	d90b      	bls.n	800c876 <_free_r+0x4e>
 800c85e:	6821      	ldr	r1, [r4, #0]
 800c860:	1862      	adds	r2, r4, r1
 800c862:	4293      	cmp	r3, r2
 800c864:	bf04      	itt	eq
 800c866:	681a      	ldreq	r2, [r3, #0]
 800c868:	685b      	ldreq	r3, [r3, #4]
 800c86a:	6063      	str	r3, [r4, #4]
 800c86c:	bf04      	itt	eq
 800c86e:	1852      	addeq	r2, r2, r1
 800c870:	6022      	streq	r2, [r4, #0]
 800c872:	602c      	str	r4, [r5, #0]
 800c874:	e7ec      	b.n	800c850 <_free_r+0x28>
 800c876:	461a      	mov	r2, r3
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	b10b      	cbz	r3, 800c880 <_free_r+0x58>
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d9fa      	bls.n	800c876 <_free_r+0x4e>
 800c880:	6811      	ldr	r1, [r2, #0]
 800c882:	1855      	adds	r5, r2, r1
 800c884:	42a5      	cmp	r5, r4
 800c886:	d10b      	bne.n	800c8a0 <_free_r+0x78>
 800c888:	6824      	ldr	r4, [r4, #0]
 800c88a:	4421      	add	r1, r4
 800c88c:	1854      	adds	r4, r2, r1
 800c88e:	42a3      	cmp	r3, r4
 800c890:	6011      	str	r1, [r2, #0]
 800c892:	d1dd      	bne.n	800c850 <_free_r+0x28>
 800c894:	681c      	ldr	r4, [r3, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	6053      	str	r3, [r2, #4]
 800c89a:	4421      	add	r1, r4
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	e7d7      	b.n	800c850 <_free_r+0x28>
 800c8a0:	d902      	bls.n	800c8a8 <_free_r+0x80>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	e7d3      	b.n	800c850 <_free_r+0x28>
 800c8a8:	6825      	ldr	r5, [r4, #0]
 800c8aa:	1961      	adds	r1, r4, r5
 800c8ac:	428b      	cmp	r3, r1
 800c8ae:	bf04      	itt	eq
 800c8b0:	6819      	ldreq	r1, [r3, #0]
 800c8b2:	685b      	ldreq	r3, [r3, #4]
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	bf04      	itt	eq
 800c8b8:	1949      	addeq	r1, r1, r5
 800c8ba:	6021      	streq	r1, [r4, #0]
 800c8bc:	6054      	str	r4, [r2, #4]
 800c8be:	e7c7      	b.n	800c850 <_free_r+0x28>
 800c8c0:	b003      	add	sp, #12
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	20008cb8 	.word	0x20008cb8

0800c8c8 <_malloc_r>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	1ccd      	adds	r5, r1, #3
 800c8cc:	f025 0503 	bic.w	r5, r5, #3
 800c8d0:	3508      	adds	r5, #8
 800c8d2:	2d0c      	cmp	r5, #12
 800c8d4:	bf38      	it	cc
 800c8d6:	250c      	movcc	r5, #12
 800c8d8:	2d00      	cmp	r5, #0
 800c8da:	4606      	mov	r6, r0
 800c8dc:	db01      	blt.n	800c8e2 <_malloc_r+0x1a>
 800c8de:	42a9      	cmp	r1, r5
 800c8e0:	d903      	bls.n	800c8ea <_malloc_r+0x22>
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	6033      	str	r3, [r6, #0]
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ea:	f000 f87d 	bl	800c9e8 <__malloc_lock>
 800c8ee:	4921      	ldr	r1, [pc, #132]	; (800c974 <_malloc_r+0xac>)
 800c8f0:	680a      	ldr	r2, [r1, #0]
 800c8f2:	4614      	mov	r4, r2
 800c8f4:	b99c      	cbnz	r4, 800c91e <_malloc_r+0x56>
 800c8f6:	4f20      	ldr	r7, [pc, #128]	; (800c978 <_malloc_r+0xb0>)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	b923      	cbnz	r3, 800c906 <_malloc_r+0x3e>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4630      	mov	r0, r6
 800c900:	f000 f862 	bl	800c9c8 <_sbrk_r>
 800c904:	6038      	str	r0, [r7, #0]
 800c906:	4629      	mov	r1, r5
 800c908:	4630      	mov	r0, r6
 800c90a:	f000 f85d 	bl	800c9c8 <_sbrk_r>
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	d123      	bne.n	800c95a <_malloc_r+0x92>
 800c912:	230c      	movs	r3, #12
 800c914:	6033      	str	r3, [r6, #0]
 800c916:	4630      	mov	r0, r6
 800c918:	f000 f86c 	bl	800c9f4 <__malloc_unlock>
 800c91c:	e7e3      	b.n	800c8e6 <_malloc_r+0x1e>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	1b5b      	subs	r3, r3, r5
 800c922:	d417      	bmi.n	800c954 <_malloc_r+0x8c>
 800c924:	2b0b      	cmp	r3, #11
 800c926:	d903      	bls.n	800c930 <_malloc_r+0x68>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	441c      	add	r4, r3
 800c92c:	6025      	str	r5, [r4, #0]
 800c92e:	e004      	b.n	800c93a <_malloc_r+0x72>
 800c930:	6863      	ldr	r3, [r4, #4]
 800c932:	42a2      	cmp	r2, r4
 800c934:	bf0c      	ite	eq
 800c936:	600b      	streq	r3, [r1, #0]
 800c938:	6053      	strne	r3, [r2, #4]
 800c93a:	4630      	mov	r0, r6
 800c93c:	f000 f85a 	bl	800c9f4 <__malloc_unlock>
 800c940:	f104 000b 	add.w	r0, r4, #11
 800c944:	1d23      	adds	r3, r4, #4
 800c946:	f020 0007 	bic.w	r0, r0, #7
 800c94a:	1ac2      	subs	r2, r0, r3
 800c94c:	d0cc      	beq.n	800c8e8 <_malloc_r+0x20>
 800c94e:	1a1b      	subs	r3, r3, r0
 800c950:	50a3      	str	r3, [r4, r2]
 800c952:	e7c9      	b.n	800c8e8 <_malloc_r+0x20>
 800c954:	4622      	mov	r2, r4
 800c956:	6864      	ldr	r4, [r4, #4]
 800c958:	e7cc      	b.n	800c8f4 <_malloc_r+0x2c>
 800c95a:	1cc4      	adds	r4, r0, #3
 800c95c:	f024 0403 	bic.w	r4, r4, #3
 800c960:	42a0      	cmp	r0, r4
 800c962:	d0e3      	beq.n	800c92c <_malloc_r+0x64>
 800c964:	1a21      	subs	r1, r4, r0
 800c966:	4630      	mov	r0, r6
 800c968:	f000 f82e 	bl	800c9c8 <_sbrk_r>
 800c96c:	3001      	adds	r0, #1
 800c96e:	d1dd      	bne.n	800c92c <_malloc_r+0x64>
 800c970:	e7cf      	b.n	800c912 <_malloc_r+0x4a>
 800c972:	bf00      	nop
 800c974:	20008cb8 	.word	0x20008cb8
 800c978:	20008cbc 	.word	0x20008cbc

0800c97c <_realloc_r>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	4607      	mov	r7, r0
 800c980:	4614      	mov	r4, r2
 800c982:	460e      	mov	r6, r1
 800c984:	b921      	cbnz	r1, 800c990 <_realloc_r+0x14>
 800c986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c98a:	4611      	mov	r1, r2
 800c98c:	f7ff bf9c 	b.w	800c8c8 <_malloc_r>
 800c990:	b922      	cbnz	r2, 800c99c <_realloc_r+0x20>
 800c992:	f7ff ff49 	bl	800c828 <_free_r>
 800c996:	4625      	mov	r5, r4
 800c998:	4628      	mov	r0, r5
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	f000 f830 	bl	800ca00 <_malloc_usable_size_r>
 800c9a0:	42a0      	cmp	r0, r4
 800c9a2:	d20f      	bcs.n	800c9c4 <_realloc_r+0x48>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f7ff ff8e 	bl	800c8c8 <_malloc_r>
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d0f2      	beq.n	800c998 <_realloc_r+0x1c>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	f7ff fbe3 	bl	800c180 <memcpy>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff ff33 	bl	800c828 <_free_r>
 800c9c2:	e7e9      	b.n	800c998 <_realloc_r+0x1c>
 800c9c4:	4635      	mov	r5, r6
 800c9c6:	e7e7      	b.n	800c998 <_realloc_r+0x1c>

0800c9c8 <_sbrk_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d06      	ldr	r5, [pc, #24]	; (800c9e4 <_sbrk_r+0x1c>)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	602b      	str	r3, [r5, #0]
 800c9d4:	f7f4 fb5c 	bl	8001090 <_sbrk>
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	d102      	bne.n	800c9e2 <_sbrk_r+0x1a>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	b103      	cbz	r3, 800c9e2 <_sbrk_r+0x1a>
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	2000adbc 	.word	0x2000adbc

0800c9e8 <__malloc_lock>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__malloc_lock+0x8>)
 800c9ea:	f000 b811 	b.w	800ca10 <__retarget_lock_acquire_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	2000adc4 	.word	0x2000adc4

0800c9f4 <__malloc_unlock>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__malloc_unlock+0x8>)
 800c9f6:	f000 b80c 	b.w	800ca12 <__retarget_lock_release_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	2000adc4 	.word	0x2000adc4

0800ca00 <_malloc_usable_size_r>:
 800ca00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca04:	1f18      	subs	r0, r3, #4
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bfbc      	itt	lt
 800ca0a:	580b      	ldrlt	r3, [r1, r0]
 800ca0c:	18c0      	addlt	r0, r0, r3
 800ca0e:	4770      	bx	lr

0800ca10 <__retarget_lock_acquire_recursive>:
 800ca10:	4770      	bx	lr

0800ca12 <__retarget_lock_release_recursive>:
 800ca12:	4770      	bx	lr

0800ca14 <_init>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	bf00      	nop
 800ca18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1a:	bc08      	pop	{r3}
 800ca1c:	469e      	mov	lr, r3
 800ca1e:	4770      	bx	lr

0800ca20 <_fini>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	bf00      	nop
 800ca24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca26:	bc08      	pop	{r3}
 800ca28:	469e      	mov	lr, r3
 800ca2a:	4770      	bx	lr
