
TCRS_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b24  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f480  0800f480  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f480  0800f480  0001f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f488  0800f488  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f488  0800f488  0001f488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f48c  0800f48c  0001f48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ace0  2000008c  0800f51c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad6c  0800f51c  0002ad6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263c4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f5b  00000000  00000000  00046480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  0004b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  0004d018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c757  00000000  00000000  0004ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ca8  00000000  00000000  0006b167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b24  00000000  00000000  0008ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a0  00000000  00000000  0012d988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c944 	.word	0x0800c944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800c944 	.word	0x0800c944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_Z18start_display_taskPv>:
#include "../st7735/fonts.h"
#include "../st7735/testimg.h"



void start_display_task(void *argument){
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af04      	add	r7, sp, #16
 800057e:	6078      	str	r0, [r7, #4]


	for(;;){


		ST7735_FillScreen(ST7735_BLACK);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 ffd9 	bl	8001538 <_Z17ST7735_FillScreent>
//		for(int y = 0; y < ST7735_HEIGHT; y++) {
//			ST7735_DrawPixel(0, y, ST7735_RED);
//			ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
//		}

		osDelay(300);
 8000586:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800058a:	f008 fa4c 	bl	8008a26 <osDelay>

		// Check fonts
		ST7735_FillScreen(ST7735_BLACK);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 ffd2 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8000594:	4b68      	ldr	r3, [pc, #416]	; (8000738 <_Z18start_display_taskPv+0x1c0>)
 8000596:	2200      	movs	r2, #0
 8000598:	9202      	str	r2, [sp, #8]
 800059a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a65      	ldr	r2, [pc, #404]	; (800073c <_Z18start_display_taskPv+0x1c4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 ff08 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	9202      	str	r2, [sp, #8]
 80005b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a60      	ldr	r2, [pc, #384]	; (8000744 <_Z18start_display_taskPv+0x1cc>)
 80005c4:	211e      	movs	r1, #30
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fefa 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80005cc:	4b5e      	ldr	r3, [pc, #376]	; (8000748 <_Z18start_display_taskPv+0x1d0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	9202      	str	r2, [sp, #8]
 80005d2:	221f      	movs	r2, #31
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a5b      	ldr	r2, [pc, #364]	; (800074c <_Z18start_display_taskPv+0x1d4>)
 80005de:	2154      	movs	r1, #84	; 0x54
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 feed 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f008 fa1d 	bl	8008a26 <osDelay>

		// Check colors
		ST7735_FillScreen(ST7735_BLACK);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ffa3 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80005f2:	4b53      	ldr	r3, [pc, #332]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	9202      	str	r2, [sp, #8]
 80005f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a52      	ldr	r2, [pc, #328]	; (8000750 <_Z18start_display_taskPv+0x1d8>)
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fed9 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f008 fa09 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_BLUE);
 8000614:	201f      	movs	r0, #31
 8000616:	f000 ff8f 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 800061a:	4b49      	ldr	r3, [pc, #292]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 800061c:	221f      	movs	r2, #31
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	2200      	movs	r2, #0
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a4a      	ldr	r2, [pc, #296]	; (8000754 <_Z18start_display_taskPv+0x1dc>)
 800062c:	2100      	movs	r1, #0
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fec6 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000634:	20c8      	movs	r0, #200	; 0xc8
 8000636:	f008 f9f6 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_RED);
 800063a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800063e:	f000 ff7b 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 8000642:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000644:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000648:	9202      	str	r2, [sp, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <_Z18start_display_taskPv+0x1e0>)
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f000 feb1 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f008 f9e1 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_GREEN);
 8000664:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000668:	f000 ff66 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 800066e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000672:	9202      	str	r2, [sp, #8]
 8000674:	2200      	movs	r2, #0
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	9200      	str	r2, [sp, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a37      	ldr	r2, [pc, #220]	; (800075c <_Z18start_display_taskPv+0x1e4>)
 8000680:	2100      	movs	r1, #0
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fe9c 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f008 f9cc 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_CYAN);
 800068e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000692:	f000 ff51 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000698:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800069c:	9202      	str	r2, [sp, #8]
 800069e:	2200      	movs	r2, #0
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <_Z18start_display_taskPv+0x1e8>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fe87 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 80006b2:	20c8      	movs	r0, #200	; 0xc8
 80006b4:	f008 f9b7 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_MAGENTA);
 80006b8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80006bc:	f000 ff3c 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80006c2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80006c6:	9202      	str	r2, [sp, #8]
 80006c8:	2200      	movs	r2, #0
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <_Z18start_display_taskPv+0x1ec>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fe72 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 80006dc:	20c8      	movs	r0, #200	; 0xc8
 80006de:	f008 f9a2 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_YELLOW);
 80006e2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80006e6:	f000 ff27 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 80006ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80006f0:	9202      	str	r2, [sp, #8]
 80006f2:	2200      	movs	r2, #0
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <_Z18start_display_taskPv+0x1f0>)
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fe5d 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f008 f98d 	bl	8008a26 <osDelay>

		ST7735_FillScreen(ST7735_WHITE);
 800070c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000710:	f000 ff12 	bl	8001538 <_Z17ST7735_FillScreent>
		ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <_Z18start_display_taskPv+0x1c8>)
 8000716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071a:	9202      	str	r2, [sp, #8]
 800071c:	2200      	movs	r2, #0
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	9200      	str	r2, [sp, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <_Z18start_display_taskPv+0x1f4>)
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fe48 	bl	80013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>
		osDelay(200);
 8000730:	20c8      	movs	r0, #200	; 0xc8
 8000732:	f008 f978 	bl	8008a26 <osDelay>
		ST7735_FillScreen(ST7735_BLACK);
 8000736:	e723      	b.n	8000580 <_Z18start_display_taskPv+0x8>
 8000738:	20000004 	.word	0x20000004
 800073c:	0800c95c 	.word	0x0800c95c
 8000740:	2000000c 	.word	0x2000000c
 8000744:	0800c990 	.word	0x0800c990
 8000748:	20000014 	.word	0x20000014
 800074c:	0800c9b0 	.word	0x0800c9b0
 8000750:	0800c9bc 	.word	0x0800c9bc
 8000754:	0800c9c4 	.word	0x0800c9c4
 8000758:	0800c9cc 	.word	0x0800c9cc
 800075c:	0800c9d0 	.word	0x0800c9d0
 8000760:	0800c9d8 	.word	0x0800c9d8
 8000764:	0800c9e0 	.word	0x0800c9e0
 8000768:	0800c9e8 	.word	0x0800c9e8
 800076c:	0800c9f0 	.word	0x0800c9f0

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fef2 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f83c 	bl	80007f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f930 	bl	80009e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000780:	f000 f906 	bl	8000990 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8000784:	f000 f8c8 	bl	8000918 <_ZL12MX_SPI1_Initv>
  MX_SDIO_SD_Init();
 8000788:	f000 f8a6 	bl	80008d8 <_ZL15MX_SDIO_SD_Initv>
  MX_FATFS_Init();
 800078c:	f004 ffde 	bl	800574c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000790:	f000 fd88 	bl	80012a4 <_Z11ST7735_Initv>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000794:	f008 f834 	bl	8008800 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <main+0x60>)
 800079a:	2100      	movs	r1, #0
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x64>)
 800079e:	f008 f8b0 	bl	8008902 <osThreadNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <main+0x68>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* creation of display_task */
  display_taskHandle = osThreadNew(start_display_task, NULL, &display_task_attributes);
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <main+0x6c>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <main+0x70>)
 80007ae:	f008 f8a8 	bl	8008902 <osThreadNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <main+0x74>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* creation of sd_saver_task */
  sd_saver_taskHandle = osThreadNew(start_sd_saver_task, NULL, &sd_saver_task_attributes);
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <main+0x78>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <main+0x7c>)
 80007be:	f008 f8a0 	bl	8008902 <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <main+0x80>)
 80007c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007c8:	f008 f860 	bl	800888c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x5c>
 80007ce:	bf00      	nop
 80007d0:	0800caa0 	.word	0x0800caa0
 80007d4:	08000ac5 	.word	0x08000ac5
 80007d8:	20000244 	.word	0x20000244
 80007dc:	0800cac4 	.word	0x0800cac4
 80007e0:	08000579 	.word	0x08000579
 80007e4:	20000248 	.word	0x20000248
 80007e8:	0800cae8 	.word	0x0800cae8
 80007ec:	08000b15 	.word	0x08000b15
 80007f0:	200022a8 	.word	0x200022a8

080007f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f00b fc62 	bl	800c0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <_Z18SystemClock_Configv+0xdc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <_Z18SystemClock_Configv+0xe0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000868:	2348      	movs	r3, #72	; 0x48
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000870:	2303      	movs	r3, #3
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fd25 	bl	80022c8 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800088e:	f000 f93b 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2102      	movs	r1, #2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 ff82 	bl	80027b8 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80008c4:	f000 f920 	bl	8000b08 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80008e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000902:	220a      	movs	r2, #10
 8000904:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	200000a8 	.word	0x200000a8
 8000914:	40012c00 	.word	0x40012c00

08000918 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <_ZL12MX_SPI1_Initv+0x74>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 8000964:	220a      	movs	r2, #10
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <_ZL12MX_SPI1_Initv+0x70>)
 800096a:	f003 fc6c 	bl	8004246 <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800097e:	f000 f8c3 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001ec 	.word	0x200001ec
 800098c:	40013000 	.word	0x40013000

08000990 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_ZL11MX_DMA_Initv+0x4c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <_ZL11MX_DMA_Initv+0x4c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <_ZL11MX_DMA_Initv+0x4c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	203b      	movs	r0, #59	; 0x3b
 80009b8:	f000 feee 	bl	8001798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009bc:	203b      	movs	r0, #59	; 0x3b
 80009be:	f000 ff07 	bl	80017d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2045      	movs	r0, #69	; 0x45
 80009c8:	f000 fee6 	bl	8001798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009cc:	2045      	movs	r0, #69	; 0x45
 80009ce:	f000 feff 	bl	80017d0 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	211c      	movs	r1, #28
 8000a4e:	481b      	ldr	r0, [pc, #108]	; (8000abc <_ZL12MX_GPIO_Initv+0xdc>)
 8000a50:	f001 fc06 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2107      	movs	r1, #7
 8000a58:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000a5a:	f001 fc01 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DISPLAY_CS_Pin;
 8000a5e:	231c      	movs	r3, #28
 8000a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <_ZL12MX_GPIO_Initv+0xdc>)
 8000a76:	f001 fa57 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_COMAND_Pin DISPLAY_RESET_Pin DISPLAY_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000a92:	f001 fa49 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_1V8_Pin */
  GPIO_InitStruct.Pin = EN_1V8_Pin;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EN_1V8_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xe0>)
 8000aac:	f001 fa3c 	bl	8001f28 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f007 ffa9 	bl	8008a26 <osDelay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <_Z16StartDefaultTaskPv+0x1c>)
 8000ad8:	f001 fbdb 	bl	8002292 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000adc:	e7f6      	b.n	8000acc <_Z16StartDefaultTaskPv+0x8>
 8000ade:	bf00      	nop
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af6:	f000 fd53 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40014800 	.word	0x40014800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <_Z19start_sd_saver_taskPv>:

unsigned int byteswritten = 0;



void start_sd_saver_task(void *argument){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]


	char string_to_save[64];

	unsigned int counter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c

	//FATFS_LinkDriver(&SD_Driver, SDPath);

	initFileSystem();
 8000b20:	f000 f826 	bl	8000b70 <_Z14initFileSystemv>

	for(;;){

		auto size = snprintf(string_to_save, 64, "zapisuje dane %d, \n\r", counter++);
 8000b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000b2a:	f107 0008 	add.w	r0, r7, #8
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <_Z19start_sd_saver_taskPv+0x4c>)
 8000b30:	2140      	movs	r1, #64	; 0x40
 8000b32:	f00b fad3 	bl	800c0dc <sniprintf>
 8000b36:	64b8      	str	r0, [r7, #72]	; 0x48
		f_write(&SDFile, string_to_save, size, &byteswritten);
 8000b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b3a:	f107 0108 	add.w	r1, r7, #8
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <_Z19start_sd_saver_taskPv+0x50>)
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <_Z19start_sd_saver_taskPv+0x54>)
 8000b42:	f007 f8bc 	bl	8007cbe <f_write>

		f_sync(&SDFile);
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <_Z19start_sd_saver_taskPv+0x54>)
 8000b48:	f007 fa7c 	bl	8008044 <f_sync>

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <_Z19start_sd_saver_taskPv+0x58>)
 8000b50:	f001 fb9f 	bl	8002292 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b58:	f007 ff65 	bl	8008a26 <osDelay>
	}
 8000b5c:	e7e2      	b.n	8000b24 <_Z19start_sd_saver_taskPv+0x10>
 8000b5e:	bf00      	nop
 8000b60:	0800ca24 	.word	0x0800ca24
 8000b64:	20004308 	.word	0x20004308
 8000b68:	20008cb4 	.word	0x20008cb4
 8000b6c:	40020000 	.word	0x40020000

08000b70 <_Z14initFileSystemv>:

}


FRESULT initFileSystem() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

	FRESULT res = FRESULT::FR_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]

	res = f_mount(&SDFatFS, SDPath, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <_Z14initFileSystemv+0x58>)
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <_Z14initFileSystemv+0x5c>)
 8000b80:	f006 fe66 	bl	8007850 <f_mount>
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]

		 uint8_t val = BSP_SD_IsDetected();
 8000b88:	f004 fe97 	bl	80058ba <BSP_SD_IsDetected>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71bb      	strb	r3, [r7, #6]
		 GPIO_PinState val2 = HAL_GPIO_ReadPin(EN_1V8_GPIO_Port, EN_1V8_Pin);
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <_Z14initFileSystemv+0x60>)
 8000b96:	f001 fb4b 	bl	8002230 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	717b      	strb	r3, [r7, #5]

	res =  f_open(&SDFile, "t.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b9e:	2232      	movs	r2, #50	; 0x32
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <_Z14initFileSystemv+0x64>)
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <_Z14initFileSystemv+0x68>)
 8000ba4:	f006 feb8 	bl	8007918 <f_open>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]


	res = f_lseek(&SDFile, f_size(&SDFile));
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <_Z14initFileSystemv+0x68>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <_Z14initFileSystemv+0x68>)
 8000bb4:	f007 facf 	bl	8008156 <f_lseek>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]

	return res;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20008cb0 	.word	0x20008cb0
 8000bcc:	20009ce4 	.word	0x20009ce4
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	0800ca3c 	.word	0x0800ca3c
 8000bd8:	20008cb4 	.word	0x20008cb4

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x54>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <HAL_MspInit+0x54>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x54>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_MspInit+0x54>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_MspInit+0x54>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_MspInit+0x54>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	f06f 0001 	mvn.w	r0, #1
 8000c22:	f000 fdb9 	bl	8001798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a70      	ldr	r2, [pc, #448]	; (8000e14 <HAL_SD_MspInit+0x1e0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f040 80da 	bne.w	8000e0c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	4b6e      	ldr	r3, [pc, #440]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	4a6d      	ldr	r2, [pc, #436]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c66:	6453      	str	r3, [r2, #68]	; 0x44
 8000c68:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b67      	ldr	r3, [pc, #412]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a66      	ldr	r2, [pc, #408]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b64      	ldr	r3, [pc, #400]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b60      	ldr	r3, [pc, #384]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a5f      	ldr	r2, [pc, #380]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <HAL_SD_MspInit+0x1e4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000cac:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4854      	ldr	r0, [pc, #336]	; (8000e1c <HAL_SD_MspInit+0x1e8>)
 8000cca:	f001 f92d 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	484d      	ldr	r0, [pc, #308]	; (8000e20 <HAL_SD_MspInit+0x1ec>)
 8000cec:	f001 f91c 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cf0:	2330      	movs	r3, #48	; 0x30
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d00:	230c      	movs	r3, #12
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4845      	ldr	r0, [pc, #276]	; (8000e20 <HAL_SD_MspInit+0x1ec>)
 8000d0c:	f001 f90c 	bl	8001f28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d10:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d12:	4a45      	ldr	r2, [pc, #276]	; (8000e28 <HAL_SD_MspInit+0x1f4>)
 8000d14:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d32:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d40:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d44:	2220      	movs	r2, #32
 8000d46:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d62:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d6a:	482e      	ldr	r0, [pc, #184]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d6c:	f000 fd3e 	bl	80017ec <HAL_DMA_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000d76:	f7ff fec7 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <HAL_SD_MspInit+0x1f0>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000d88:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_SD_MspInit+0x1fc>)
 8000d8a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dba:	2220      	movs	r2, #32
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dcc:	2203      	movs	r2, #3
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000dda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000de2:	f000 fd03 	bl	80017ec <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000dec:	f7ff fe8c 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_SD_MspInit+0x1f8>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2105      	movs	r1, #5
 8000e00:	2031      	movs	r0, #49	; 0x31
 8000e02:	f000 fcc9 	bl	8001798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e06:	2031      	movs	r0, #49	; 0x31
 8000e08:	f000 fce2 	bl	80017d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40012c00 	.word	0x40012c00
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	40026458 	.word	0x40026458
 8000e2c:	2000018c 	.word	0x2000018c
 8000e30:	400264a0 	.word	0x400264a0

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e8e:	23a0      	movs	r3, #160	; 0xa0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f001 f83d 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	201a      	movs	r0, #26
 8000eda:	f000 fc5d 	bl	8001798 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ede:	201a      	movs	r0, #26
 8000ee0:	f000 fc76 	bl	80017d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_InitTick+0xa0>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_InitTick+0xa0>)
 8000eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_InitTick+0xa0>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f00:	f107 0210 	add.w	r2, r7, #16
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fe3a 	bl	8002b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f10:	f001 fe24 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8000f14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	3b01      	subs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_InitTick+0xac>)
 8000f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f30:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f46:	f003 fc0d 	bl	8004764 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f52:	f003 fc61 	bl	8004818 <HAL_TIM_Base_Start_IT>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	431bde83 	.word	0x431bde83
 8000f6c:	20008c60 	.word	0x20008c60
 8000f70:	40014800 	.word	0x40014800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fa6:	f003 fc99 	bl	80048dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20008c60 	.word	0x20008c60

08000fb4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <SDIO_IRQHandler+0x10>)
 8000fba:	f002 f88b 	bl	80030d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000a8 	.word	0x200000a8

08000fc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA2_Stream3_IRQHandler+0x10>)
 8000fce:	f000 fd35 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000012c 	.word	0x2000012c

08000fdc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA2_Stream6_IRQHandler+0x10>)
 8000fe2:	f000 fd2b 	bl	8001a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000018c 	.word	0x2000018c

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f00b f81c 	bl	800c05c <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000430c 	.word	0x2000430c
 8001058:	2000ad70 	.word	0x2000ad70

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f00a ffdb 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fb5d 	bl	8000770 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010c4:	0800f490 	.word	0x0800f490
  ldr r2, =_sbss
 80010c8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80010cc:	2000ad6c 	.word	0x2000ad6c

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <_ZL13ST7735_Selectv>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2110      	movs	r1, #16
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <_ZL13ST7735_Selectv+0x14>)
 80010de:	f001 f8bf 	bl	8002260 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020000 	.word	0x40020000

080010ec <_Z15ST7735_Unselectv>:

void ST7735_Unselect() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <_Z15ST7735_Unselectv+0x14>)
 80010f6:	f001 f8b3 	bl	8002260 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020000 	.word	0x40020000

08001104 <_ZL12ST7735_Resetv>:

static void ST7735_Reset() {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2102      	movs	r1, #2
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <_ZL12ST7735_Resetv+0x24>)
 800110e:	f001 f8a7 	bl	8002260 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001112:	2005      	movs	r0, #5
 8001114:	f000 fa64 	bl	80015e0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <_ZL12ST7735_Resetv+0x24>)
 800111e:	f001 f89f 	bl	8002260 <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020400 	.word	0x40020400

0800112c <_ZL19ST7735_WriteCommandh>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <_ZL19ST7735_WriteCommandh+0x2c>)
 800113c:	f001 f890 	bl	8002260 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001140:	1df9      	adds	r1, r7, #7
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	2201      	movs	r2, #1
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <_ZL19ST7735_WriteCommandh+0x30>)
 800114a:	f003 f905 	bl	8004358 <HAL_SPI_Transmit>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020400 	.word	0x40020400
 800115c:	200001ec 	.word	0x200001ec

08001160 <_ZL16ST7735_WriteDataPhj>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2101      	movs	r1, #1
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <_ZL16ST7735_WriteDataPhj+0x2c>)
 8001170:	f001 f876 	bl	8002260 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b29a      	uxth	r2, r3
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <_ZL16ST7735_WriteDataPhj+0x30>)
 8001180:	f003 f8ea 	bl	8004358 <HAL_SPI_Transmit>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020400 	.word	0x40020400
 8001190:	200001ec 	.word	0x200001ec

08001194 <_ZL25ST7735_ExecuteCommandListPKh>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	73fa      	strb	r2, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d035      	beq.n	8001226 <_ZL25ST7735_ExecuteCommandListPKh+0x92>
        uint8_t cmd = *addr++;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffb0 	bl	800112c <_ZL19ST7735_WriteCommandh>

        numArgs = *addr++;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80011e0:	7abb      	ldrb	r3, [r7, #10]
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <_ZL25ST7735_ExecuteCommandListPKh+0x6c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80011ee:	7abb      	ldrb	r3, [r7, #10]
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb4 	bl	8001160 <_ZL16ST7735_WriteDataPhj>
            addr += numArgs;
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001200:	89bb      	ldrh	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0cf      	beq.n	80011a6 <_ZL25ST7735_ExecuteCommandListPKh+0x12>
            ms = *addr++;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d102      	bne.n	800121c <_ZL25ST7735_ExecuteCommandListPKh+0x88>
 8001216:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121a:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f9de 	bl	80015e0 <HAL_Delay>
    while(numCommands--) {
 8001224:	e7bf      	b.n	80011a6 <_ZL25ST7735_ExecuteCommandListPKh+0x12>
        }
    }
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZL23ST7735_SetAddressWindowhhhh>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800122e:	b590      	push	{r4, r7, lr}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	4604      	mov	r4, r0
 8001236:	4608      	mov	r0, r1
 8001238:	4611      	mov	r1, r2
 800123a:	461a      	mov	r2, r3
 800123c:	4623      	mov	r3, r4
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	4603      	mov	r3, r0
 8001242:	71bb      	strb	r3, [r7, #6]
 8001244:	460b      	mov	r3, r1
 8001246:	717b      	strb	r3, [r7, #5]
 8001248:	4613      	mov	r3, r2
 800124a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800124c:	202a      	movs	r0, #42	; 0x2a
 800124e:	f7ff ff6d 	bl	800112c <_ZL19ST7735_WriteCommandh>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	331a      	adds	r3, #26
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	331a      	adds	r3, #26
 8001262:	b2db      	uxtb	r3, r3
 8001264:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2104      	movs	r1, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff77 	bl	8001160 <_ZL16ST7735_WriteDataPhj>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001272:	202b      	movs	r0, #43	; 0x2b
 8001274:	f7ff ff5a 	bl	800112c <_ZL19ST7735_WriteCommandh>
    data[1] = y0 + ST7735_YSTART;
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	3301      	adds	r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001280:	793b      	ldrb	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff66 	bl	8001160 <_ZL16ST7735_WriteDataPhj>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001294:	202c      	movs	r0, #44	; 0x2c
 8001296:	f7ff ff49 	bl	800112c <_ZL19ST7735_WriteCommandh>
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
	...

080012a4 <_Z11ST7735_Initv>:

void ST7735_Init() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80012a8:	f7ff ff14 	bl	80010d4 <_ZL13ST7735_Selectv>
    ST7735_Reset();
 80012ac:	f7ff ff2a 	bl	8001104 <_ZL12ST7735_Resetv>
    ST7735_ExecuteCommandList(init_cmds1);
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <_Z11ST7735_Initv+0x28>)
 80012b2:	f7ff ff6f 	bl	8001194 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds2);
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <_Z11ST7735_Initv+0x2c>)
 80012b8:	f7ff ff6c 	bl	8001194 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds3);
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <_Z11ST7735_Initv+0x30>)
 80012be:	f7ff ff69 	bl	8001194 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_Unselect();
 80012c2:	f7ff ff13 	bl	80010ec <_Z15ST7735_Unselectv>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800f338 	.word	0x0800f338
 80012d0:	0800f374 	.word	0x0800f374
 80012d4:	0800f384 	.word	0x0800f384

080012d8 <_ZL16ST7735_WriteCharttc7FontDeftt>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012d8:	b082      	sub	sp, #8
 80012da:	b590      	push	{r4, r7, lr}
 80012dc:	b089      	sub	sp, #36	; 0x24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012fe:	4413      	add	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2dc      	uxtb	r4, r3
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800130e:	4413      	add	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4622      	mov	r2, r4
 8001318:	f7ff ff89 	bl	800122e <_ZL23ST7735_SetAddressWindowhhhh>

    for(i = 0; i < font.height; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001324:	461a      	mov	r2, r3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4293      	cmp	r3, r2
 800132a:	d242      	bcs.n	80013b2 <_ZL16ST7735_WriteCharttc7FontDeftt+0xda>
        b = font.data[(ch - 32) * font.height + i];
 800132c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	3b20      	subs	r3, #32
 8001332:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4619      	mov	r1, r3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	440b      	add	r3, r1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001350:	461a      	mov	r2, r3
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4293      	cmp	r3, r2
 8001356:	d228      	bcs.n	80013aa <_ZL16ST7735_WriteCharttc7FontDeftt+0xd2>
            if((b << j) & 0x8000)  {
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00d      	beq.n	8001384 <_ZL16ST7735_WriteCharttc7FontDeftt+0xac>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800136a:	121b      	asrs	r3, r3, #8
 800136c:	b2db      	uxtb	r3, r3
 800136e:	743b      	strb	r3, [r7, #16]
 8001370:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001372:	b2db      	uxtb	r3, r3
 8001374:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff feef 	bl	8001160 <_ZL16ST7735_WriteDataPhj>
 8001382:	e00e      	b.n	80013a2 <_ZL16ST7735_WriteCharttc7FontDeftt+0xca>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001384:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001388:	121b      	asrs	r3, r3, #8
 800138a:	b2db      	uxtb	r3, r3
 800138c:	733b      	strb	r3, [r7, #12]
 800138e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001392:	b2db      	uxtb	r3, r3
 8001394:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fedf 	bl	8001160 <_ZL16ST7735_WriteDataPhj>
        for(j = 0; j < font.width; j++) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	e7d0      	b.n	800134c <_ZL16ST7735_WriteCharttc7FontDeftt+0x74>
    for(i = 0; i < font.height; i++) {
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	e7b6      	b.n	8001320 <_ZL16ST7735_WriteCharttc7FontDeftt+0x48>
            }
        }
    }
}
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013bc:	b002      	add	sp, #8
 80013be:	4770      	bx	lr

080013c0 <_Z18ST7735_WriteStringttPKc7FontDeftt>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013c0:	b082      	sub	sp, #8
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af04      	add	r7, sp, #16
 80013c8:	603a      	str	r2, [r7, #0]
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	4603      	mov	r3, r0
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	460b      	mov	r3, r1
 80013d2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80013d4:	f7ff fe7e 	bl	80010d4 <_ZL13ST7735_Selectv>

    while(*str) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02f      	beq.n	8001440 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x80>
        if(x + font.width >= ST7735_WIDTH) {
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	7d3a      	ldrb	r2, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	2b4f      	cmp	r3, #79	; 0x4f
 80013e8:	dd13      	ble.n	8001412 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
            x = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	7d7a      	ldrb	r2, [r7, #21]
 80013fc:	4413      	add	r3, r2
 80013fe:	2b9f      	cmp	r3, #159	; 0x9f
 8001400:	dc1d      	bgt.n	800143e <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7e>
                break;
            }

            if(*str == ' ') {
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b20      	cmp	r3, #32
 8001408:	d103      	bne.n	8001412 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
                // skip spaces in the beginning of the new line
                str++;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
                continue;
 8001410:	e014      	b.n	800143c <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	88f8      	ldrh	r0, [r7, #6]
 800141a:	8c3b      	ldrh	r3, [r7, #32]
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	8bbb      	ldrh	r3, [r7, #28]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f7ff ff56 	bl	80012d8 <_ZL16ST7735_WriteCharttc7FontDeftt>
        x += font.width;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	b29a      	uxth	r2, r3
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4413      	add	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
        str++;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800143c:	e7cc      	b.n	80013d8 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x18>
                break;
 800143e:	bf00      	nop
    }

    ST7735_Unselect();
 8001440:	f7ff fe54 	bl	80010ec <_Z15ST7735_Unselectv>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800144e:	b002      	add	sp, #8
 8001450:	4770      	bx	lr
	...

08001454 <_Z20ST7735_FillRectanglettttt>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	2b4f      	cmp	r3, #79	; 0x4f
 8001476:	d856      	bhi.n	8001526 <_Z20ST7735_FillRectanglettttt+0xd2>
 8001478:	88bb      	ldrh	r3, [r7, #4]
 800147a:	2b9f      	cmp	r3, #159	; 0x9f
 800147c:	d853      	bhi.n	8001526 <_Z20ST7735_FillRectanglettttt+0xd2>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	4413      	add	r3, r2
 8001484:	2b50      	cmp	r3, #80	; 0x50
 8001486:	dd03      	ble.n	8001490 <_Z20ST7735_FillRectanglettttt+0x3c>
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800148e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001490:	88ba      	ldrh	r2, [r7, #4]
 8001492:	883b      	ldrh	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	2ba0      	cmp	r3, #160	; 0xa0
 8001498:	dd03      	ble.n	80014a2 <_Z20ST7735_FillRectanglettttt+0x4e>
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80014a0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80014a2:	f7ff fe17 	bl	80010d4 <_ZL13ST7735_Selectv>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b2dc      	uxtb	r4, r3
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4622      	mov	r2, r4
 80014d0:	f7ff fead 	bl	800122e <_ZL23ST7735_SetAddressWindowhhhh>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014d4:	8c3b      	ldrh	r3, [r7, #32]
 80014d6:	121b      	asrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	733b      	strb	r3, [r7, #12]
 80014dc:	8c3b      	ldrh	r3, [r7, #32]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <_Z20ST7735_FillRectanglettttt+0xdc>)
 80014e8:	f000 feba 	bl	8002260 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	80bb      	strh	r3, [r7, #4]
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d014      	beq.n	8001520 <_Z20ST7735_FillRectanglettttt+0xcc>
        for(x = w; x > 0; x--) {
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <_Z20ST7735_FillRectanglettttt+0xc4>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001508:	2202      	movs	r2, #2
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <_Z20ST7735_FillRectanglettttt+0xe0>)
 800150c:	f002 ff24 	bl	8004358 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	3b01      	subs	r3, #1
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	e7f0      	b.n	80014fa <_Z20ST7735_FillRectanglettttt+0xa6>
    for(y = h; y > 0; y--) {
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	e7e7      	b.n	80014f0 <_Z20ST7735_FillRectanglettttt+0x9c>
        }
    }

    ST7735_Unselect();
 8001520:	f7ff fde4 	bl	80010ec <_Z15ST7735_Unselectv>
 8001524:	e000      	b.n	8001528 <_Z20ST7735_FillRectanglettttt+0xd4>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001526:	bf00      	nop
}
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	40020400 	.word	0x40020400
 8001534:	200001ec 	.word	0x200001ec

08001538 <_Z17ST7735_FillScreent>:

void ST7735_FillScreen(uint16_t color) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	2250      	movs	r2, #80	; 0x50
 800154a:	2100      	movs	r1, #0
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff81 	bl	8001454 <_Z20ST7735_FillRectanglettttt>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_Init+0x40>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_Init+0x40>)
 8001572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x40>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f8fc 	bl	8001782 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fc9a 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fb24 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000020 	.word	0x20000020
 80015c4:	20008ca8 	.word	0x20008ca8

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20008ca8 	.word	0x20008ca8

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_Delay+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000020 	.word	0x20000020

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff4c 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017aa:	f7ff ff61 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	6978      	ldr	r0, [r7, #20]
 80017b6:	f7ff ffb1 	bl	800171c <NVIC_EncodePriority>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff80 	bl	80016c8 <__NVIC_SetPriority>
}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff54 	bl	800168c <__NVIC_EnableIRQ>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff fee6 	bl	80015c8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e099      	b.n	800193c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001828:	e00f      	b.n	800184a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182a:	f7ff fecd 	bl	80015c8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	d908      	bls.n	800184a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e078      	b.n	800193c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e8      	bne.n	800182a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_DMA_Init+0x158>)
 8001864:	4013      	ands	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4313      	orrs	r3, r2
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f023 0307 	bic.w	r3, r3, #7
 80018ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d117      	bne.n	800190e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fa9d 	bl	8001e30 <DMA_CheckFifoParam>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800190a:	2301      	movs	r3, #1
 800190c:	e016      	b.n	800193c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa54 	bl	8001dc4 <DMA_CalcBaseAndBitshift>
 800191c:	4603      	mov	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	223f      	movs	r2, #63	; 0x3f
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	f010803f 	.word	0xf010803f

08001948 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_DMA_Start_IT+0x26>
 800196a:	2302      	movs	r3, #2
 800196c:	e040      	b.n	80019f0 <HAL_DMA_Start_IT+0xa8>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d12f      	bne.n	80019e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f9e6 	bl	8001d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a0:	223f      	movs	r2, #63	; 0x3f
 80019a2:	409a      	lsls	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0216 	orr.w	r2, r2, #22
 80019b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e005      	b.n	80019ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00c      	b.n	8001a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_DMA_IRQHandler+0x258>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a92      	ldr	r2, [pc, #584]	; (8001c98 <HAL_DMA_IRQHandler+0x25c>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2208      	movs	r2, #8
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2208      	movs	r2, #8
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2201      	movs	r2, #1
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2204      	movs	r2, #4
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0204 	orr.w	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2210      	movs	r2, #16
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d043      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d03c      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2210      	movs	r2, #16
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d018      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d024      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
 8001b6a:	e01f      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0208 	bic.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 808e 	beq.w	8001cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8086 	beq.w	8001cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d136      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0216 	bic.w	r2, r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x1da>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d07d      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
        }
        return;
 8001c52:	e078      	b.n	8001d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d030      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
 8001c80:	e02b      	b.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d027      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e022      	b.n	8001cda <HAL_DMA_IRQHandler+0x29e>
 8001c94:	20000000 	.word	0x20000000
 8001c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0210 	bic.w	r2, r2, #16
 8001cb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d032      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d022      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d307      	bcc.n	8001d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f2      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x2ca>
 8001d20:	e000      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	e000      	b.n	8001d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d46:	bf00      	nop
    }
  }
}
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop

08001d50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d108      	bne.n	8001da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da6:	e007      	b.n	8001db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b10      	subs	r3, #16
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <DMA_CalcBaseAndBitshift+0x68>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d909      	bls.n	8001e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	1d1a      	adds	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
 8001e04:	e007      	b.n	8001e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	aaaaaaab 	.word	0xaaaaaaab
 8001e2c:	0800f3b0 	.word	0x0800f3b0

08001e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0x5a>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d856      	bhi.n	8001efe <DMA_CheckFifoParam+0xce>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <DMA_CheckFifoParam+0x28>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7b 	.word	0x08001e7b
 8001e60:	08001e69 	.word	0x08001e69
 8001e64:	08001eff 	.word	0x08001eff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d046      	beq.n	8001f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e043      	b.n	8001f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e82:	d140      	bne.n	8001f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e88:	e03d      	b.n	8001f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e92:	d121      	bne.n	8001ed8 <DMA_CheckFifoParam+0xa8>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d837      	bhi.n	8001f0a <DMA_CheckFifoParam+0xda>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <DMA_CheckFifoParam+0x70>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001eb7 	.word	0x08001eb7
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001ec9 	.word	0x08001ec9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e030      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d025      	beq.n	8001f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec6:	e022      	b.n	8001f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed6:	e01c      	b.n	8001f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d903      	bls.n	8001ee6 <DMA_CheckFifoParam+0xb6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee4:	e018      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eea:	e015      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e00b      	b.n	8001f16 <DMA_CheckFifoParam+0xe6>
      break;
 8001efe:	bf00      	nop
 8001f00:	e00a      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e008      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e006      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e004      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
    }
  } 
  
  return status; 
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e159      	b.n	80021f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 8148 	bne.w	80021f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d005      	beq.n	8001f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d017      	beq.n	8002018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a2 	beq.w	80021f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_GPIO_Init+0x2e8>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_GPIO_Init+0x2e8>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b54      	ldr	r3, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x2e8>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_GPIO_Init+0x2ec>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_GPIO_Init+0x2f0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x202>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x2f4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x1fe>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_GPIO_Init+0x2f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x1fa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a46      	ldr	r2, [pc, #280]	; (8002224 <HAL_GPIO_Init+0x2fc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x1f6>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a45      	ldr	r2, [pc, #276]	; (8002228 <HAL_GPIO_Init+0x300>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x1f2>
 8002116:	2304      	movs	r3, #4
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x204>
 800211a:	2307      	movs	r3, #7
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x204>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x204>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x204>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x204>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <HAL_GPIO_Init+0x2ec>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_GPIO_Init+0x304>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <HAL_GPIO_Init+0x304>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_GPIO_Init+0x304>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_GPIO_Init+0x304>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_GPIO_Init+0x304>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a1a      	ldr	r2, [pc, #104]	; (800222c <HAL_GPIO_Init+0x304>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_GPIO_Init+0x304>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_GPIO_Init+0x304>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f aea2 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	041a      	lsls	r2, r3, #16
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	400b      	ands	r3, r1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e264      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d075      	beq.n	80023d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e6:	4ba3      	ldr	r3, [pc, #652]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00c      	beq.n	800230c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4ba0      	ldr	r3, [pc, #640]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230a:	d10b      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4b99      	ldr	r3, [pc, #612]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05b      	beq.n	80023d0 <HAL_RCC_OscConfig+0x108>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d157      	bne.n	80023d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e23f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x74>
 800232e:	4b91      	ldr	r3, [pc, #580]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a90      	ldr	r2, [pc, #576]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 8002360:	4b84      	ldr	r3, [pc, #528]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a83      	ldr	r2, [pc, #524]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a80      	ldr	r2, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff f922 	bl	80015c8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff f91e 	bl	80015c8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e204      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b76      	ldr	r3, [pc, #472]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xc0>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff f90e 	bl	80015c8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff f90a 	bl	80015c8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e1f0      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0xe8>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023de:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b62      	ldr	r3, [pc, #392]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1c4      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4952      	ldr	r1, [pc, #328]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_OscConfig+0x2b0>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f8c3 	bl	80015c8 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff f8bf 	bl	80015c8 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1a5      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4940      	ldr	r1, [pc, #256]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x2b0>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f8a2 	bl	80015c8 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f89e 	bl	80015c8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e184      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d030      	beq.n	8002514 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x2b4>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff f882 	bl	80015c8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff f87e 	bl	80015c8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e164      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x200>
 80024e6:	e015      	b.n	8002514 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x2b4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f86b 	bl	80015c8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff f867 	bl	80015c8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e14d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a0 	beq.w	8002662 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d121      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7ff f82d 	bl	80015c8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e011      	b.n	8002596 <HAL_RCC_OscConfig+0x2ce>
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	42470000 	.word	0x42470000
 800257c:	42470e80 	.word	0x42470e80
 8002580:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7ff f820 	bl	80015c8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e106      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b85      	ldr	r3, [pc, #532]	; (80027ac <HAL_RCC_OscConfig+0x4e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a80      	ldr	r2, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	e01c      	b.n	80025f2 <HAL_RCC_OscConfig+0x32a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0x312>
 80025c0:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a77      	ldr	r2, [pc, #476]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x32a>
 80025da:	4b75      	ldr	r3, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a74      	ldr	r2, [pc, #464]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a71      	ldr	r2, [pc, #452]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe ffe5 	bl	80015c8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe ffe1 	bl	80015c8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0c5      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCC_OscConfig+0x33a>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe ffcf 	bl	80015c8 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe ffcb 	bl	80015c8 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0af      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 809b 	beq.w	80027a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d05c      	beq.n	8002732 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d141      	bne.n	8002704 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe ff9f 	bl	80015c8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe ff9b 	bl	80015c8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e081      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	019b      	lsls	r3, r3, #6
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	4937      	ldr	r1, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff74 	bl	80015c8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe ff70 	bl	80015c8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e056      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x41c>
 8002702:	e04e      	b.n	80027a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe ff5d 	bl	80015c8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe ff59 	bl	80015c8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e03f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x44a>
 8002730:	e037      	b.n	80027a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e032      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d028      	beq.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d121      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d11a      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002774:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002776:	4293      	cmp	r3, r2
 8002778:	d111      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d107      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40007000 	.word	0x40007000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470060 	.word	0x42470060

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fe8e 	bl	80015c8 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe fe8a 	bl	80015c8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fab0 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800cb0c 	.word	0x0800cb0c
 800297c:	20000000 	.word	0x20000000
 8002980:	2000001c 	.word	0x2000001c

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	2300      	movs	r3, #0
 8002996:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80bd 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e0b7      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ba:	60bb      	str	r3, [r7, #8]
       break;
 80029bc:	e0b7      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b60      	ldr	r3, [pc, #384]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e0b4      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04d      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0800 	and.w	r8, r2, r0
 80029f2:	ea03 0901 	and.w	r9, r3, r1
 80029f6:	4640      	mov	r0, r8
 80029f8:	4649      	mov	r1, r9
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a12:	eb61 0109 	sbc.w	r1, r1, r9
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a24:	0182      	lsls	r2, r0, #6
 8002a26:	1a12      	subs	r2, r2, r0
 8002a28:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a3a:	00d0      	lsls	r0, r2, #3
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	eb12 0208 	adds.w	r2, r2, r8
 8002a44:	eb43 0309 	adc.w	r3, r3, r9
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	0299      	lsls	r1, r3, #10
 8002a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a56:	0290      	lsls	r0, r2, #10
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f7fd fc0a 	bl	8000280 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e04a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	ea02 0400 	and.w	r4, r2, r0
 8002a8e:	ea03 0501 	and.w	r5, r3, r1
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	014b      	lsls	r3, r1, #5
 8002aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa4:	0142      	lsls	r2, r0, #5
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	1b00      	subs	r0, r0, r4
 8002aac:	eb61 0105 	sbc.w	r1, r1, r5
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	018b      	lsls	r3, r1, #6
 8002aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002abe:	0182      	lsls	r2, r0, #6
 8002ac0:	1a12      	subs	r2, r2, r0
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	00d9      	lsls	r1, r3, #3
 8002ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad4:	00d0      	lsls	r0, r2, #3
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	1912      	adds	r2, r2, r4
 8002adc:	eb45 0303 	adc.w	r3, r5, r3
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0299      	lsls	r1, r3, #10
 8002aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aee:	0290      	lsls	r0, r2, #10
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f7fd fbbe 	bl	8000280 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60bb      	str	r3, [r7, #8]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0800cb1c 	.word	0x0800cb1c

08002b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0207 	and.w	r2, r3, #7
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e022      	b.n	8002c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe f811 	bl	8000c34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f814 	bl	8002c48 <HAL_SD_InitCard>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00a      	b.n	8002c40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b08e      	sub	sp, #56	; 0x38
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c64:	2376      	movs	r3, #118	; 0x76
 8002c66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681d      	ldr	r5, [r3, #0]
 8002c6c:	466c      	mov	r4, sp
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	4628      	mov	r0, r5
 8002c82:	f001 ffef 	bl	8004c64 <SDIO_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e04c      	b.n	8002d32 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_SD_InitCard+0xf4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 f827 	bl	8004cf6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_SD_InitCard+0xf4>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f001 f804 	bl	8003cbc <SD_PowerON>
 8002cb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e02e      	b.n	8002d32 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 ff25 	bl	8003b24 <SD_InitCard>
 8002cda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e01b      	b.n	8002d32 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 f88a 	bl	8004e1c <SDMMC_CmdBlockLength>
 8002d08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00f      	beq.n	8002d30 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_SD_InitCard+0xf8>)
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	422580a0 	.word	0x422580a0
 8002d40:	004005ff 	.word	0x004005ff

08002d44 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0c0      	b.n	8002eee <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f040 80b9 	bne.w	8002eec <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	441a      	add	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d907      	bls.n	8002d9e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0a7      	b.n	8002eee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002dd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3380      	adds	r3, #128	; 0x80
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	f7fe fd99 	bl	8001948 <HAL_DMA_Start_IT>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d017      	beq.n	8002e4c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e050      	b.n	8002eee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d002      	beq.n	8002e60 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	025b      	lsls	r3, r3, #9
 8002e6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002e6c:	2390      	movs	r3, #144	; 0x90
 8002e6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f107 0210 	add.w	r2, r7, #16
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 ff9c 	bl	8004dc4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d90a      	bls.n	8002ea8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2282      	movs	r2, #130	; 0x82
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 f800 	bl	8004ea4 <SDMMC_CmdReadMultiBlock>
 8002ea4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ea6:	e009      	b.n	8002ebc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2281      	movs	r2, #129	; 0x81
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 ffd3 	bl	8004e60 <SDMMC_CmdReadSingleBlock>
 8002eba:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e002      	b.n	8002eee <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3730      	adds	r7, #48	; 0x30
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08003933 	.word	0x08003933
 8002efc:	080039a5 	.word	0x080039a5
 8002f00:	004005ff 	.word	0x004005ff
 8002f04:	4225858c 	.word	0x4225858c

08002f08 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0c5      	b.n	80030bc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	f040 80be 	bne.w	80030ba <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	441a      	add	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d907      	bls.n	8002f62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0ac      	b.n	80030bc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	4a4e      	ldr	r2, [pc, #312]	; (80030c4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	4a4d      	ldr	r2, [pc, #308]	; (80030c8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002f94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d002      	beq.n	8002fac <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	025b      	lsls	r3, r3, #9
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d90a      	bls.n	8002fc8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	22a0      	movs	r2, #160	; 0xa0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 ffb4 	bl	8004f2c <SDMMC_CmdWriteMultiBlock>
 8002fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fc6:	e009      	b.n	8002fdc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2290      	movs	r2, #144	; 0x90
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 ff87 	bl	8004ee8 <SDMMC_CmdWriteSingleBlock>
 8002fda:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a39      	ldr	r2, [pc, #228]	; (80030cc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e059      	b.n	80030bc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3380      	adds	r3, #128	; 0x80
 800303e:	461a      	mov	r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	f7fe fc7f 	bl	8001948 <HAL_DMA_Start_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01c      	beq.n	800308a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800305e:	f023 0302 	bic.w	r3, r3, #2
 8003062:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e018      	b.n	80030bc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	025b      	lsls	r3, r3, #9
 8003094:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003096:	2390      	movs	r3, #144	; 0x90
 8003098:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f107 0210 	add.w	r2, r7, #16
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fe87 	bl	8004dc4 <SDIO_ConfigData>

      return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3730      	adds	r7, #48	; 0x30
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08003909 	.word	0x08003909
 80030c8:	080039a5 	.word	0x080039a5
 80030cc:	004005ff 	.word	0x004005ff
 80030d0:	4225858c 	.word	0x4225858c

080030d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_SD_IRQHandler+0x2e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fffd 	bl	80040fa <SD_Read_IT>
 8003100:	e165      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 808f 	beq.w	8003230 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800312a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800312e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d039      	beq.n	80031be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_SD_IRQHandler+0x8a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f001 ff04 	bl	8004f70 <SDMMC_CmdStopTransfer>
 8003168:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f92f 	bl	80033e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f240 523a 	movw	r2, #1338	; 0x53a
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_SD_IRQHandler+0xda>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f002 fb72 	bl	8005898 <HAL_SD_RxCpltCallback>
 80031b4:	e10b      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f002 fb64 	bl	8005884 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031bc:	e107      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8102 	beq.w	80033ce <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fec9 	bl	8004f70 <SDMMC_CmdStopTransfer>
 80031de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8f4 	bl	80033e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80e5 	bne.w	80033ce <HAL_SD_IRQHandler+0x2fa>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80df 	bne.w	80033ce <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0208 	bic.w	r2, r2, #8
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f002 fb2b 	bl	8005884 <HAL_SD_TxCpltCallback>
}
 800322e:	e0ce      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_SD_IRQHandler+0x17c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 ffa7 	bl	800419c <SD_Write_IT>
 800324e:	e0be      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003256:	f240 233a 	movw	r3, #570	; 0x23a
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80b6 	beq.w	80033ce <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	f043 0202 	orr.w	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	f043 0208 	orr.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	f043 0208 	orr.w	r2, r3, #8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f240 723a 	movw	r2, #1850	; 0x73a
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80032fc:	f023 0302 	bic.w	r3, r3, #2
 8003300:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fe32 	bl	8004f70 <SDMMC_CmdStopTransfer>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f855 	bl	80033e0 <HAL_SD_ErrorCallback>
}
 8003336:	e04a      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d045      	beq.n	80033ce <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <HAL_SD_IRQHandler+0x282>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_SD_IRQHandler+0x304>)
 800335c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fb48 	bl	80019f8 <HAL_DMA_Abort_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02f      	beq.n	80033ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb68 	bl	8003a48 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003378:	e029      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_SD_IRQHandler+0x2ba>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <HAL_SD_IRQHandler+0x308>)
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fb2c 	bl	80019f8 <HAL_DMA_Abort_IT>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d013      	beq.n	80033ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb83 	bl	8003ab6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80033b0:	e00d      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f002 fa52 	bl	8005870 <HAL_SD_AbortCallback>
}
 80033cc:	e7ff      	b.n	80033ce <HAL_SD_IRQHandler+0x2fa>
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	08003a49 	.word	0x08003a49
 80033dc:	08003ab7 	.word	0x08003ab7

080033e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003402:	0f9b      	lsrs	r3, r3, #30
 8003404:	b2da      	uxtb	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	b2da      	uxtb	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b2da      	uxtb	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	b2da      	uxtb	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	0d1b      	lsrs	r3, r3, #20
 8003456:	b29a      	uxth	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	b2da      	uxtb	r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003472:	0bdb      	lsrs	r3, r3, #15
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	0b9b      	lsrs	r3, r3, #14
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003496:	0b5b      	lsrs	r3, r3, #13
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	0b1b      	lsrs	r3, r3, #12
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d163      	bne.n	800358c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034d4:	0f92      	lsrs	r2, r2, #30
 80034d6:	431a      	orrs	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e0:	0edb      	lsrs	r3, r3, #27
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	0e1b      	lsrs	r3, r3, #24
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003504:	0d5b      	lsrs	r3, r3, #21
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	b2da      	uxtb	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	0c9b      	lsrs	r3, r3, #18
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b2da      	uxtb	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	0bdb      	lsrs	r3, r3, #15
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	b2da      	uxtb	r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7e1b      	ldrb	r3, [r3, #24]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	3302      	adds	r3, #2
 800354c:	2201      	movs	r2, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	7a1b      	ldrb	r3, [r3, #8]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	2201      	movs	r2, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003578:	0a52      	lsrs	r2, r2, #9
 800357a:	fb02 f203 	mul.w	r2, r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003588:	661a      	str	r2, [r3, #96]	; 0x60
 800358a:	e031      	b.n	80035f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11d      	bne.n	80035d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	3301      	adds	r3, #1
 80035b0:	029a      	lsls	r2, r3, #10
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
 80035ce:	e00f      	b.n	80035f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_SD_GetCardCSD+0x344>)
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e09d      	b.n	800372c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f4:	0b9b      	lsrs	r3, r3, #14
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	09db      	lsrs	r3, r3, #7
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360e:	b2da      	uxtb	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	0fdb      	lsrs	r3, r3, #31
 800362a:	b2da      	uxtb	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	0f5b      	lsrs	r3, r3, #29
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	b2da      	uxtb	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	0d9b      	lsrs	r3, r3, #22
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	b2da      	uxtb	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	0d5b      	lsrs	r3, r3, #21
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	0bdb      	lsrs	r3, r3, #15
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	0b9b      	lsrs	r3, r3, #14
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	0b1b      	lsrs	r3, r3, #12
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	0a9b      	lsrs	r3, r3, #10
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	b2da      	uxtb	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371a:	b2da      	uxtb	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	004005ff 	.word	0x004005ff

0800373c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003794:	b5b0      	push	{r4, r5, r7, lr}
 8003796:	b08e      	sub	sp, #56	; 0x38
 8003798:	af04      	add	r7, sp, #16
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2203      	movs	r2, #3
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d02e      	beq.n	8003812 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d106      	bne.n	80037ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
 80037c8:	e029      	b.n	800381e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d10a      	bne.n	80037e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fb28 	bl	8003e28 <SD_WideBus_Enable>
 80037d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
 80037e6:	e01a      	b.n	800381e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb65 	bl	8003ebe <SD_WideBus_Disable>
 80037f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
 8003802:	e00c      	b.n	800381e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
 8003810:	e005      	b.n	800381e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800383c:	e01f      	b.n	800387e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681d      	ldr	r5, [r3, #0]
 8003864:	466c      	mov	r4, sp
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800386e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003878:	4628      	mov	r0, r5
 800387a:	f001 f9f3 	bl	8004c64 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003886:	4618      	mov	r0, r3
 8003888:	f001 fac8 	bl	8004e1c <SDMMC_CmdBlockLength>
 800388c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00c      	beq.n	80038ae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80038b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bdb0      	pop	{r4, r5, r7, pc}
 80038c2:	bf00      	nop
 80038c4:	004005ff 	.word	0x004005ff

080038c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa7c 	bl	8003dd8 <SD_SendStatus>
 80038e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038fe:	693b      	ldr	r3, [r7, #16]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2b82      	cmp	r3, #130	; 0x82
 8003946:	d111      	bne.n	800396c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fb0f 	bl	8004f70 <SDMMC_CmdStopTransfer>
 8003952:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fd3a 	bl	80033e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0208 	bic.w	r2, r2, #8
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f240 523a 	movw	r2, #1338	; 0x53a
 8003984:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f001 ff7f 	bl	8005898 <HAL_SD_RxCpltCallback>
#endif
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe f9cc 	bl	8001d50 <HAL_DMA_GetError>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d03e      	beq.n	8003a3c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <SD_DMAError+0x36>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d12d      	bne.n	8003a36 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <SD_DMAError+0xa0>)
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff62 	bl	80038c8 <HAL_SD_GetCardState>
 8003a04:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d002      	beq.n	8003a12 <SD_DMAError+0x6e>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d10a      	bne.n	8003a28 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 faaa 	bl	8004f70 <SDMMC_CmdStopTransfer>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f7ff fcd2 	bl	80033e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	004005ff 	.word	0x004005ff

08003a48 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff ff31 	bl	80038c8 <HAL_SD_GetCardState>
 8003a66:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d002      	beq.n	8003a82 <SD_DMATxAbort+0x3a>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10a      	bne.n	8003a98 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fa72 	bl	8004f70 <SDMMC_CmdStopTransfer>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f001 fee5 	bl	8005870 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003aa6:	e002      	b.n	8003aae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff fc99 	bl	80033e0 <HAL_SD_ErrorCallback>
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff fefa 	bl	80038c8 <HAL_SD_GetCardState>
 8003ad4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d002      	beq.n	8003af0 <SD_DMARxAbort+0x3a>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d10a      	bne.n	8003b06 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fa3b 	bl	8004f70 <SDMMC_CmdStopTransfer>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 feae 	bl	8005870 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003b14:	e002      	b.n	8003b1c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff fc62 	bl	80033e0 <HAL_SD_ErrorCallback>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b24:	b5b0      	push	{r4, r5, r7, lr}
 8003b26:	b094      	sub	sp, #80	; 0x50
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f8ed 	bl	8004d14 <SDIO_GetPowerState>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b44:	e0b6      	b.n	8003cb4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d02f      	beq.n	8003bae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fb16 	bl	8005184 <SDMMC_CmdSendCID>
 8003b58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	e0a7      	b.n	8003cb4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f917 	bl	8004d9e <SDIO_GetResponse>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f90e 	bl	8004d9e <SDIO_GetResponse>
 8003b82:	4602      	mov	r2, r0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2108      	movs	r1, #8
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f905 	bl	8004d9e <SDIO_GetResponse>
 8003b94:	4602      	mov	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	210c      	movs	r1, #12
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f8fc 	bl	8004d9e <SDIO_GetResponse>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d00d      	beq.n	8003bd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f107 020e 	add.w	r2, r7, #14
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 fb1c 	bl	80051fe <SDMMC_CmdSetRelAdd>
 8003bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8003bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd0:	e070      	b.n	8003cb4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d036      	beq.n	8003c48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f001 fae6 	bl	80051c0 <SDMMC_CmdSendCSD>
 8003bf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfe:	e059      	b.n	8003cb4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f8c9 	bl	8004d9e <SDIO_GetResponse>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2104      	movs	r1, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 f8c0 	bl	8004d9e <SDIO_GetResponse>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2108      	movs	r1, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f8b7 	bl	8004d9e <SDIO_GetResponse>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	210c      	movs	r1, #12
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f8ae 	bl	8004d9e <SDIO_GetResponse>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 f8a5 	bl	8004d9e <SDIO_GetResponse>
 8003c54:	4603      	mov	r3, r0
 8003c56:	0d1a      	lsrs	r2, r3, #20
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fbc6 	bl	80033f4 <HAL_SD_GetCardCSD>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c72:	e01f      	b.n	8003cb4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	4608      	mov	r0, r1
 8003c86:	f001 f995 	bl	8004fb4 <SDMMC_CmdSelDesel>
 8003c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SD_InitCard+0x172>
  {
    return errorstate;
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	e00e      	b.n	8003cb4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681d      	ldr	r5, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	466c      	mov	r4, sp
 8003c9e:	f103 0210 	add.w	r2, r3, #16
 8003ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ca8:	3304      	adds	r3, #4
 8003caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 ffd9 	bl	8004c64 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3740      	adds	r7, #64	; 0x40
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdb0      	pop	{r4, r5, r7, pc}

08003cbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f990 	bl	8004ffa <SDMMC_CmdGoIdleState>
 8003cda:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	e072      	b.n	8003dcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 f9a3 	bl	8005036 <SDMMC_CmdOperCond>
 8003cf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f979 	bl	8004ffa <SDMMC_CmdGoIdleState>
 8003d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	e05b      	b.n	8003dcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d137      	bne.n	8003d92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f9a3 	bl	8005074 <SDMMC_CmdAppCommand>
 8003d2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02d      	beq.n	8003d92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d3a:	e047      	b.n	8003dcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f996 	bl	8005074 <SDMMC_CmdAppCommand>
 8003d48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <SD_PowerON+0x98>
    {
      return errorstate;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	e03b      	b.n	8003dcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <SD_PowerON+0x118>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f9ac 	bl	80050b8 <SDMMC_CmdAppOperCommand>
 8003d60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d6c:	e02e      	b.n	8003dcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f812 	bl	8004d9e <SDIO_GetResponse>
 8003d7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	0fdb      	lsrs	r3, r3, #31
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <SD_PowerON+0xcc>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <SD_PowerON+0xce>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]

    count++;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d802      	bhi.n	8003da2 <SD_PowerON+0xe6>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0cc      	beq.n	8003d3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d902      	bls.n	8003db2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db0:	e00c      	b.n	8003dcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
 8003dc2:	e002      	b.n	8003dca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	c1100000 	.word	0xc1100000

08003dd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dec:	e018      	b.n	8003e20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f001 fa20 	bl	8005240 <SDMMC_CmdSendStatus>
 8003e00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	e009      	b.n	8003e20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ffc3 	bl	8004d9e <SDIO_GetResponse>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ffad 	bl	8004d9e <SDIO_GetResponse>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4e:	d102      	bne.n	8003e56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e54:	e02f      	b.n	8003eb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f879 	bl	8003f54 <SD_FindSCR>
 8003e62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e023      	b.n	8003eb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f001 f8f5 	bl	8005074 <SDMMC_CmdAppCommand>
 8003e8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	e00f      	b.n	8003eb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f92e 	bl	80050fe <SDMMC_CmdBusWidth>
 8003ea2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	e003      	b.n	8003eb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e001      	b.n	8003eb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003eb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 ff62 	bl	8004d9e <SDIO_GetResponse>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee4:	d102      	bne.n	8003eec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eea:	e02f      	b.n	8003f4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f82e 	bl	8003f54 <SD_FindSCR>
 8003ef8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	e023      	b.n	8003f4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01c      	beq.n	8003f48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f001 f8aa 	bl	8005074 <SDMMC_CmdAppCommand>
 8003f20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	e00f      	b.n	8003f4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 f8e3 	bl	80050fe <SDMMC_CmdBusWidth>
 8003f38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	e003      	b.n	8003f4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e001      	b.n	8003f4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b08f      	sub	sp, #60	; 0x3c
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f5e:	f7fd fb33 	bl	80015c8 <HAL_GetTick>
 8003f62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2108      	movs	r1, #8
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 ff4e 	bl	8004e1c <SDMMC_CmdBlockLength>
 8003f80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	e0b2      	b.n	80040f2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f001 f86b 	bl	8005074 <SDMMC_CmdAppCommand>
 8003f9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <SD_FindSCR+0x56>
  {
    return errorstate;
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	e0a3      	b.n	80040f2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f107 0210 	add.w	r2, r7, #16
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fef8 	bl	8004dc4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 f8b2 	bl	8005142 <SDMMC_CmdSendSCR>
 8003fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02a      	beq.n	800403c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	e083      	b.n	80040f2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00f      	beq.n	8004018 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f107 0208 	add.w	r2, r7, #8
 8004004:	18d4      	adds	r4, r2, r3
 8004006:	4608      	mov	r0, r1
 8004008:	f000 fe57 	bl	8004cba <SDIO_ReadFIFO>
 800400c:	4603      	mov	r3, r0
 800400e:	6023      	str	r3, [r4, #0]
      index++;
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	3301      	adds	r3, #1
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
 8004016:	e006      	b.n	8004026 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d012      	beq.n	800404c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004026:	f7fd facf 	bl	80015c8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004034:	d102      	bne.n	800403c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800403a:	e05a      	b.n	80040f2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0cf      	beq.n	8003fea <SD_FindSCR+0x96>
 800404a:	e000      	b.n	800404e <SD_FindSCR+0xfa>
      break;
 800404c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004064:	2308      	movs	r3, #8
 8004066:	e044      	b.n	80040f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2202      	movs	r2, #2
 800407c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800407e:	2302      	movs	r3, #2
 8004080:	e037      	b.n	80040f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2220      	movs	r2, #32
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004098:	2320      	movs	r3, #32
 800409a:	e02a      	b.n	80040f2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	061a      	lsls	r2, r3, #24
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80040bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0e1b      	lsrs	r3, r3, #24
 80040c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	601a      	str	r2, [r3, #0]
    scr++;
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	3304      	adds	r3, #4
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	061a      	lsls	r2, r3, #24
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	0e1b      	lsrs	r3, r3, #24
 80040ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	373c      	adds	r7, #60	; 0x3c
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}

080040fa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03f      	beq.n	8004194 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e033      	b.n	8004182 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fdcb 	bl	8004cba <SDIO_ReadFIFO>
 8004124:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3b01      	subs	r3, #1
 8004138:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3b01      	subs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	701a      	strb	r2, [r3, #0]
      tmp++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3b01      	subs	r3, #1
 8004164:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3b01      	subs	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b07      	cmp	r3, #7
 8004186:	d9c8      	bls.n	800411a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004194:	bf00      	nop
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d043      	beq.n	800423e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e037      	b.n	800422c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3301      	adds	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	021a      	lsls	r2, r3, #8
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	041a      	lsls	r2, r3, #16
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	061a      	lsls	r2, r3, #24
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	60bb      	str	r3, [r7, #8]
      tmp++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3301      	adds	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3b01      	subs	r3, #1
 8004214:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f107 0208 	add.w	r2, r7, #8
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fd57 	bl	8004cd4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b07      	cmp	r3, #7
 8004230:	d9c4      	bls.n	80041bc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e07b      	b.n	8004350 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d108      	bne.n	8004272 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004268:	d009      	beq.n	800427e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	61da      	str	r2, [r3, #28]
 8004270:	e005      	b.n	800427e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc fdcb 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	ea42 0103 	orr.w	r1, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	0c1b      	lsrs	r3, r3, #16
 800431c:	f003 0104 	and.w	r1, r3, #4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0210 	and.w	r2, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_SPI_Transmit+0x22>
 8004376:	2302      	movs	r3, #2
 8004378:	e126      	b.n	80045c8 <HAL_SPI_Transmit+0x270>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004382:	f7fd f921 	bl	80015c8 <HAL_GetTick>
 8004386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004398:	2302      	movs	r3, #2
 800439a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800439c:	e10b      	b.n	80045b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Transmit+0x52>
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ae:	e102      	b.n	80045b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2203      	movs	r2, #3
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f6:	d10f      	bne.n	8004418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d007      	beq.n	8004436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d14b      	bne.n	80044d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_Transmit+0xf6>
 8004448:	8afb      	ldrh	r3, [r7, #22]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d13e      	bne.n	80044cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	1c9a      	adds	r2, r3, #2
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004472:	e02b      	b.n	80044cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d112      	bne.n	80044a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80044a6:	e011      	b.n	80044cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a8:	f7fd f88e 	bl	80015c8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d803      	bhi.n	80044c0 <HAL_SPI_Transmit+0x168>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Transmit+0x16e>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044ca:	e074      	b.n	80045b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ce      	bne.n	8004474 <HAL_SPI_Transmit+0x11c>
 80044d6:	e04c      	b.n	8004572 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_SPI_Transmit+0x18e>
 80044e0:	8afb      	ldrh	r3, [r7, #22]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d140      	bne.n	8004568 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800450c:	e02c      	b.n	8004568 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d113      	bne.n	8004544 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	86da      	strh	r2, [r3, #54]	; 0x36
 8004542:	e011      	b.n	8004568 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004544:	f7fd f840 	bl	80015c8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d803      	bhi.n	800455c <HAL_SPI_Transmit+0x204>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Transmit+0x20a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004566:	e026      	b.n	80045b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cd      	bne.n	800450e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8b2 	bl	80046e0 <SPI_EndRxTxTransaction>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e000      	b.n	80045b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80045b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045e0:	f7fc fff2 	bl	80015c8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	4413      	add	r3, r2
 80045ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045f0:	f7fc ffea 	bl	80015c8 <HAL_GetTick>
 80045f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	015b      	lsls	r3, r3, #5
 80045fc:	0d1b      	lsrs	r3, r3, #20
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004606:	e054      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460e:	d050      	beq.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004610:	f7fc ffda 	bl	80015c8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d13d      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d111      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004648:	d004      	beq.n	8004654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d107      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466c:	d10f      	bne.n	800468e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e017      	b.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d19b      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000

080046e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <SPI_EndRxTxTransaction+0x7c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <SPI_EndRxTxTransaction+0x80>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	0d5b      	lsrs	r3, r3, #21
 80046f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d112      	bne.n	8004732 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ff5a 	bl	80045d0 <SPI_WaitFlagStateUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00f      	b.n	8004752 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3b01      	subs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d0f2      	beq.n	8004732 <SPI_EndRxTxTransaction+0x52>
 800474c:	e000      	b.n	8004750 <SPI_EndRxTxTransaction+0x70>
        break;
 800474e:	bf00      	nop
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000000 	.word	0x20000000
 8004760:	165e9f81 	.word	0x165e9f81

08004764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e041      	b.n	80047fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f839 	bl	8004802 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 f9ca 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e044      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e007      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8ee 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8e0 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8f1 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0204 	mvn.w	r2, #4
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8c4 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8b6 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8c7 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0208 	mvn.w	r2, #8
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2204      	movs	r2, #4
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f89a 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f88c 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f89d 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f870 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f862 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f873 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0201 	mvn.w	r2, #1
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc f842 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d10e      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8e2 	bl	8004c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f838 	bl	8004b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0220 	mvn.w	r2, #32
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8ac 	bl	8004c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a34      	ldr	r2, [pc, #208]	; (8004c20 <TIM_Base_SetConfig+0xe4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <TIM_Base_SetConfig+0xe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <TIM_Base_SetConfig+0xec>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <TIM_Base_SetConfig+0xf0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <TIM_Base_SetConfig+0xe4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01b      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d017      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <TIM_Base_SetConfig+0xe8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <TIM_Base_SetConfig+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00f      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <TIM_Base_SetConfig+0xf0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <TIM_Base_SetConfig+0xf4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <TIM_Base_SetConfig+0xf8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <TIM_Base_SetConfig+0xfc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <TIM_Base_SetConfig+0xe4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800

08004c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004c64:	b084      	sub	sp, #16
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	f107 001c 	add.w	r0, r7, #28
 8004c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004c7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004c7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004c82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004c86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004c8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004c8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004c9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	b004      	add	sp, #16
 8004cb8:	4770      	bx	lr

08004cba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2203      	movs	r2, #3
 8004d02:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004d04:	2002      	movs	r0, #2
 8004d06:	f7fc fc6b 	bl	80015e0 <HAL_Delay>
  
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0303 	and.w	r3, r3, #3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004d54:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004d5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d6a:	f023 030f 	bic.w	r3, r3, #15
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	b2db      	uxtb	r3, r3
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3314      	adds	r3, #20
 8004dac:	461a      	mov	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
}  
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004dea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004df0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004df6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0

}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e2e:	2340      	movs	r3, #64	; 0x40
 8004e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ff74 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa44 	bl	80052dc <SDMMC_GetCmdResp1>
 8004e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e56:	69fb      	ldr	r3, [r7, #28]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004e6e:	2311      	movs	r3, #17
 8004e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e72:	2340      	movs	r3, #64	; 0x40
 8004e74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ff52 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	2111      	movs	r1, #17
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa22 	bl	80052dc <SDMMC_GetCmdResp1>
 8004e98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004eb2:	2312      	movs	r3, #18
 8004eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff ff30 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	2112      	movs	r1, #18
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa00 	bl	80052dc <SDMMC_GetCmdResp1>
 8004edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ede:	69fb      	ldr	r3, [r7, #28]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004ef6:	2318      	movs	r3, #24
 8004ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004efa:	2340      	movs	r3, #64	; 0x40
 8004efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff0e 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	2118      	movs	r1, #24
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9de 	bl	80052dc <SDMMC_GetCmdResp1>
 8004f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004f3a:	2319      	movs	r3, #25
 8004f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f3e:	2340      	movs	r3, #64	; 0x40
 8004f40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff feec 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	2119      	movs	r1, #25
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9bc 	bl	80052dc <SDMMC_GetCmdResp1>
 8004f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fecb 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <SDMMC_CmdStopTransfer+0x40>)
 8004f9c:	210c      	movs	r1, #12
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f99c 	bl	80052dc <SDMMC_GetCmdResp1>
 8004fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	05f5e100 	.word	0x05f5e100

08004fb4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004fc4:	2307      	movs	r3, #7
 8004fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd6:	f107 0310 	add.w	r3, r7, #16
 8004fda:	4619      	mov	r1, r3
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff fea7 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	2107      	movs	r1, #7
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f977 	bl	80052dc <SDMMC_GetCmdResp1>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3728      	adds	r7, #40	; 0x28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b088      	sub	sp, #32
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fe86 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f92d 	bl	8005284 <SDMMC_GetCmdError>
 800502a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800502c:	69fb      	ldr	r3, [r7, #28]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b088      	sub	sp, #32
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800503e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005044:	2308      	movs	r3, #8
 8005046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005054:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fe67 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fb24 	bl	80056b0 <SDMMC_GetCmdResp7>
 8005068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800506a:	69fb      	ldr	r3, [r7, #28]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005082:	2337      	movs	r3, #55	; 0x37
 8005084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800508e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005094:	f107 0308 	add.w	r3, r7, #8
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe48 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	2137      	movs	r1, #55	; 0x37
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f918 	bl	80052dc <SDMMC_GetCmdResp1>
 80050ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ae:	69fb      	ldr	r3, [r7, #28]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80050ce:	2329      	movs	r3, #41	; 0x29
 80050d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe22 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa2b 	bl	8005548 <SDMMC_GetCmdResp3>
 80050f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050f4:	69fb      	ldr	r3, [r7, #28]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b088      	sub	sp, #32
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800510c:	2306      	movs	r3, #6
 800510e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fe03 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	2106      	movs	r1, #6
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f8d3 	bl	80052dc <SDMMC_GetCmdResp1>
 8005136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005138:	69fb      	ldr	r3, [r7, #28]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800514e:	2333      	movs	r3, #51	; 0x33
 8005150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005152:	2340      	movs	r3, #64	; 0x40
 8005154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800515a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005160:	f107 0308 	add.w	r3, r7, #8
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fde2 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	2133      	movs	r1, #51	; 0x33
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8b2 	bl	80052dc <SDMMC_GetCmdResp1>
 8005178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005190:	2302      	movs	r3, #2
 8005192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005194:	23c0      	movs	r3, #192	; 0xc0
 8005196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800519c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fdc1 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f982 	bl	80054b8 <SDMMC_GetCmdResp2>
 80051b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051b6:	69fb      	ldr	r3, [r7, #28]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80051ce:	2309      	movs	r3, #9
 80051d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80051d2:	23c0      	movs	r3, #192	; 0xc0
 80051d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fda2 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f963 	bl	80054b8 <SDMMC_GetCmdResp2>
 80051f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051f4:	69fb      	ldr	r3, [r7, #28]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800520c:	2303      	movs	r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005210:	2340      	movs	r3, #64	; 0x40
 8005212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fd83 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	2103      	movs	r1, #3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9c8 	bl	80055c4 <SDMMC_GetCmdResp6>
 8005234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800524e:	230d      	movs	r3, #13
 8005250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800525a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fd62 	bl	8004d30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	210d      	movs	r1, #13
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f832 	bl	80052dc <SDMMC_GetCmdResp1>
 8005278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <SDMMC_GetCmdError+0x50>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a11      	ldr	r2, [pc, #68]	; (80052d8 <SDMMC_GetCmdError+0x54>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a5b      	lsrs	r3, r3, #9
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052b0:	e009      	b.n	80052c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f1      	beq.n	80052a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	22c5      	movs	r2, #197	; 0xc5
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000000 	.word	0x20000000
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	460b      	mov	r3, r1
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <SDMMC_GetCmdResp1+0x1d0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a70      	ldr	r2, [pc, #448]	; (80054b0 <SDMMC_GetCmdResp1+0x1d4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	0a5a      	lsrs	r2, r3, #9
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	1e5a      	subs	r2, r3, #1
 8005302:	61fa      	str	r2, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800530c:	e0c9      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ef      	beq.n	80052fe <SDMMC_GetCmdResp1+0x22>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ea      	bne.n	80052fe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2204      	movs	r2, #4
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800533a:	2304      	movs	r3, #4
 800533c:	e0b1      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005350:	2301      	movs	r3, #1
 8005352:	e0a6      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	22c5      	movs	r2, #197	; 0xc5
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff fd12 	bl	8004d84 <SDIO_GetCommandResponse>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	4293      	cmp	r3, r2
 8005368:	d001      	beq.n	800536e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800536a:	2301      	movs	r3, #1
 800536c:	e099      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800536e:	2100      	movs	r1, #0
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fd14 	bl	8004d9e <SDIO_GetResponse>
 8005376:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <SDMMC_GetCmdResp1+0x1d8>)
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	e08d      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da02      	bge.n	8005392 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800538c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005390:	e087      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	e080      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	e079      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053bc:	e071      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053cc:	e069      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80053d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053dc:	e061      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80053e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ec:	e059      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fc:	e051      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800540c:	e049      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800541c:	e041      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542c:	e039      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800543c:	e031      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800544c:	e029      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005458:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800545c:	e021      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800546c:	e019      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005478:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800547c:	e011      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800548c:	e009      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005498:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800549c:	e001      	b.n	80054a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800549e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000000 	.word	0x20000000
 80054b0:	10624dd3 	.word	0x10624dd3
 80054b4:	fdffe008 	.word	0xfdffe008

080054b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054c0:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <SDMMC_GetCmdResp2+0x88>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <SDMMC_GetCmdResp2+0x8c>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	0a5b      	lsrs	r3, r3, #9
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1e5a      	subs	r2, r3, #1
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054e4:	e026      	b.n	8005534 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0ef      	beq.n	80054d6 <SDMMC_GetCmdResp2+0x1e>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ea      	bne.n	80054d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2204      	movs	r2, #4
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005512:	2304      	movs	r3, #4
 8005514:	e00e      	b.n	8005534 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005528:	2301      	movs	r3, #1
 800552a:	e003      	b.n	8005534 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	22c5      	movs	r2, #197	; 0xc5
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000000 	.word	0x20000000
 8005544:	10624dd3 	.word	0x10624dd3

08005548 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <SDMMC_GetCmdResp3+0x74>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <SDMMC_GetCmdResp3+0x78>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005574:	e01b      	b.n	80055ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ef      	beq.n	8005566 <SDMMC_GetCmdResp3+0x1e>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2204      	movs	r2, #4
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055a2:	2304      	movs	r3, #4
 80055a4:	e003      	b.n	80055ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	22c5      	movs	r2, #197	; 0xc5
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000000 	.word	0x20000000
 80055c0:	10624dd3 	.word	0x10624dd3

080055c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	460b      	mov	r3, r1
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055d2:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <SDMMC_GetCmdResp6+0xe4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a35      	ldr	r2, [pc, #212]	; (80056ac <SDMMC_GetCmdResp6+0xe8>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	0a5b      	lsrs	r3, r3, #9
 80055de:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	61fa      	str	r2, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f6:	e052      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <SDMMC_GetCmdResp6+0x24>
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ea      	bne.n	80055e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2204      	movs	r2, #4
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005624:	2304      	movs	r3, #4
 8005626:	e03a      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800563a:	2301      	movs	r3, #1
 800563c:	e02f      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fba0 	bl	8004d84 <SDIO_GetCommandResponse>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	4293      	cmp	r3, r2
 800564c:	d001      	beq.n	8005652 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800564e:	2301      	movs	r3, #1
 8005650:	e025      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	22c5      	movs	r2, #197	; 0xc5
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005658:	2100      	movs	r1, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fb9f 	bl	8004d9e <SDIO_GetResponse>
 8005660:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	b29a      	uxth	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005676:	2300      	movs	r3, #0
 8005678:	e011      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005688:	e009      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005698:	e001      	b.n	800569e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800569a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000
 80056ac:	10624dd3 	.word	0x10624dd3

080056b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056b8:	4b22      	ldr	r3, [pc, #136]	; (8005744 <SDMMC_GetCmdResp7+0x94>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a22      	ldr	r2, [pc, #136]	; (8005748 <SDMMC_GetCmdResp7+0x98>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0a5b      	lsrs	r3, r3, #9
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	60fa      	str	r2, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056dc:	e02c      	b.n	8005738 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ef      	beq.n	80056ce <SDMMC_GetCmdResp7+0x1e>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ea      	bne.n	80056ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800570a:	2304      	movs	r3, #4
 800570c:	e014      	b.n	8005738 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005720:	2301      	movs	r3, #1
 8005722:	e009      	b.n	8005738 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2240      	movs	r2, #64	; 0x40
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005736:	2300      	movs	r3, #0
  
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	20000000 	.word	0x20000000
 8005748:	10624dd3 	.word	0x10624dd3

0800574c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <MX_FATFS_Init+0x18>)
 8005752:	4805      	ldr	r0, [pc, #20]	; (8005768 <MX_FATFS_Init+0x1c>)
 8005754:	f002 ffba 	bl	80086cc <FATFS_LinkDriver>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <MX_FATFS_Init+0x20>)
 800575e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20008cb0 	.word	0x20008cb0
 8005768:	0800f3b8 	.word	0x0800f3b8
 800576c:	20008cac 	.word	0x20008cac

08005770 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005774:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005776:	4618      	mov	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800578a:	f000 f896 	bl	80058ba <BSP_SD_IsDetected>
 800578e:	4603      	mov	r3, r0
 8005790:	2b01      	cmp	r3, #1
 8005792:	d001      	beq.n	8005798 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e012      	b.n	80057be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005798:	480b      	ldr	r0, [pc, #44]	; (80057c8 <BSP_SD_Init+0x48>)
 800579a:	f7fd fa25 	bl	8002be8 <HAL_SD_Init>
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80057a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057ac:	4806      	ldr	r0, [pc, #24]	; (80057c8 <BSP_SD_Init+0x48>)
 80057ae:	f7fd fff1 	bl	8003794 <HAL_SD_ConfigWideBusOperation>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80057bc:	79fb      	ldrb	r3, [r7, #7]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	200000a8 	.word	0x200000a8

080057cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	4806      	ldr	r0, [pc, #24]	; (80057fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80057e4:	f7fd faae 	bl	8002d44 <HAL_SD_ReadBlocks_DMA>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200000a8 	.word	0x200000a8

08005800 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	68f9      	ldr	r1, [r7, #12]
 8005816:	4806      	ldr	r0, [pc, #24]	; (8005830 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005818:	f7fd fb76 	bl	8002f08 <HAL_SD_WriteBlocks_DMA>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200000a8 	.word	0x200000a8

08005834 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005838:	4805      	ldr	r0, [pc, #20]	; (8005850 <BSP_SD_GetCardState+0x1c>)
 800583a:	f7fe f845 	bl	80038c8 <HAL_SD_GetCardState>
 800583e:	4603      	mov	r3, r0
 8005840:	2b04      	cmp	r3, #4
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200000a8 	.word	0x200000a8

08005854 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4803      	ldr	r0, [pc, #12]	; (800586c <BSP_SD_GetCardInfo+0x18>)
 8005860:	f7fd ff6c 	bl	800373c <HAL_SD_GetCardInfo>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200000a8 	.word	0x200000a8

08005870 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005878:	f000 f818 	bl	80058ac <BSP_SD_AbortCallback>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800588c:	f000 f9b4 	bl	8005bf8 <BSP_SD_WriteCpltCallback>
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80058a0:	f000 f9bc 	bl	8005c1c <BSP_SD_ReadCpltCallback>
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0

}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80058c0:	2301      	movs	r3, #1
 80058c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80058c4:	f000 f80c 	bl	80058e0 <BSP_PlatformIsDetected>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80058ce:	2300      	movs	r3, #0
 80058d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	b2db      	uxtb	r3, r3
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80058e6:	2301      	movs	r3, #1
 80058e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80058ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058ee:	4806      	ldr	r0, [pc, #24]	; (8005908 <BSP_PlatformIsDetected+0x28>)
 80058f0:	f7fc fc9e 	bl	8002230 <HAL_GPIO_ReadPin>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80058fa:	2300      	movs	r3, #0
 80058fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80058fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40020400 	.word	0x40020400

0800590c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005914:	f002 ffe0 	bl	80088d8 <osKernelGetTickCount>
 8005918:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800591a:	e006      	b.n	800592a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800591c:	f7ff ff8a 	bl	8005834 <BSP_SD_GetCardState>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005926:	2300      	movs	r3, #0
 8005928:	e009      	b.n	800593e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800592a:	f002 ffd5 	bl	80088d8 <osKernelGetTickCount>
 800592e:	4602      	mov	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	d8f0      	bhi.n	800591c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800593a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <SD_CheckStatus+0x38>)
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005958:	f7ff ff6c 	bl	8005834 <BSP_SD_GetCardState>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <SD_CheckStatus+0x38>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <SD_CheckStatus+0x38>)
 8005970:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005972:	4b03      	ldr	r3, [pc, #12]	; (8005980 <SD_CheckStatus+0x38>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000021 	.word	0x20000021

08005984 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800598e:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <SD_initialize+0x7c>)
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005994:	f002 ff58 	bl	8008848 <osKernelGetState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b02      	cmp	r3, #2
 800599c:	d129      	bne.n	80059f2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800599e:	f7ff feef 	bl	8005780 <BSP_SD_Init>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ffcc 	bl	8005948 <SD_CheckStatus>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <SD_initialize+0x7c>)
 80059b6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <SD_initialize+0x7c>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d017      	beq.n	80059f2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <SD_initialize+0x80>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d107      	bne.n	80059da <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80059ca:	2200      	movs	r2, #0
 80059cc:	2102      	movs	r1, #2
 80059ce:	200a      	movs	r0, #10
 80059d0:	f003 f988 	bl	8008ce4 <osMessageQueueNew>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <SD_initialize+0x80>)
 80059d8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80059da:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <SD_initialize+0x80>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <SD_initialize+0x7c>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <SD_initialize+0x7c>)
 80059f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80059f2:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <SD_initialize+0x7c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000021 	.word	0x20000021
 8005a04:	20004310 	.word	0x20004310

08005a08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff97 	bl	8005948 <SD_CheckStatus>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a38:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a3c:	f7ff ff66 	bl	800590c <SD_CheckStatusWithTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da01      	bge.n	8005a4a <SD_read+0x26>
  {
    return res;
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	e02f      	b.n	8005aaa <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f7ff febc 	bl	80057cc <BSP_SD_ReadBlocks_DMA>
 8005a54:	4603      	mov	r3, r0
 8005a56:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005a58:	7fbb      	ldrb	r3, [r7, #30]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d124      	bne.n	8005aa8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <SD_read+0x90>)
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f107 0112 	add.w	r1, r7, #18
 8005a66:	f247 5330 	movw	r3, #30000	; 0x7530
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f003 fa0e 	bl	8008e8c <osMessageQueueGet>
 8005a70:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d117      	bne.n	8005aa8 <SD_read+0x84>
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d114      	bne.n	8005aa8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8005a7e:	f002 ff2b 	bl	80088d8 <osKernelGetTickCount>
 8005a82:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005a84:	e007      	b.n	8005a96 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a86:	f7ff fed5 	bl	8005834 <BSP_SD_GetCardState>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <SD_read+0x72>
              {
                res = RES_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005a94:	e008      	b.n	8005aa8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005a96:	f002 ff1f 	bl	80088d8 <osKernelGetTickCount>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d9ee      	bls.n	8005a86 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20004310 	.word	0x20004310

08005ab8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005acc:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ad0:	f7ff ff1c 	bl	800590c <SD_CheckStatusWithTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da01      	bge.n	8005ade <SD_write+0x26>
  {
    return res;
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	e02d      	b.n	8005b3a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7ff fe8c 	bl	8005800 <BSP_SD_WriteBlocks_DMA>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d124      	bne.n	8005b38 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <SD_write+0x8c>)
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	f107 0112 	add.w	r1, r7, #18
 8005af6:	f247 5330 	movw	r3, #30000	; 0x7530
 8005afa:	2200      	movs	r2, #0
 8005afc:	f003 f9c6 	bl	8008e8c <osMessageQueueGet>
 8005b00:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d117      	bne.n	8005b38 <SD_write+0x80>
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d114      	bne.n	8005b38 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8005b0e:	f002 fee3 	bl	80088d8 <osKernelGetTickCount>
 8005b12:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005b14:	e007      	b.n	8005b26 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b16:	f7ff fe8d 	bl	8005834 <BSP_SD_GetCardState>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <SD_write+0x6e>
          {
            res = RES_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
            break;
 8005b24:	e008      	b.n	8005b38 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005b26:	f002 fed7 	bl	80088d8 <osKernelGetTickCount>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d9ee      	bls.n	8005b16 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20004310 	.word	0x20004310

08005b48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	603a      	str	r2, [r7, #0]
 8005b52:	71fb      	strb	r3, [r7, #7]
 8005b54:	460b      	mov	r3, r1
 8005b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b5e:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <SD_ioctl+0xac>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <SD_ioctl+0x28>
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e03c      	b.n	8005bea <SD_ioctl+0xa2>

  switch (cmd)
 8005b70:	79bb      	ldrb	r3, [r7, #6]
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d834      	bhi.n	8005be0 <SD_ioctl+0x98>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <SD_ioctl+0x34>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b95 	.word	0x08005b95
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bc7 	.word	0x08005bc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b92:	e028      	b.n	8005be6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fe5b 	bl	8005854 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005baa:	e01c      	b.n	8005be6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fe4f 	bl	8005854 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bc4:	e00f      	b.n	8005be6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fe42 	bl	8005854 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	0a5a      	lsrs	r2, r3, #9
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bde:	e002      	b.n	8005be6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3730      	adds	r7, #48	; 0x30
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000021 	.word	0x20000021

08005bf8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <BSP_SD_WriteCpltCallback+0x20>)
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	1db9      	adds	r1, r7, #6
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f003 f8de 	bl	8008dcc <osMessageQueuePut>
#endif
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20004310 	.word	0x20004310

08005c1c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8005c22:	2301      	movs	r3, #1
 8005c24:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <BSP_SD_ReadCpltCallback+0x20>)
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	1db9      	adds	r1, r7, #6
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f003 f8cc 	bl	8008dcc <osMessageQueuePut>
#endif
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20004310 	.word	0x20004310

08005c40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <disk_status+0x30>)
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	79fa      	ldrb	r2, [r7, #7]
 8005c58:	4905      	ldr	r1, [pc, #20]	; (8005c70 <disk_status+0x30>)
 8005c5a:	440a      	add	r2, r1
 8005c5c:	7a12      	ldrb	r2, [r2, #8]
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000433c 	.word	0x2000433c

08005c74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <disk_initialize+0x48>)
 8005c86:	5cd3      	ldrb	r3, [r2, r3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d111      	bne.n	8005cb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <disk_initialize+0x48>)
 8005c90:	2101      	movs	r1, #1
 8005c92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <disk_initialize+0x48>)
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	79fa      	ldrb	r2, [r7, #7]
 8005ca2:	4906      	ldr	r1, [pc, #24]	; (8005cbc <disk_initialize+0x48>)
 8005ca4:	440a      	add	r2, r1
 8005ca6:	7a12      	ldrb	r2, [r2, #8]
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	2000433c 	.word	0x2000433c

08005cc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <disk_read+0x3c>)
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	689c      	ldr	r4, [r3, #8]
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <disk_read+0x3c>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	7a18      	ldrb	r0, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	47a0      	blx	r4
 8005cec:	4603      	mov	r3, r0
 8005cee:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2000433c 	.word	0x2000433c

08005d00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <disk_write+0x3c>)
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	68dc      	ldr	r4, [r3, #12]
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <disk_write+0x3c>)
 8005d20:	4413      	add	r3, r2
 8005d22:	7a18      	ldrb	r0, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	47a0      	blx	r4
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000433c 	.word	0x2000433c

08005d40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	603a      	str	r2, [r7, #0]
 8005d4a:	71fb      	strb	r3, [r7, #7]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <disk_ioctl+0x38>)
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	79fa      	ldrb	r2, [r7, #7]
 8005d5e:	4906      	ldr	r1, [pc, #24]	; (8005d78 <disk_ioctl+0x38>)
 8005d60:	440a      	add	r2, r1
 8005d62:	7a10      	ldrb	r0, [r2, #8]
 8005d64:	79b9      	ldrb	r1, [r7, #6]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4798      	blx	r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	2000433c 	.word	0x2000433c

08005d7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3301      	adds	r3, #1
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	b21a      	sxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b21b      	sxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b21b      	sxth	r3, r3
 8005d9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3303      	adds	r3, #3
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	3202      	adds	r2, #2
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	3201      	adds	r2, #1
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	887a      	ldrh	r2, [r7, #2]
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	887b      	ldrh	r3, [r7, #2]
 8005e0c:	0a1b      	lsrs	r3, r3, #8
 8005e0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	1c53      	adds	r3, r2, #1
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	6179      	str	r1, [r7, #20]
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f1      	bne.n	8005e9a <mem_cpy+0x1a>
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	617a      	str	r2, [r7, #20]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f3      	bne.n	8005ed2 <mem_set+0x10>
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ef8:	b480      	push	{r7}
 8005efa:	b089      	sub	sp, #36	; 0x24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	61fa      	str	r2, [r7, #28]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	61ba      	str	r2, [r7, #24]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	1acb      	subs	r3, r1, r3
 8005f24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <mem_cmp+0x40>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0eb      	beq.n	8005f10 <mem_cmp+0x18>

	return r;
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f50:	e002      	b.n	8005f58 <chk_chr+0x12>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3301      	adds	r3, #1
 8005f56:	607b      	str	r3, [r7, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <chk_chr+0x26>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d1f2      	bne.n	8005f52 <chk_chr+0xc>
	return *str;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <lock_fs+0x22>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f002 fbd2 	bl	8008738 <ff_req_grant>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <lock_fs+0x22>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <lock_fs+0x24>
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <unlock_fs+0x2e>
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	d00a      	beq.n	8005fd6 <unlock_fs+0x2e>
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b0b      	cmp	r3, #11
 8005fc4:	d007      	beq.n	8005fd6 <unlock_fs+0x2e>
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b0f      	cmp	r3, #15
 8005fca:	d004      	beq.n	8005fd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f002 fbc6 	bl	8008762 <ff_rel_grant>
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e029      	b.n	8006048 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <chk_lock+0xb4>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01d      	beq.n	800603e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006002:	4a24      	ldr	r2, [pc, #144]	; (8006094 <chk_lock+0xb4>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	4413      	add	r3, r2
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d116      	bne.n	8006042 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006014:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <chk_lock+0xb4>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4413      	add	r3, r2
 800601c:	3304      	adds	r3, #4
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006024:	429a      	cmp	r2, r3
 8006026:	d10c      	bne.n	8006042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006028:	4a1a      	ldr	r2, [pc, #104]	; (8006094 <chk_lock+0xb4>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	4413      	add	r3, r2
 8006030:	3308      	adds	r3, #8
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006038:	429a      	cmp	r2, r3
 800603a:	d102      	bne.n	8006042 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800603c:	e007      	b.n	800604e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800603e:	2301      	movs	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d9d2      	bls.n	8005ff4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d109      	bne.n	8006068 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <chk_lock+0x80>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d101      	bne.n	8006064 <chk_lock+0x84>
 8006060:	2300      	movs	r3, #0
 8006062:	e010      	b.n	8006086 <chk_lock+0xa6>
 8006064:	2312      	movs	r3, #18
 8006066:	e00e      	b.n	8006086 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d108      	bne.n	8006080 <chk_lock+0xa0>
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <chk_lock+0xb4>)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	4413      	add	r3, r2
 8006076:	330c      	adds	r3, #12
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d101      	bne.n	8006084 <chk_lock+0xa4>
 8006080:	2310      	movs	r3, #16
 8006082:	e000      	b.n	8006086 <chk_lock+0xa6>
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000431c 	.word	0x2000431c

08006098 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	e002      	b.n	80060aa <enq_lock+0x12>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3301      	adds	r3, #1
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d806      	bhi.n	80060be <enq_lock+0x26>
 80060b0:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <enq_lock+0x40>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f2      	bne.n	80060a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	2000431c 	.word	0x2000431c

080060dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e01f      	b.n	800612c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060ec:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <inc_lock+0x118>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	4413      	add	r3, r2
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d113      	bne.n	8006126 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060fe:	4a3d      	ldr	r2, [pc, #244]	; (80061f4 <inc_lock+0x118>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800610e:	429a      	cmp	r2, r3
 8006110:	d109      	bne.n	8006126 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006112:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <inc_lock+0x118>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4413      	add	r3, r2
 800611a:	3308      	adds	r3, #8
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006122:	429a      	cmp	r2, r3
 8006124:	d006      	beq.n	8006134 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d9dc      	bls.n	80060ec <inc_lock+0x10>
 8006132:	e000      	b.n	8006136 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006134:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d132      	bne.n	80061a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e002      	b.n	8006148 <inc_lock+0x6c>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d806      	bhi.n	800615c <inc_lock+0x80>
 800614e:	4a29      	ldr	r2, [pc, #164]	; (80061f4 <inc_lock+0x118>)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	4413      	add	r3, r2
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f2      	bne.n	8006142 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d101      	bne.n	8006166 <inc_lock+0x8a>
 8006162:	2300      	movs	r3, #0
 8006164:	e040      	b.n	80061e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4922      	ldr	r1, [pc, #136]	; (80061f4 <inc_lock+0x118>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	440b      	add	r3, r1
 8006172:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	491e      	ldr	r1, [pc, #120]	; (80061f4 <inc_lock+0x118>)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	440b      	add	r3, r1
 8006180:	3304      	adds	r3, #4
 8006182:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	491a      	ldr	r1, [pc, #104]	; (80061f4 <inc_lock+0x118>)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	440b      	add	r3, r1
 8006190:	3308      	adds	r3, #8
 8006192:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006194:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <inc_lock+0x118>)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	4413      	add	r3, r2
 800619c:	330c      	adds	r3, #12
 800619e:	2200      	movs	r2, #0
 80061a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <inc_lock+0xe0>
 80061a8:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <inc_lock+0x118>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4413      	add	r3, r2
 80061b0:	330c      	adds	r3, #12
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <inc_lock+0xe0>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e015      	b.n	80061e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d108      	bne.n	80061d4 <inc_lock+0xf8>
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <inc_lock+0x118>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	4413      	add	r3, r2
 80061ca:	330c      	adds	r3, #12
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	e001      	b.n	80061d8 <inc_lock+0xfc>
 80061d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d8:	4906      	ldr	r1, [pc, #24]	; (80061f4 <inc_lock+0x118>)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	440b      	add	r3, r1
 80061e0:	330c      	adds	r3, #12
 80061e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	2000431c 	.word	0x2000431c

080061f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e010      	b.n	8006228 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006206:	4a0d      	ldr	r2, [pc, #52]	; (800623c <clear_lock+0x44>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	4413      	add	r3, r2
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d105      	bne.n	8006222 <clear_lock+0x2a>
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <clear_lock+0x44>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d9eb      	bls.n	8006206 <clear_lock+0xe>
	}
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	2000431c 	.word	0x2000431c

08006240 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d034      	beq.n	80062be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7858      	ldrb	r0, [r3, #1]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006264:	2301      	movs	r3, #1
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	f7ff fd4a 	bl	8005d00 <disk_write>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e022      	b.n	80062be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	429a      	cmp	r2, r3
 800628c:	d217      	bcs.n	80062be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	789b      	ldrb	r3, [r3, #2]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e010      	b.n	80062b8 <sync_window+0x78>
					wsect += fs->fsize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7858      	ldrb	r0, [r3, #1]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062aa:	2301      	movs	r3, #1
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	f7ff fd27 	bl	8005d00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d8eb      	bhi.n	8006296 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01b      	beq.n	8006318 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ffad 	bl	8006240 <sync_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d113      	bne.n	8006318 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	7858      	ldrb	r0, [r3, #1]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062fa:	2301      	movs	r3, #1
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f7ff fcdf 	bl	8005cc0 <disk_read>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800630c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff87 	bl	8006240 <sync_window>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d159      	bne.n	80063f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d149      	bne.n	80063d8 <sync_fs+0xb4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d145      	bne.n	80063d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	899b      	ldrh	r3, [r3, #12]
 8006356:	461a      	mov	r2, r3
 8006358:	2100      	movs	r1, #0
 800635a:	f7ff fdb2 	bl	8005ec2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3338      	adds	r3, #56	; 0x38
 8006362:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006366:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fd41 	bl	8005df2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3338      	adds	r3, #56	; 0x38
 8006374:	4921      	ldr	r1, [pc, #132]	; (80063fc <sync_fs+0xd8>)
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fd56 	bl	8005e28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006384:	491e      	ldr	r1, [pc, #120]	; (8006400 <sync_fs+0xdc>)
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd4e 	bl	8005e28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3338      	adds	r3, #56	; 0x38
 8006390:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7ff fd44 	bl	8005e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3338      	adds	r3, #56	; 0x38
 80063a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7ff fd3a 	bl	8005e28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7858      	ldrb	r0, [r3, #1]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063cc:	2301      	movs	r3, #1
 80063ce:	f7ff fc97 	bl	8005d00 <disk_write>
			fs->fsi_flag = 0;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2200      	movs	r2, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fcad 	bl	8005d40 <disk_ioctl>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <sync_fs+0xcc>
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	41615252 	.word	0x41615252
 8006400:	61417272 	.word	0x61417272

08006404 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3b02      	subs	r3, #2
 8006412:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	3b02      	subs	r3, #2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d301      	bcc.n	8006424 <clust2sect+0x20>
 8006420:	2300      	movs	r3, #0
 8006422:	e008      	b.n	8006436 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	461a      	mov	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	fb03 f202 	mul.w	r2, r3, r2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	4413      	add	r3, r2
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d904      	bls.n	8006462 <get_fat+0x20>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e0bb      	b.n	80065e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b03      	cmp	r3, #3
 8006474:	f000 8083 	beq.w	800657e <get_fat+0x13c>
 8006478:	2b03      	cmp	r3, #3
 800647a:	f300 80a7 	bgt.w	80065cc <get_fat+0x18a>
 800647e:	2b01      	cmp	r3, #1
 8006480:	d002      	beq.n	8006488 <get_fat+0x46>
 8006482:	2b02      	cmp	r3, #2
 8006484:	d056      	beq.n	8006534 <get_fat+0xf2>
 8006486:	e0a1      	b.n	80065cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	899b      	ldrh	r3, [r3, #12]
 800649e:	4619      	mov	r1, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a6:	4413      	add	r3, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	6938      	ldr	r0, [r7, #16]
 80064ac:	f7ff ff0c 	bl	80062c8 <move_window>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 808d 	bne.w	80065d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	60fa      	str	r2, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	8992      	ldrh	r2, [r2, #12]
 80064c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c6:	fb02 f201 	mul.w	r2, r2, r1
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	899b      	ldrh	r3, [r3, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e6:	4413      	add	r3, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7ff feec 	bl	80062c8 <move_window>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d16f      	bne.n	80065d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	899b      	ldrh	r3, [r3, #12]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006502:	fb02 f201 	mul.w	r2, r2, r1
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <get_fat+0xe8>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	e002      	b.n	8006530 <get_fat+0xee>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006530:	617b      	str	r3, [r7, #20]
			break;
 8006532:	e055      	b.n	80065e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	899b      	ldrh	r3, [r3, #12]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	4619      	mov	r1, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	fbb3 f3f1 	udiv	r3, r3, r1
 8006548:	4413      	add	r3, r2
 800654a:	4619      	mov	r1, r3
 800654c:	6938      	ldr	r0, [r7, #16]
 800654e:	f7ff febb 	bl	80062c8 <move_window>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d140      	bne.n	80065da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	8992      	ldrh	r2, [r2, #12]
 8006566:	fbb3 f0f2 	udiv	r0, r3, r2
 800656a:	fb02 f200 	mul.w	r2, r2, r0
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	440b      	add	r3, r1
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fc02 	bl	8005d7c <ld_word>
 8006578:	4603      	mov	r3, r0
 800657a:	617b      	str	r3, [r7, #20]
			break;
 800657c:	e030      	b.n	80065e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	899b      	ldrh	r3, [r3, #12]
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006592:	4413      	add	r3, r2
 8006594:	4619      	mov	r1, r3
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f7ff fe96 	bl	80062c8 <move_window>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d11d      	bne.n	80065de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	8992      	ldrh	r2, [r2, #12]
 80065b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065b4:	fb02 f200 	mul.w	r2, r2, r0
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	440b      	add	r3, r1
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff fbf5 	bl	8005dac <ld_dword>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065c8:	617b      	str	r3, [r7, #20]
			break;
 80065ca:	e009      	b.n	80065e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e006      	b.n	80065e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065d2:	bf00      	nop
 80065d4:	e004      	b.n	80065e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065d6:	bf00      	nop
 80065d8:	e002      	b.n	80065e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065de:	bf00      	nop
		}
	}

	return val;
 80065e0:	697b      	ldr	r3, [r7, #20]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065ea:	b590      	push	{r4, r7, lr}
 80065ec:	b089      	sub	sp, #36	; 0x24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065f6:	2302      	movs	r3, #2
 80065f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	f240 8102 	bls.w	8006806 <put_fat+0x21c>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	f080 80fc 	bcs.w	8006806 <put_fat+0x21c>
		switch (fs->fs_type) {
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b03      	cmp	r3, #3
 8006614:	f000 80b6 	beq.w	8006784 <put_fat+0x19a>
 8006618:	2b03      	cmp	r3, #3
 800661a:	f300 80fd 	bgt.w	8006818 <put_fat+0x22e>
 800661e:	2b01      	cmp	r3, #1
 8006620:	d003      	beq.n	800662a <put_fat+0x40>
 8006622:	2b02      	cmp	r3, #2
 8006624:	f000 8083 	beq.w	800672e <put_fat+0x144>
 8006628:	e0f6      	b.n	8006818 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4413      	add	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	899b      	ldrh	r3, [r3, #12]
 8006640:	4619      	mov	r1, r3
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	fbb3 f3f1 	udiv	r3, r3, r1
 8006648:	4413      	add	r3, r2
 800664a:	4619      	mov	r1, r3
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff fe3b 	bl	80062c8 <move_window>
 8006652:	4603      	mov	r3, r0
 8006654:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006656:	7ffb      	ldrb	r3, [r7, #31]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 80d6 	bne.w	800680a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	61ba      	str	r2, [r7, #24]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	8992      	ldrh	r2, [r2, #12]
 800666e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006672:	fb02 f200 	mul.w	r2, r2, r0
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	440b      	add	r3, r1
 800667a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <put_fat+0xb8>
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b25b      	sxtb	r3, r3
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	b25a      	sxtb	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	b25b      	sxtb	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b25b      	sxtb	r3, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e001      	b.n	80066a6 <put_fat+0xbc>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	899b      	ldrh	r3, [r3, #12]
 80066b8:	4619      	mov	r1, r3
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80066c0:	4413      	add	r3, r2
 80066c2:	4619      	mov	r1, r3
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fdff 	bl	80062c8 <move_window>
 80066ca:	4603      	mov	r3, r0
 80066cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 809c 	bne.w	800680e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	899b      	ldrh	r3, [r3, #12]
 80066e0:	461a      	mov	r2, r3
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80066e8:	fb02 f200 	mul.w	r2, r2, r0
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	440b      	add	r3, r1
 80066f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <put_fat+0x11a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e00e      	b.n	8006722 <put_fat+0x138>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b25b      	sxtb	r3, r3
 800670a:	f023 030f 	bic.w	r3, r3, #15
 800670e:	b25a      	sxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	b25b      	sxtb	r3, r3
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	b25b      	sxtb	r3, r3
 800671c:	4313      	orrs	r3, r2
 800671e:	b25b      	sxtb	r3, r3
 8006720:	b2db      	uxtb	r3, r3
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	70da      	strb	r2, [r3, #3]
			break;
 800672c:	e074      	b.n	8006818 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	899b      	ldrh	r3, [r3, #12]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	b29b      	uxth	r3, r3
 800673a:	4619      	mov	r1, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006742:	4413      	add	r3, r2
 8006744:	4619      	mov	r1, r3
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff fdbe 	bl	80062c8 <move_window>
 800674c:	4603      	mov	r3, r0
 800674e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006750:	7ffb      	ldrb	r3, [r7, #31]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d15d      	bne.n	8006812 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	8992      	ldrh	r2, [r2, #12]
 8006764:	fbb3 f0f2 	udiv	r0, r3, r2
 8006768:	fb02 f200 	mul.w	r2, r2, r0
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	440b      	add	r3, r1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	b292      	uxth	r2, r2
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fb3b 	bl	8005df2 <st_word>
			fs->wflag = 1;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	70da      	strb	r2, [r3, #3]
			break;
 8006782:	e049      	b.n	8006818 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	899b      	ldrh	r3, [r3, #12]
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	b29b      	uxth	r3, r3
 8006790:	4619      	mov	r1, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	fbb3 f3f1 	udiv	r3, r3, r1
 8006798:	4413      	add	r3, r2
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fd93 	bl	80062c8 <move_window>
 80067a2:	4603      	mov	r3, r0
 80067a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067a6:	7ffb      	ldrb	r3, [r7, #31]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d134      	bne.n	8006816 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	8992      	ldrh	r2, [r2, #12]
 80067c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80067c4:	fb02 f200 	mul.w	r2, r2, r0
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	440b      	add	r3, r1
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff faed 	bl	8005dac <ld_dword>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80067d8:	4323      	orrs	r3, r4
 80067da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	8992      	ldrh	r2, [r2, #12]
 80067ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80067ee:	fb02 f200 	mul.w	r2, r2, r0
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	440b      	add	r3, r1
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fb15 	bl	8005e28 <st_dword>
			fs->wflag = 1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	70da      	strb	r2, [r3, #3]
			break;
 8006804:	e008      	b.n	8006818 <put_fat+0x22e>
		}
	}
 8006806:	bf00      	nop
 8006808:	e006      	b.n	8006818 <put_fat+0x22e>
			if (res != FR_OK) break;
 800680a:	bf00      	nop
 800680c:	e004      	b.n	8006818 <put_fat+0x22e>
			if (res != FR_OK) break;
 800680e:	bf00      	nop
 8006810:	e002      	b.n	8006818 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006816:	bf00      	nop
	return res;
 8006818:	7ffb      	ldrb	r3, [r7, #31]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}

08006822 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b088      	sub	sp, #32
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d904      	bls.n	8006848 <remove_chain+0x26>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	d301      	bcc.n	800684c <remove_chain+0x2a>
 8006848:	2302      	movs	r3, #2
 800684a:	e04b      	b.n	80068e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00c      	beq.n	800686c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	69b8      	ldr	r0, [r7, #24]
 800685a:	f7ff fec6 	bl	80065ea <put_fat>
 800685e:	4603      	mov	r3, r0
 8006860:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <remove_chain+0x4a>
 8006868:	7ffb      	ldrb	r3, [r7, #31]
 800686a:	e03b      	b.n	80068e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fde7 	bl	8006442 <get_fat>
 8006874:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d031      	beq.n	80068e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <remove_chain+0x64>
 8006882:	2302      	movs	r3, #2
 8006884:	e02e      	b.n	80068e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688c:	d101      	bne.n	8006892 <remove_chain+0x70>
 800688e:	2301      	movs	r3, #1
 8006890:	e028      	b.n	80068e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006892:	2200      	movs	r2, #0
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	69b8      	ldr	r0, [r7, #24]
 8006898:	f7ff fea7 	bl	80065ea <put_fat>
 800689c:	4603      	mov	r3, r0
 800689e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <remove_chain+0x88>
 80068a6:	7ffb      	ldrb	r3, [r7, #31]
 80068a8:	e01c      	b.n	80068e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	3b02      	subs	r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d20b      	bcs.n	80068d0 <remove_chain+0xae>
			fs->free_clst++;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3c6      	bcc.n	800686c <remove_chain+0x4a>
 80068de:	e000      	b.n	80068e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80068e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10d      	bne.n	800691e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <create_chain+0x2c>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	d31b      	bcc.n	8006950 <create_chain+0x64>
 8006918:	2301      	movs	r3, #1
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e018      	b.n	8006950 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fd8e 	bl	8006442 <get_fat>
 8006926:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d801      	bhi.n	8006932 <create_chain+0x46>
 800692e:	2301      	movs	r3, #1
 8006930:	e070      	b.n	8006a14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006938:	d101      	bne.n	800693e <create_chain+0x52>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	e06a      	b.n	8006a14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	429a      	cmp	r2, r3
 8006946:	d201      	bcs.n	800694c <create_chain+0x60>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	e063      	b.n	8006a14 <create_chain+0x128>
		scl = clst;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	3301      	adds	r3, #1
 8006958:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	429a      	cmp	r2, r3
 8006962:	d307      	bcc.n	8006974 <create_chain+0x88>
				ncl = 2;
 8006964:	2302      	movs	r3, #2
 8006966:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	d901      	bls.n	8006974 <create_chain+0x88>
 8006970:	2300      	movs	r3, #0
 8006972:	e04f      	b.n	8006a14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006974:	69f9      	ldr	r1, [r7, #28]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fd63 	bl	8006442 <get_fat>
 800697c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d003      	beq.n	8006992 <create_chain+0xa6>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006990:	d101      	bne.n	8006996 <create_chain+0xaa>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	e03e      	b.n	8006a14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	429a      	cmp	r2, r3
 800699c:	d1da      	bne.n	8006954 <create_chain+0x68>
 800699e:	2300      	movs	r3, #0
 80069a0:	e038      	b.n	8006a14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80069a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a8:	69f9      	ldr	r1, [r7, #28]
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f7ff fe1d 	bl	80065ea <put_fat>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <create_chain+0xe2>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6938      	ldr	r0, [r7, #16]
 80069c6:	f7ff fe10 	bl	80065ea <put_fat>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d116      	bne.n	8006a02 <create_chain+0x116>
		fs->last_clst = ncl;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	3b02      	subs	r3, #2
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d804      	bhi.n	80069f2 <create_chain+0x106>
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	711a      	strb	r2, [r3, #4]
 8006a00:	e007      	b.n	8006a12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d102      	bne.n	8006a0e <create_chain+0x122>
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0c:	e000      	b.n	8006a10 <create_chain+0x124>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a12:	69fb      	ldr	r3, [r7, #28]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	3304      	adds	r3, #4
 8006a32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	899b      	ldrh	r3, [r3, #12]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	8952      	ldrh	r2, [r2, #10]
 8006a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	613a      	str	r2, [r7, #16]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <clmt_clust+0x42>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e010      	b.n	8006a80 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d307      	bcc.n	8006a76 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3304      	adds	r3, #4
 8006a72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a74:	e7e9      	b.n	8006a4a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006a76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4413      	add	r3, r2
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa2:	d204      	bcs.n	8006aae <dir_sdi+0x22>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e071      	b.n	8006b96 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d106      	bne.n	8006ad2 <dir_sdi+0x46>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d902      	bls.n	8006ad2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	8912      	ldrh	r2, [r2, #8]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d301      	bcc.n	8006ae8 <dir_sdi+0x5c>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e056      	b.n	8006b96 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61da      	str	r2, [r3, #28]
 8006af0:	e02d      	b.n	8006b4e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	895b      	ldrh	r3, [r3, #10]
 8006af6:	461a      	mov	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	899b      	ldrh	r3, [r3, #12]
 8006afc:	fb03 f302 	mul.w	r3, r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b02:	e019      	b.n	8006b38 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fc9a 	bl	8006442 <get_fat>
 8006b0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d101      	bne.n	8006b1c <dir_sdi+0x90>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e03c      	b.n	8006b96 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d904      	bls.n	8006b2c <dir_sdi+0xa0>
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d301      	bcc.n	8006b30 <dir_sdi+0xa4>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e032      	b.n	8006b96 <dir_sdi+0x10a>
			ofs -= csz;
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d2e1      	bcs.n	8006b04 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	6938      	ldr	r0, [r7, #16]
 8006b44:	f7ff fc5e 	bl	8006404 <clust2sect>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <dir_sdi+0xd4>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e01a      	b.n	8006b96 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	899b      	ldrh	r3, [r3, #12]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b70:	441a      	add	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	899b      	ldrh	r3, [r3, #12]
 8006b80:	461a      	mov	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b88:	fb02 f200 	mul.w	r2, r2, r0
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	18ca      	adds	r2, r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <dir_next+0x28>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc4:	d301      	bcc.n	8006bca <dir_next+0x2c>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	e0bb      	b.n	8006d42 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	899b      	ldrh	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bd6:	fb02 f201 	mul.w	r2, r2, r1
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 809d 	bne.w	8006d1c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	8912      	ldrh	r2, [r2, #8]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	f0c0 808d 	bcc.w	8006d1c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	61da      	str	r2, [r3, #28]
 8006c08:	2304      	movs	r3, #4
 8006c0a:	e09a      	b.n	8006d42 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	899b      	ldrh	r3, [r3, #12]
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	8952      	ldrh	r2, [r2, #10]
 8006c1c:	3a01      	subs	r2, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d17b      	bne.n	8006d1c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	f7ff fc08 	bl	8006442 <get_fat>
 8006c32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d801      	bhi.n	8006c3e <dir_next+0xa0>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e081      	b.n	8006d42 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c44:	d101      	bne.n	8006c4a <dir_next+0xac>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e07b      	b.n	8006d42 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d359      	bcc.n	8006d08 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	61da      	str	r2, [r3, #28]
 8006c60:	2304      	movs	r3, #4
 8006c62:	e06e      	b.n	8006d42 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7ff fe3d 	bl	80068ec <create_chain>
 8006c72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <dir_next+0xe0>
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	e061      	b.n	8006d42 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <dir_next+0xea>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e05c      	b.n	8006d42 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8e:	d101      	bne.n	8006c94 <dir_next+0xf6>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e056      	b.n	8006d42 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7ff fad3 	bl	8006240 <sync_window>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <dir_next+0x106>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e04e      	b.n	8006d42 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	899b      	ldrh	r3, [r3, #12]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	f7ff f906 	bl	8005ec2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	6979      	ldr	r1, [r7, #20]
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fba1 	bl	8006404 <clust2sect>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8006cc8:	e012      	b.n	8006cf0 <dir_next+0x152>
						fs->wflag = 1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff fab5 	bl	8006240 <sync_window>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <dir_next+0x142>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e030      	b.n	8006d42 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	635a      	str	r2, [r3, #52]	; 0x34
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	895b      	ldrh	r3, [r3, #10]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d3e6      	bcc.n	8006cca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fb77 	bl	8006404 <clust2sect>
 8006d16:	4602      	mov	r2, r0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	899b      	ldrh	r3, [r3, #12]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d34:	fb02 f200 	mul.w	r2, r2, r0
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	18ca      	adds	r2, r1, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe95 	bl	8006a8c <dir_sdi>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d12b      	bne.n	8006dc4 <dir_alloc+0x7a>
		n = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff faa6 	bl	80062c8 <move_window>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11d      	bne.n	8006dc2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2be5      	cmp	r3, #229	; 0xe5
 8006d8e:	d004      	beq.n	8006d9a <dir_alloc+0x50>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d102      	bne.n	8006dae <dir_alloc+0x64>
 8006da8:	e00c      	b.n	8006dc4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006dae:	2101      	movs	r1, #1
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fef4 	bl	8006b9e <dir_next>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0d7      	beq.n	8006d70 <dir_alloc+0x26>
 8006dc0:	e000      	b.n	8006dc4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dc2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d101      	bne.n	8006dce <dir_alloc+0x84>
 8006dca:	2307      	movs	r3, #7
 8006dcc:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	331a      	adds	r3, #26
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe ffc8 	bl	8005d7c <ld_word>
 8006dec:	4603      	mov	r3, r0
 8006dee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d109      	bne.n	8006e0c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	3314      	adds	r3, #20
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe ffbd 	bl	8005d7c <ld_word>
 8006e02:	4603      	mov	r3, r0
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	331a      	adds	r3, #26
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	b292      	uxth	r2, r2
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe ffe0 	bl	8005df2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d109      	bne.n	8006e4e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f103 0214 	add.w	r2, r3, #20
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fe ffd2 	bl	8005df2 <st_word>
	}
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fe10 	bl	8006a8c <dir_sdi>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <dir_find+0x24>
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	e03e      	b.n	8006ef8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6938      	ldr	r0, [r7, #16]
 8006e82:	f7ff fa21 	bl	80062c8 <move_window>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d12f      	bne.n	8006ef0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <dir_find+0x4e>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	75fb      	strb	r3, [r7, #23]
 8006ea2:	e028      	b.n	8006ef6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	330b      	adds	r3, #11
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	330b      	adds	r3, #11
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <dir_find+0x86>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a18      	ldr	r0, [r3, #32]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3324      	adds	r3, #36	; 0x24
 8006ece:	220b      	movs	r2, #11
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f7ff f811 	bl	8005ef8 <mem_cmp>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fe5d 	bl	8006b9e <dir_next>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0c5      	beq.n	8006e7a <dir_find+0x24>
 8006eee:	e002      	b.n	8006ef6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ef4:	bf00      	nop

	return res;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f0e:	2101      	movs	r1, #1
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff1a 	bl	8006d4a <dir_alloc>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11c      	bne.n	8006f5a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	4619      	mov	r1, r3
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f7ff f9ce 	bl	80062c8 <move_window>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d111      	bne.n	8006f5a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe ffbf 	bl	8005ec2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a18      	ldr	r0, [r3, #32]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3324      	adds	r3, #36	; 0x24
 8006f4c:	220b      	movs	r2, #11
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f7fe ff96 	bl	8005e80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2201      	movs	r2, #1
 8006f58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3324      	adds	r3, #36	; 0x24
 8006f78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006f7a:	220b      	movs	r2, #11
 8006f7c:	2120      	movs	r1, #32
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7fe ff9f 	bl	8005ec2 <mem_set>
	si = i = 0; ni = 8;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	61fa      	str	r2, [r7, #28]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f9e:	7efb      	ldrb	r3, [r7, #27]
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d94e      	bls.n	8007042 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006fa4:	7efb      	ldrb	r3, [r7, #27]
 8006fa6:	2b2f      	cmp	r3, #47	; 0x2f
 8006fa8:	d006      	beq.n	8006fb8 <create_name+0x54>
 8006faa:	7efb      	ldrb	r3, [r7, #27]
 8006fac:	2b5c      	cmp	r3, #92	; 0x5c
 8006fae:	d110      	bne.n	8006fd2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fb0:	e002      	b.n	8006fb8 <create_name+0x54>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8006fc2:	d0f6      	beq.n	8006fb2 <create_name+0x4e>
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8006fce:	d0f0      	beq.n	8006fb2 <create_name+0x4e>
			break;
 8006fd0:	e038      	b.n	8007044 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006fd2:	7efb      	ldrb	r3, [r7, #27]
 8006fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd6:	d003      	beq.n	8006fe0 <create_name+0x7c>
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d30c      	bcc.n	8006ffa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b0b      	cmp	r3, #11
 8006fe4:	d002      	beq.n	8006fec <create_name+0x88>
 8006fe6:	7efb      	ldrb	r3, [r7, #27]
 8006fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fea:	d001      	beq.n	8006ff0 <create_name+0x8c>
 8006fec:	2306      	movs	r3, #6
 8006fee:	e044      	b.n	800707a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	230b      	movs	r3, #11
 8006ff6:	617b      	str	r3, [r7, #20]
			continue;
 8006ff8:	e022      	b.n	8007040 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da04      	bge.n	800700c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007002:	7efb      	ldrb	r3, [r7, #27]
 8007004:	3b80      	subs	r3, #128	; 0x80
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <create_name+0x120>)
 8007008:	5cd3      	ldrb	r3, [r2, r3]
 800700a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800700c:	7efb      	ldrb	r3, [r7, #27]
 800700e:	4619      	mov	r1, r3
 8007010:	481d      	ldr	r0, [pc, #116]	; (8007088 <create_name+0x124>)
 8007012:	f7fe ff98 	bl	8005f46 <chk_chr>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <create_name+0xbc>
 800701c:	2306      	movs	r3, #6
 800701e:	e02c      	b.n	800707a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007020:	7efb      	ldrb	r3, [r7, #27]
 8007022:	2b60      	cmp	r3, #96	; 0x60
 8007024:	d905      	bls.n	8007032 <create_name+0xce>
 8007026:	7efb      	ldrb	r3, [r7, #27]
 8007028:	2b7a      	cmp	r3, #122	; 0x7a
 800702a:	d802      	bhi.n	8007032 <create_name+0xce>
 800702c:	7efb      	ldrb	r3, [r7, #27]
 800702e:	3b20      	subs	r3, #32
 8007030:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	613a      	str	r2, [r7, #16]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	4413      	add	r3, r2
 800703c:	7efa      	ldrb	r2, [r7, #27]
 800703e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007040:	e7a6      	b.n	8006f90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007042:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	441a      	add	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <create_name+0xf4>
 8007054:	2306      	movs	r3, #6
 8007056:	e010      	b.n	800707a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2be5      	cmp	r3, #229	; 0xe5
 800705e:	d102      	bne.n	8007066 <create_name+0x102>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2205      	movs	r2, #5
 8007064:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007066:	7efb      	ldrb	r3, [r7, #27]
 8007068:	2b20      	cmp	r3, #32
 800706a:	d801      	bhi.n	8007070 <create_name+0x10c>
 800706c:	2204      	movs	r2, #4
 800706e:	e000      	b.n	8007072 <create_name+0x10e>
 8007070:	2200      	movs	r2, #0
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	330b      	adds	r3, #11
 8007076:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007078:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	0800f3cc 	.word	0x0800f3cc
 8007088:	0800ca44 	.word	0x0800ca44

0800708c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80070a0:	e002      	b.n	80070a8 <follow_path+0x1c>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b2f      	cmp	r3, #47	; 0x2f
 80070ae:	d0f8      	beq.n	80070a2 <follow_path+0x16>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b5c      	cmp	r3, #92	; 0x5c
 80070b6:	d0f4      	beq.n	80070a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2200      	movs	r2, #0
 80070bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b1f      	cmp	r3, #31
 80070c4:	d80a      	bhi.n	80070dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fcdb 	bl	8006a8c <dir_sdi>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]
 80070da:	e048      	b.n	800716e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070dc:	463b      	mov	r3, r7
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff3f 	bl	8006f64 <create_name>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d139      	bne.n	8007164 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff feb0 	bl	8006e56 <dir_find>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007100:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b04      	cmp	r3, #4
 800710c:	d12c      	bne.n	8007168 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d127      	bne.n	8007168 <follow_path+0xdc>
 8007118:	2305      	movs	r3, #5
 800711a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800711c:	e024      	b.n	8007168 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d121      	bne.n	800716c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	799b      	ldrb	r3, [r3, #6]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007134:	2305      	movs	r3, #5
 8007136:	75fb      	strb	r3, [r7, #23]
 8007138:	e019      	b.n	800716e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	8992      	ldrh	r2, [r2, #12]
 8007148:	fbb3 f0f2 	udiv	r0, r3, r2
 800714c:	fb02 f200 	mul.w	r2, r2, r0
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	440b      	add	r3, r1
 8007154:	4619      	mov	r1, r3
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fe3e 	bl	8006dd8 <ld_clust>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007162:	e7bb      	b.n	80070dc <follow_path+0x50>
			if (res != FR_OK) break;
 8007164:	bf00      	nop
 8007166:	e002      	b.n	800716e <follow_path+0xe2>
				break;
 8007168:	bf00      	nop
 800716a:	e000      	b.n	800716e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800716c:	bf00      	nop
			}
		}
	}

	return res;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007184:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d031      	beq.n	80071f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e002      	b.n	800719c <get_ldnumber+0x24>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	3301      	adds	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d903      	bls.n	80071ac <get_ldnumber+0x34>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b3a      	cmp	r3, #58	; 0x3a
 80071aa:	d1f4      	bne.n	8007196 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b3a      	cmp	r3, #58	; 0x3a
 80071b2:	d11c      	bne.n	80071ee <get_ldnumber+0x76>
			tp = *path;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	60fa      	str	r2, [r7, #12]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	3b30      	subs	r3, #48	; 0x30
 80071c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d80e      	bhi.n	80071ea <get_ldnumber+0x72>
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d10a      	bne.n	80071ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <get_ldnumber+0x72>
					vol = (int)i;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	3301      	adds	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	e002      	b.n	80071f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80071ee:	2300      	movs	r3, #0
 80071f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80071f2:	693b      	ldr	r3, [r7, #16]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	70da      	strb	r2, [r3, #3]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007216:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff f854 	bl	80062c8 <move_window>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <check_fs+0x2a>
 8007226:	2304      	movs	r3, #4
 8007228:	e038      	b.n	800729c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3338      	adds	r3, #56	; 0x38
 800722e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fda2 	bl	8005d7c <ld_word>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <check_fs+0x48>
 8007244:	2303      	movs	r3, #3
 8007246:	e029      	b.n	800729c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800724e:	2be9      	cmp	r3, #233	; 0xe9
 8007250:	d009      	beq.n	8007266 <check_fs+0x66>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007258:	2beb      	cmp	r3, #235	; 0xeb
 800725a:	d11e      	bne.n	800729a <check_fs+0x9a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007262:	2b90      	cmp	r3, #144	; 0x90
 8007264:	d119      	bne.n	800729a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3338      	adds	r3, #56	; 0x38
 800726a:	3336      	adds	r3, #54	; 0x36
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe fd9d 	bl	8005dac <ld_dword>
 8007272:	4603      	mov	r3, r0
 8007274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007278:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <check_fs+0xa4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d101      	bne.n	8007282 <check_fs+0x82>
 800727e:	2300      	movs	r3, #0
 8007280:	e00c      	b.n	800729c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3338      	adds	r3, #56	; 0x38
 8007286:	3352      	adds	r3, #82	; 0x52
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fd8f 	bl	8005dac <ld_dword>
 800728e:	4603      	mov	r3, r0
 8007290:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <check_fs+0xa8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d101      	bne.n	800729a <check_fs+0x9a>
 8007296:	2300      	movs	r3, #0
 8007298:	e000      	b.n	800729c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800729a:	2302      	movs	r3, #2
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	00544146 	.word	0x00544146
 80072a8:	33544146 	.word	0x33544146

080072ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b096      	sub	sp, #88	; 0x58
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff ff59 	bl	8007178 <get_ldnumber>
 80072c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80072c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da01      	bge.n	80072d2 <find_volume+0x26>
 80072ce:	230b      	movs	r3, #11
 80072d0:	e26c      	b.n	80077ac <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80072d2:	4aa4      	ldr	r2, [pc, #656]	; (8007564 <find_volume+0x2b8>)
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <find_volume+0x3a>
 80072e2:	230c      	movs	r3, #12
 80072e4:	e262      	b.n	80077ac <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80072e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072e8:	f7fe fe48 	bl	8005f7c <lock_fs>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <find_volume+0x4a>
 80072f2:	230f      	movs	r3, #15
 80072f4:	e25a      	b.n	80077ac <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01a      	beq.n	8007342 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe fc95 	bl	8005c40 <disk_status>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800731c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <find_volume+0x92>
 800732e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800733a:	230a      	movs	r3, #10
 800733c:	e236      	b.n	80077ac <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800733e:	2300      	movs	r3, #0
 8007340:	e234      	b.n	80077ac <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	b2da      	uxtb	r2, r3
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fc8d 	bl	8005c74 <disk_initialize>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800736c:	2303      	movs	r3, #3
 800736e:	e21d      	b.n	80077ac <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <find_volume+0xda>
 8007376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007382:	230a      	movs	r3, #10
 8007384:	e212      	b.n	80077ac <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	7858      	ldrb	r0, [r3, #1]
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	330c      	adds	r3, #12
 800738e:	461a      	mov	r2, r3
 8007390:	2102      	movs	r1, #2
 8007392:	f7fe fcd5 	bl	8005d40 <disk_ioctl>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <find_volume+0xf4>
 800739c:	2301      	movs	r3, #1
 800739e:	e205      	b.n	80077ac <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	899b      	ldrh	r3, [r3, #12]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a8:	d80d      	bhi.n	80073c6 <find_volume+0x11a>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	899b      	ldrh	r3, [r3, #12]
 80073ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b2:	d308      	bcc.n	80073c6 <find_volume+0x11a>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	899b      	ldrh	r3, [r3, #12]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	899b      	ldrh	r3, [r3, #12]
 80073be:	3b01      	subs	r3, #1
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <find_volume+0x11e>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e1f0      	b.n	80077ac <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80073ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073d2:	f7ff ff15 	bl	8007200 <check_fs>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80073dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d14b      	bne.n	800747c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80073e4:	2300      	movs	r3, #0
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
 80073e8:	e01f      	b.n	800742a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80073f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80073f8:	4413      	add	r3, r2
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	3304      	adds	r3, #4
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <find_volume+0x168>
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	3308      	adds	r3, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fcce 	bl	8005dac <ld_dword>
 8007410:	4602      	mov	r2, r0
 8007412:	e000      	b.n	8007416 <find_volume+0x16a>
 8007414:	2200      	movs	r2, #0
 8007416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800741e:	440b      	add	r3, r1
 8007420:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007426:	3301      	adds	r3, #1
 8007428:	643b      	str	r3, [r7, #64]	; 0x40
 800742a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742c:	2b03      	cmp	r3, #3
 800742e:	d9dc      	bls.n	80073ea <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007430:	2300      	movs	r3, #0
 8007432:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <find_volume+0x194>
 800743a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743c:	3b01      	subs	r3, #1
 800743e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007448:	4413      	add	r3, r2
 800744a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800744e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <find_volume+0x1b6>
 8007456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800745a:	f7ff fed1 	bl	8007200 <check_fs>
 800745e:	4603      	mov	r3, r0
 8007460:	e000      	b.n	8007464 <find_volume+0x1b8>
 8007462:	2303      	movs	r3, #3
 8007464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800746c:	2b01      	cmp	r3, #1
 800746e:	d905      	bls.n	800747c <find_volume+0x1d0>
 8007470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007472:	3301      	adds	r3, #1
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
 8007476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007478:	2b03      	cmp	r3, #3
 800747a:	d9e1      	bls.n	8007440 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800747c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007480:	2b04      	cmp	r3, #4
 8007482:	d101      	bne.n	8007488 <find_volume+0x1dc>
 8007484:	2301      	movs	r3, #1
 8007486:	e191      	b.n	80077ac <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800748c:	2b01      	cmp	r3, #1
 800748e:	d901      	bls.n	8007494 <find_volume+0x1e8>
 8007490:	230d      	movs	r3, #13
 8007492:	e18b      	b.n	80077ac <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	3338      	adds	r3, #56	; 0x38
 8007498:	330b      	adds	r3, #11
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fc6e 	bl	8005d7c <ld_word>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	899b      	ldrh	r3, [r3, #12]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <find_volume+0x204>
 80074ac:	230d      	movs	r3, #13
 80074ae:	e17d      	b.n	80077ac <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	3338      	adds	r3, #56	; 0x38
 80074b4:	3316      	adds	r3, #22
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fc60 	bl	8005d7c <ld_word>
 80074bc:	4603      	mov	r3, r0
 80074be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <find_volume+0x228>
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	3338      	adds	r3, #56	; 0x38
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe fc6d 	bl	8005dac <ld_dword>
 80074d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	789b      	ldrb	r3, [r3, #2]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d005      	beq.n	80074f8 <find_volume+0x24c>
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	789b      	ldrb	r3, [r3, #2]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d001      	beq.n	80074f8 <find_volume+0x24c>
 80074f4:	230d      	movs	r3, #13
 80074f6:	e159      	b.n	80077ac <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	789b      	ldrb	r3, [r3, #2]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007500:	fb02 f303 	mul.w	r3, r2, r3
 8007504:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800750c:	b29a      	uxth	r2, r3
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	895b      	ldrh	r3, [r3, #10]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <find_volume+0x280>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	895b      	ldrh	r3, [r3, #10]
 800751e:	461a      	mov	r2, r3
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	895b      	ldrh	r3, [r3, #10]
 8007524:	3b01      	subs	r3, #1
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <find_volume+0x284>
 800752c:	230d      	movs	r3, #13
 800752e:	e13d      	b.n	80077ac <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	3338      	adds	r3, #56	; 0x38
 8007534:	3311      	adds	r3, #17
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fc20 	bl	8005d7c <ld_word>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	891b      	ldrh	r3, [r3, #8]
 8007548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800754a:	8992      	ldrh	r2, [r2, #12]
 800754c:	0952      	lsrs	r2, r2, #5
 800754e:	b292      	uxth	r2, r2
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	fb02 f201 	mul.w	r2, r2, r1
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <find_volume+0x2bc>
 8007560:	230d      	movs	r3, #13
 8007562:	e123      	b.n	80077ac <find_volume+0x500>
 8007564:	20004314 	.word	0x20004314

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	3338      	adds	r3, #56	; 0x38
 800756c:	3313      	adds	r3, #19
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fc04 	bl	8005d7c <ld_word>
 8007574:	4603      	mov	r3, r0
 8007576:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <find_volume+0x2e0>
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	3338      	adds	r3, #56	; 0x38
 8007582:	3320      	adds	r3, #32
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fc11 	bl	8005dac <ld_dword>
 800758a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	3338      	adds	r3, #56	; 0x38
 8007590:	330e      	adds	r3, #14
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fbf2 	bl	8005d7c <ld_word>
 8007598:	4603      	mov	r3, r0
 800759a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800759c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <find_volume+0x2fa>
 80075a2:	230d      	movs	r3, #13
 80075a4:	e102      	b.n	80077ac <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80075a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075aa:	4413      	add	r3, r2
 80075ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ae:	8911      	ldrh	r1, [r2, #8]
 80075b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b2:	8992      	ldrh	r2, [r2, #12]
 80075b4:	0952      	lsrs	r2, r2, #5
 80075b6:	b292      	uxth	r2, r2
 80075b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80075bc:	b292      	uxth	r2, r2
 80075be:	4413      	add	r3, r2
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d201      	bcs.n	80075ce <find_volume+0x322>
 80075ca:	230d      	movs	r3, #13
 80075cc:	e0ee      	b.n	80077ac <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80075ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d6:	8952      	ldrh	r2, [r2, #10]
 80075d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <find_volume+0x33c>
 80075e4:	230d      	movs	r3, #13
 80075e6:	e0e1      	b.n	80077ac <find_volume+0x500>
		fmt = FS_FAT32;
 80075e8:	2303      	movs	r3, #3
 80075ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d802      	bhi.n	80075fe <find_volume+0x352>
 80075f8:	2302      	movs	r3, #2
 80075fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007604:	4293      	cmp	r3, r2
 8007606:	d802      	bhi.n	800760e <find_volume+0x362>
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800761a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800761c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007620:	441a      	add	r2, r3
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	441a      	add	r2, r3
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007634:	2b03      	cmp	r3, #3
 8007636:	d11e      	bne.n	8007676 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	3338      	adds	r3, #56	; 0x38
 800763c:	332a      	adds	r3, #42	; 0x2a
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fb9c 	bl	8005d7c <ld_word>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <find_volume+0x3a2>
 800764a:	230d      	movs	r3, #13
 800764c:	e0ae      	b.n	80077ac <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	891b      	ldrh	r3, [r3, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <find_volume+0x3ae>
 8007656:	230d      	movs	r3, #13
 8007658:	e0a8      	b.n	80077ac <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	3338      	adds	r3, #56	; 0x38
 800765e:	332c      	adds	r3, #44	; 0x2c
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fba3 	bl	8005dac <ld_dword>
 8007666:	4602      	mov	r2, r0
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
 8007674:	e01f      	b.n	80076b6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	891b      	ldrh	r3, [r3, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <find_volume+0x3d6>
 800767e:	230d      	movs	r3, #13
 8007680:	e094      	b.n	80077ac <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007688:	441a      	add	r2, r3
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800768e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007692:	2b02      	cmp	r3, #2
 8007694:	d103      	bne.n	800769e <find_volume+0x3f2>
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	e00a      	b.n	80076b4 <find_volume+0x408>
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	4613      	mov	r3, r2
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	4413      	add	r3, r2
 80076a8:	085a      	lsrs	r2, r3, #1
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	899b      	ldrh	r3, [r3, #12]
 80076be:	4619      	mov	r1, r3
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	440b      	add	r3, r1
 80076c4:	3b01      	subs	r3, #1
 80076c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076c8:	8989      	ldrh	r1, [r1, #12]
 80076ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d201      	bcs.n	80076d6 <find_volume+0x42a>
 80076d2:	230d      	movs	r3, #13
 80076d4:	e06a      	b.n	80077ac <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076dc:	619a      	str	r2, [r3, #24]
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	2280      	movs	r2, #128	; 0x80
 80076ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80076ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d149      	bne.n	8007788 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	3338      	adds	r3, #56	; 0x38
 80076f8:	3330      	adds	r3, #48	; 0x30
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fb3e 	bl	8005d7c <ld_word>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d140      	bne.n	8007788 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007708:	3301      	adds	r3, #1
 800770a:	4619      	mov	r1, r3
 800770c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800770e:	f7fe fddb 	bl	80062c8 <move_window>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d137      	bne.n	8007788 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	2200      	movs	r2, #0
 800771c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	3338      	adds	r3, #56	; 0x38
 8007722:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fb28 	bl	8005d7c <ld_word>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007734:	429a      	cmp	r2, r3
 8007736:	d127      	bne.n	8007788 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	3338      	adds	r3, #56	; 0x38
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fb35 	bl	8005dac <ld_dword>
 8007742:	4603      	mov	r3, r0
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <find_volume+0x508>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d11e      	bne.n	8007788 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	3338      	adds	r3, #56	; 0x38
 800774e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fb2a 	bl	8005dac <ld_dword>
 8007758:	4603      	mov	r3, r0
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <find_volume+0x50c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d113      	bne.n	8007788 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	3338      	adds	r3, #56	; 0x38
 8007764:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fb1f 	bl	8005dac <ld_dword>
 800776e:	4602      	mov	r2, r0
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	3338      	adds	r3, #56	; 0x38
 8007778:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fb15 	bl	8005dac <ld_dword>
 8007782:	4602      	mov	r2, r0
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800778e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <find_volume+0x510>)
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <find_volume+0x510>)
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <find_volume+0x510>)
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80077a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077a6:	f7fe fd27 	bl	80061f8 <clear_lock>
#endif
	return FR_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3758      	adds	r7, #88	; 0x58
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	41615252 	.word	0x41615252
 80077b8:	61417272 	.word	0x61417272
 80077bc:	20004318 	.word	0x20004318

080077c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80077ca:	2309      	movs	r3, #9
 80077cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d02e      	beq.n	8007832 <validate+0x72>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d02a      	beq.n	8007832 <validate+0x72>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d025      	beq.n	8007832 <validate+0x72>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	889a      	ldrh	r2, [r3, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d11e      	bne.n	8007832 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fbbf 	bl	8005f7c <lock_fs>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d014      	beq.n	800782e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fa18 	bl	8005c40 <disk_status>
 8007810:	4603      	mov	r3, r0
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <validate+0x60>
				res = FR_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
 800781e:	e008      	b.n	8007832 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fbbe 	bl	8005fa8 <unlock_fs>
 800782c:	e001      	b.n	8007832 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800782e:	230f      	movs	r3, #15
 8007830:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <validate+0x7e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	e000      	b.n	8007840 <validate+0x80>
 800783e:	2300      	movs	r3, #0
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	6013      	str	r3, [r2, #0]
	return res;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007862:	f107 0310 	add.w	r3, r7, #16
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fc86 	bl	8007178 <get_ldnumber>
 800786c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da01      	bge.n	8007878 <f_mount+0x28>
 8007874:	230b      	movs	r3, #11
 8007876:	e048      	b.n	800790a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007878:	4a26      	ldr	r2, [pc, #152]	; (8007914 <f_mount+0xc4>)
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007880:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00f      	beq.n	80078a8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007888:	69b8      	ldr	r0, [r7, #24]
 800788a:	f7fe fcb5 	bl	80061f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 ff44 	bl	8008720 <ff_del_syncobj>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <f_mount+0x52>
 800789e:	2302      	movs	r3, #2
 80078a0:	e033      	b.n	800790a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3310      	adds	r3, #16
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f000 ff13 	bl	80086ea <ff_cre_syncobj>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <f_mount+0x7e>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e01d      	b.n	800790a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4910      	ldr	r1, [pc, #64]	; (8007914 <f_mount+0xc4>)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <f_mount+0x94>
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d001      	beq.n	80078e8 <f_mount+0x98>
 80078e4:	2300      	movs	r3, #0
 80078e6:	e010      	b.n	800790a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80078e8:	f107 010c 	add.w	r1, r7, #12
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	2200      	movs	r2, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fcda 	bl	80072ac <find_volume>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	7dfa      	ldrb	r2, [r7, #23]
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fb50 	bl	8005fa8 <unlock_fs>
 8007908:	7dfb      	ldrb	r3, [r7, #23]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20004314 	.word	0x20004314

08007918 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b098      	sub	sp, #96	; 0x60
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <f_open+0x18>
 800792c:	2309      	movs	r3, #9
 800792e:	e1c2      	b.n	8007cb6 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007936:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007938:	79fa      	ldrb	r2, [r7, #7]
 800793a:	f107 0110 	add.w	r1, r7, #16
 800793e:	f107 0308 	add.w	r3, r7, #8
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff fcb2 	bl	80072ac <find_volume>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800794e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 819f 	bne.w	8007c96 <f_open+0x37e>
		dj.obj.fs = fs;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	f107 0314 	add.w	r3, r7, #20
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff fb91 	bl	800708c <follow_path>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11a      	bne.n	80079ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007978:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800797c:	b25b      	sxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	da03      	bge.n	800798a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007982:	2306      	movs	r3, #6
 8007984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007988:	e011      	b.n	80079ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	461a      	mov	r2, r3
 800799c:	f107 0314 	add.w	r3, r7, #20
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fb1c 	bl	8005fe0 <chk_lock>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	f003 031c 	and.w	r3, r3, #28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d07f      	beq.n	8007ab8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80079b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80079c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d10e      	bne.n	80079e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079c8:	f7fe fb66 	bl	8006098 <enq_lock>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d006      	beq.n	80079e0 <f_open+0xc8>
 80079d2:	f107 0314 	add.w	r3, r7, #20
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fa92 	bl	8006f00 <dir_register>
 80079dc:	4603      	mov	r3, r0
 80079de:	e000      	b.n	80079e2 <f_open+0xca>
 80079e0:	2312      	movs	r3, #18
 80079e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	f043 0308 	orr.w	r3, r3, #8
 80079ec:	71fb      	strb	r3, [r7, #7]
 80079ee:	e010      	b.n	8007a12 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80079f0:	7ebb      	ldrb	r3, [r7, #26]
 80079f2:	f003 0311 	and.w	r3, r3, #17
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <f_open+0xea>
					res = FR_DENIED;
 80079fa:	2307      	movs	r3, #7
 80079fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a00:	e007      	b.n	8007a12 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <f_open+0xfa>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d168      	bne.n	8007aec <f_open+0x1d4>
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d063      	beq.n	8007aec <f_open+0x1d4>
				dw = GET_FATTIME();
 8007a24:	f7fd fea4 	bl	8005770 <get_fattime>
 8007a28:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	330e      	adds	r3, #14
 8007a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe f9f9 	bl	8005e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	3316      	adds	r3, #22
 8007a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe f9f3 	bl	8005e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	330b      	adds	r3, #11
 8007a46:	2220      	movs	r2, #32
 8007a48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff f9c1 	bl	8006dd8 <ld_clust>
 8007a56:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f9d9 	bl	8006e16 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a66:	331c      	adds	r3, #28
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe f9dc 	bl	8005e28 <st_dword>
					fs->wflag = 1;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2201      	movs	r2, #1
 8007a74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d037      	beq.n	8007aec <f_open+0x1d4>
						dw = fs->winsect;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a80:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a82:	f107 0314 	add.w	r3, r7, #20
 8007a86:	2200      	movs	r2, #0
 8007a88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fec9 	bl	8006822 <remove_chain>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d126      	bne.n	8007aec <f_open+0x1d4>
							res = move_window(fs, dw);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fc10 	bl	80062c8 <move_window>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab2:	3a01      	subs	r2, #1
 8007ab4:	615a      	str	r2, [r3, #20]
 8007ab6:	e019      	b.n	8007aec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d115      	bne.n	8007aec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ac0:	7ebb      	ldrb	r3, [r7, #26]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007aca:	2304      	movs	r3, #4
 8007acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ad0:	e00c      	b.n	8007aec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d007      	beq.n	8007aec <f_open+0x1d4>
 8007adc:	7ebb      	ldrb	r3, [r7, #26]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <f_open+0x1d4>
						res = FR_DENIED;
 8007ae6:	2307      	movs	r3, #7
 8007ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d128      	bne.n	8007b46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe fad5 	bl	80060dc <inc_lock>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <f_open+0x22e>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 80a3 	bne.w	8007c96 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f93e 	bl	8006dd8 <ld_clust>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	331c      	adds	r3, #28
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe f920 	bl	8005dac <ld_dword>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	88da      	ldrh	r2, [r3, #6]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	79fa      	ldrb	r2, [r7, #7]
 8007b8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3330      	adds	r3, #48	; 0x30
 8007ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe f98a 	bl	8005ec2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d06e      	beq.n	8007c96 <f_open+0x37e>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d06a      	beq.n	8007c96 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	895b      	ldrh	r3, [r3, #10]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	899b      	ldrh	r3, [r3, #12]
 8007bd2:	fb03 f302 	mul.w	r3, r3, r2
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	657b      	str	r3, [r7, #84]	; 0x54
 8007be4:	e016      	b.n	8007c14 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fc29 	bl	8006442 <get_fat>
 8007bf0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d802      	bhi.n	8007bfe <f_open+0x2e6>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c04:	d102      	bne.n	8007c0c <f_open+0x2f4>
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	657b      	str	r3, [r7, #84]	; 0x54
 8007c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <f_open+0x30c>
 8007c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d8e0      	bhi.n	8007be6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d131      	bne.n	8007c96 <f_open+0x37e>
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	899b      	ldrh	r3, [r3, #12]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c3e:	fb02 f201 	mul.w	r2, r2, r1
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d026      	beq.n	8007c96 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe fbd9 	bl	8006404 <clust2sect>
 8007c52:	6478      	str	r0, [r7, #68]	; 0x44
 8007c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <f_open+0x34a>
						res = FR_INT_ERR;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c60:	e019      	b.n	8007c96 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c70:	441a      	add	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	7858      	ldrb	r0, [r3, #1]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1a      	ldr	r2, [r3, #32]
 8007c84:	2301      	movs	r3, #1
 8007c86:	f7fe f81b 	bl	8005cc0 <disk_read>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <f_open+0x37e>
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <f_open+0x38c>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe f97b 	bl	8005fa8 <unlock_fs>
 8007cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3760      	adds	r7, #96	; 0x60
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b08c      	sub	sp, #48	; 0x30
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	607a      	str	r2, [r7, #4]
 8007cca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f107 0210 	add.w	r2, r7, #16
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fd6e 	bl	80077c0 <validate>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <f_write+0x44>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	7d5b      	ldrb	r3, [r3, #21]
 8007cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <f_write+0x58>
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe f94c 	bl	8005fa8 <unlock_fs>
 8007d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d14:	e192      	b.n	800803c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	7d1b      	ldrb	r3, [r3, #20]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <f_write+0x72>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2107      	movs	r1, #7
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe f93e 	bl	8005fa8 <unlock_fs>
 8007d2c:	2307      	movs	r3, #7
 8007d2e:	e185      	b.n	800803c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	f080 816a 	bcs.w	8008016 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	43db      	mvns	r3, r3
 8007d48:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007d4a:	e164      	b.n	8008016 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	8992      	ldrh	r2, [r2, #12]
 8007d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d58:	fb02 f201 	mul.w	r2, r2, r1
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 810f 	bne.w	8007f82 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	8992      	ldrh	r2, [r2, #12]
 8007d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	8952      	ldrh	r2, [r2, #10]
 8007d74:	3a01      	subs	r2, #1
 8007d76:	4013      	ands	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d14d      	bne.n	8007e1c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d11a      	bne.n	8007dca <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fda7 	bl	80068ec <create_chain>
 8007d9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007da0:	e013      	b.n	8007dca <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	4619      	mov	r1, r3
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7fe fe33 	bl	8006a1c <clmt_clust>
 8007db6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007db8:	e007      	b.n	8007dca <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fd92 	bl	80068ec <create_chain>
 8007dc8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8127 	beq.w	8008020 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d109      	bne.n	8007dec <f_write+0x12e>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	755a      	strb	r2, [r3, #21]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2102      	movs	r1, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe f8e0 	bl	8005fa8 <unlock_fs>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e127      	b.n	800803c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007df2:	d109      	bne.n	8007e08 <f_write+0x14a>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	755a      	strb	r2, [r3, #21]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe f8d2 	bl	8005fa8 <unlock_fs>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e119      	b.n	800803c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <f_write+0x15e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da1d      	bge.n	8007e62 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	7858      	ldrb	r0, [r3, #1]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	2301      	movs	r3, #1
 8007e36:	f7fd ff63 	bl	8005d00 <disk_write>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <f_write+0x196>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	755a      	strb	r2, [r3, #21]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe f8ac 	bl	8005fa8 <unlock_fs>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0f3      	b.n	800803c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fe faca 	bl	8006404 <clust2sect>
 8007e70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <f_write+0x1ce>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	755a      	strb	r2, [r3, #21]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2102      	movs	r1, #2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe f890 	bl	8005fa8 <unlock_fs>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e0d7      	b.n	800803c <f_write+0x37e>
			sect += csect;
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	4413      	add	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	899b      	ldrh	r3, [r3, #12]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d048      	beq.n	8007f3a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	4413      	add	r3, r2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	8952      	ldrh	r2, [r2, #10]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d905      	bls.n	8007ec2 <f_write+0x204>
					cc = fs->csize - csect;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	895b      	ldrh	r3, [r3, #10]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	7858      	ldrb	r0, [r3, #1]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	69f9      	ldr	r1, [r7, #28]
 8007ecc:	f7fd ff18 	bl	8005d00 <disk_write>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <f_write+0x22c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	755a      	strb	r2, [r3, #21]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f861 	bl	8005fa8 <unlock_fs>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e0a8      	b.n	800803c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1a      	ldr	r2, [r3, #32]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d918      	bls.n	8007f2a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1a      	ldr	r2, [r3, #32]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	8992      	ldrh	r2, [r2, #12]
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	18d1      	adds	r1, r2, r3
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	899b      	ldrh	r3, [r3, #12]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7fd ffb2 	bl	8005e80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	899b      	ldrh	r3, [r3, #12]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007f38:	e050      	b.n	8007fdc <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d01b      	beq.n	8007f7c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	699a      	ldr	r2, [r3, #24]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d215      	bcs.n	8007f7c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	7858      	ldrb	r0, [r3, #1]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	f7fd feaf 	bl	8005cc0 <disk_read>
 8007f62:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	755a      	strb	r2, [r3, #21]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2101      	movs	r1, #1
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe f818 	bl	8005fa8 <unlock_fs>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e05f      	b.n	800803c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	899b      	ldrh	r3, [r3, #12]
 8007f86:	4618      	mov	r0, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	8992      	ldrh	r2, [r2, #12]
 8007f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f94:	fb02 f201 	mul.w	r2, r2, r1
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	1ac3      	subs	r3, r0, r3
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d901      	bls.n	8007faa <f_write+0x2ec>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	8992      	ldrh	r2, [r2, #12]
 8007fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fbc:	fb02 f200 	mul.w	r2, r2, r0
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	69f9      	ldr	r1, [r7, #28]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd ff59 	bl	8005e80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	4413      	add	r3, r2
 8007fe2:	61fb      	str	r3, [r7, #28]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	619a      	str	r2, [r3, #24]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bf38      	it	cc
 8007ffc:	461a      	movcc	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	441a      	add	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f ae97 	bne.w	8007d4c <f_write+0x8e>
 800801e:	e000      	b.n	8008022 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008020:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	7d1b      	ldrb	r3, [r3, #20]
 8008026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802a:	b2da      	uxtb	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd ffb7 	bl	8005fa8 <unlock_fs>
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3730      	adds	r7, #48	; 0x30
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f107 0208 	add.w	r2, r7, #8
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fbb3 	bl	80077c0 <validate>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d16d      	bne.n	8008140 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7d1b      	ldrb	r3, [r3, #20]
 8008068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d067      	beq.n	8008140 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7d1b      	ldrb	r3, [r3, #20]
 8008074:	b25b      	sxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	da1a      	bge.n	80080b0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	7858      	ldrb	r0, [r3, #1]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1a      	ldr	r2, [r3, #32]
 8008088:	2301      	movs	r3, #1
 800808a:	f7fd fe39 	bl	8005d00 <disk_write>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d006      	beq.n	80080a2 <f_sync+0x5e>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2101      	movs	r1, #1
 8008098:	4618      	mov	r0, r3
 800809a:	f7fd ff85 	bl	8005fa8 <unlock_fs>
 800809e:	2301      	movs	r3, #1
 80080a0:	e055      	b.n	800814e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7d1b      	ldrb	r3, [r3, #20]
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80080b0:	f7fd fb5e 	bl	8005770 <get_fattime>
 80080b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f7fe f902 	bl	80062c8 <move_window>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d138      	bne.n	8008140 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	330b      	adds	r3, #11
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	330b      	adds	r3, #11
 80080de:	f042 0220 	orr.w	r2, r2, #32
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	461a      	mov	r2, r3
 80080f0:	68f9      	ldr	r1, [r7, #12]
 80080f2:	f7fe fe90 	bl	8006e16 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f103 021c 	add.w	r2, r3, #28
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fd fe90 	bl	8005e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3316      	adds	r3, #22
 800810c:	6939      	ldr	r1, [r7, #16]
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd fe8a 	bl	8005e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3312      	adds	r3, #18
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fe69 	bl	8005df2 <st_word>
					fs->wflag = 1;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2201      	movs	r2, #1
 8008124:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe f8fb 	bl	8006324 <sync_fs>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7d1b      	ldrb	r3, [r3, #20]
 8008136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813a:	b2da      	uxtb	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	7dfa      	ldrb	r2, [r7, #23]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7fd ff2e 	bl	8005fa8 <unlock_fs>
 800814c:	7dfb      	ldrb	r3, [r7, #23]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b090      	sub	sp, #64	; 0x40
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f107 0208 	add.w	r2, r7, #8
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fb29 	bl	80077c0 <validate>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008174:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008178:	2b00      	cmp	r3, #0
 800817a:	d103      	bne.n	8008184 <f_lseek+0x2e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7d5b      	ldrb	r3, [r3, #21]
 8008180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <f_lseek+0x4a>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f7fd ff07 	bl	8005fa8 <unlock_fs>
 800819a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800819e:	e244      	b.n	800862a <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 80f2 	beq.w	800838e <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b0:	d164      	bne.n	800827c <f_lseek+0x126>
			tbl = fp->cltbl;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	1d1a      	adds	r2, r3, #4
 80081bc:	627a      	str	r2, [r7, #36]	; 0x24
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	2302      	movs	r3, #2
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d044      	beq.n	800825c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	2300      	movs	r3, #0
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	3302      	adds	r3, #2
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	3301      	adds	r3, #1
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe f927 	bl	8006442 <get_fat>
 80081f4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d809      	bhi.n	8008210 <f_lseek+0xba>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	755a      	strb	r2, [r3, #21]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2102      	movs	r1, #2
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd fece 	bl	8005fa8 <unlock_fs>
 800820c:	2302      	movs	r3, #2
 800820e:	e20c      	b.n	800862a <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008216:	d109      	bne.n	800822c <f_lseek+0xd6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	755a      	strb	r2, [r3, #21]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2101      	movs	r1, #1
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd fec0 	bl	8005fa8 <unlock_fs>
 8008228:	2301      	movs	r3, #1
 800822a:	e1fe      	b.n	800862a <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008232:	429a      	cmp	r2, r3
 8008234:	d0d4      	beq.n	80081e0 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	429a      	cmp	r2, r3
 800823c:	d809      	bhi.n	8008252 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	1d1a      	adds	r2, r3, #4
 8008242:	627a      	str	r2, [r7, #36]	; 0x24
 8008244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	1d1a      	adds	r2, r3, #4
 800824c:	627a      	str	r2, [r7, #36]	; 0x24
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008258:	429a      	cmp	r2, r3
 800825a:	d3ba      	bcc.n	80081d2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008262:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	429a      	cmp	r2, r3
 800826a:	d803      	bhi.n	8008274 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e1d1      	b.n	8008618 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008274:	2311      	movs	r3, #17
 8008276:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800827a:	e1cd      	b.n	8008618 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d902      	bls.n	800828c <f_lseek+0x136>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 81bf 	beq.w	8008618 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe fbbb 	bl	8006a1c <clmt_clust>
 80082a6:	4602      	mov	r2, r0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe f8a5 	bl	8006404 <clust2sect>
 80082ba:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <f_lseek+0x180>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	755a      	strb	r2, [r3, #21]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2102      	movs	r1, #2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fe6b 	bl	8005fa8 <unlock_fs>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e1a9      	b.n	800862a <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	3b01      	subs	r3, #1
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	8992      	ldrh	r2, [r2, #12]
 80082de:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	8952      	ldrh	r2, [r2, #10]
 80082e6:	3a01      	subs	r2, #1
 80082e8:	4013      	ands	r3, r2
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4413      	add	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	8992      	ldrh	r2, [r2, #12]
 80082f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80082fc:	fb02 f201 	mul.w	r2, r2, r1
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 8188 	beq.w	8008618 <f_lseek+0x4c2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	429a      	cmp	r2, r3
 8008310:	f000 8182 	beq.w	8008618 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7d1b      	ldrb	r3, [r3, #20]
 8008318:	b25b      	sxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	da1d      	bge.n	800835a <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	7858      	ldrb	r0, [r3, #1]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1a      	ldr	r2, [r3, #32]
 800832c:	2301      	movs	r3, #1
 800832e:	f7fd fce7 	bl	8005d00 <disk_write>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <f_lseek+0x1f6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	755a      	strb	r2, [r3, #21]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2101      	movs	r1, #1
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd fe30 	bl	8005fa8 <unlock_fs>
 8008348:	2301      	movs	r3, #1
 800834a:	e16e      	b.n	800862a <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7d1b      	ldrb	r3, [r3, #20]
 8008350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	7858      	ldrb	r0, [r3, #1]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008364:	2301      	movs	r3, #1
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	f7fd fcaa 	bl	8005cc0 <disk_read>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <f_lseek+0x230>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	755a      	strb	r2, [r3, #21]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2101      	movs	r1, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f7fd fe13 	bl	8005fa8 <unlock_fs>
 8008382:	2301      	movs	r3, #1
 8008384:	e151      	b.n	800862a <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	621a      	str	r2, [r3, #32]
 800838c:	e144      	b.n	8008618 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d908      	bls.n	80083aa <f_lseek+0x254>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7d1b      	ldrb	r3, [r3, #20]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <f_lseek+0x254>
			ofs = fp->obj.objsize;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 80ce 	beq.w	800855e <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	895b      	ldrh	r3, [r3, #10]
 80083c6:	461a      	mov	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	899b      	ldrh	r3, [r3, #12]
 80083cc:	fb03 f302 	mul.w	r3, r3, r2
 80083d0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01b      	beq.n	8008410 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	1e5a      	subs	r2, r3, #1
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	fbb2 f2f3 	udiv	r2, r2, r3
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	1e59      	subs	r1, r3, #1
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d30f      	bcc.n	8008410 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	1e5a      	subs	r2, r3, #1
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	425b      	negs	r3, r3
 80083f8:	401a      	ands	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	63bb      	str	r3, [r7, #56]	; 0x38
 800840e:	e02c      	b.n	800846a <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	2b00      	cmp	r3, #0
 800841a:	d123      	bne.n	8008464 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fa63 	bl	80068ec <create_chain>
 8008426:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	2b01      	cmp	r3, #1
 800842c:	d109      	bne.n	8008442 <f_lseek+0x2ec>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	755a      	strb	r2, [r3, #21]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2102      	movs	r1, #2
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd fdb5 	bl	8005fa8 <unlock_fs>
 800843e:	2302      	movs	r3, #2
 8008440:	e0f3      	b.n	800862a <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008448:	d109      	bne.n	800845e <f_lseek+0x308>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	755a      	strb	r2, [r3, #21]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2101      	movs	r1, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f7fd fda7 	bl	8005fa8 <unlock_fs>
 800845a:	2301      	movs	r3, #1
 800845c:	e0e5      	b.n	800862a <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008462:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008468:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	d076      	beq.n	800855e <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8008470:	e044      	b.n	80084fc <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	603b      	str	r3, [r7, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7d1b      	ldrb	r3, [r3, #20]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fa28 	bl	80068ec <create_chain>
 800849c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <f_lseek+0x360>
							ofs = 0; break;
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	e02c      	b.n	8008504 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fd ffc7 	bl	8006442 <get_fat>
 80084b4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084bc:	d109      	bne.n	80084d2 <f_lseek+0x37c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	755a      	strb	r2, [r3, #21]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2101      	movs	r1, #1
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd fd6d 	bl	8005fa8 <unlock_fs>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e0ab      	b.n	800862a <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d904      	bls.n	80084e2 <f_lseek+0x38c>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084de:	429a      	cmp	r2, r3
 80084e0:	d309      	bcc.n	80084f6 <f_lseek+0x3a0>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	755a      	strb	r2, [r3, #21]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fd fd5b 	bl	8005fa8 <unlock_fs>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e099      	b.n	800862a <f_lseek+0x4d4>
					fp->clust = clst;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	429a      	cmp	r2, r3
 8008502:	d8b6      	bhi.n	8008472 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	441a      	add	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	899b      	ldrh	r3, [r3, #12]
 8008514:	461a      	mov	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	fbb3 f1f2 	udiv	r1, r3, r2
 800851c:	fb02 f201 	mul.w	r2, r2, r1
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01b      	beq.n	800855e <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd ff6a 	bl	8006404 <clust2sect>
 8008530:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <f_lseek+0x3f6>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	755a      	strb	r2, [r3, #21]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2102      	movs	r1, #2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fd30 	bl	8005fa8 <unlock_fs>
 8008548:	2302      	movs	r3, #2
 800854a:	e06e      	b.n	800862a <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	899b      	ldrh	r3, [r3, #12]
 8008550:	461a      	mov	r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	fbb3 f3f2 	udiv	r3, r3, r2
 8008558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800855a:	4413      	add	r3, r2
 800855c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	429a      	cmp	r2, r3
 8008568:	d90a      	bls.n	8008580 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699a      	ldr	r2, [r3, #24]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7d1b      	ldrb	r3, [r3, #20]
 8008576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857a:	b2da      	uxtb	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	8992      	ldrh	r2, [r2, #12]
 8008588:	fbb3 f1f2 	udiv	r1, r3, r2
 800858c:	fb02 f201 	mul.w	r2, r2, r1
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d040      	beq.n	8008618 <f_lseek+0x4c2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800859c:	429a      	cmp	r2, r3
 800859e:	d03b      	beq.n	8008618 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da1d      	bge.n	80085e6 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	7858      	ldrb	r0, [r3, #1]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	2301      	movs	r3, #1
 80085ba:	f7fd fba1 	bl	8005d00 <disk_write>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <f_lseek+0x482>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	755a      	strb	r2, [r3, #21]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2101      	movs	r1, #1
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fcea 	bl	8005fa8 <unlock_fs>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e028      	b.n	800862a <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7d1b      	ldrb	r3, [r3, #20]
 80085dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	7858      	ldrb	r0, [r3, #1]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085f0:	2301      	movs	r3, #1
 80085f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f4:	f7fd fb64 	bl	8005cc0 <disk_read>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <f_lseek+0x4bc>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	755a      	strb	r2, [r3, #21]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fccd 	bl	8005fa8 <unlock_fs>
 800860e:	2301      	movs	r3, #1
 8008610:	e00b      	b.n	800862a <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008616:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7fd fcc1 	bl	8005fa8 <unlock_fs>
 8008626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800862a:	4618      	mov	r0, r3
 800862c:	3740      	adds	r7, #64	; 0x40
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800864c:	7a5b      	ldrb	r3, [r3, #9]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d131      	bne.n	80086b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008656:	7a5b      	ldrb	r3, [r3, #9]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800865e:	2100      	movs	r1, #0
 8008660:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008664:	7a5b      	ldrb	r3, [r3, #9]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008674:	7a5b      	ldrb	r3, [r3, #9]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800867c:	4413      	add	r3, r2
 800867e:	79fa      	ldrb	r2, [r7, #7]
 8008680:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008684:	7a5b      	ldrb	r3, [r3, #9]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	b2d1      	uxtb	r1, r2
 800868c:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800868e:	7251      	strb	r1, [r2, #9]
 8008690:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	3330      	adds	r3, #48	; 0x30
 8008696:	b2da      	uxtb	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3301      	adds	r3, #1
 80086a0:	223a      	movs	r2, #58	; 0x3a
 80086a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3302      	adds	r3, #2
 80086a8:	222f      	movs	r2, #47	; 0x2f
 80086aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3303      	adds	r3, #3
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2000433c 	.word	0x2000433c

080086cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086d6:	2200      	movs	r2, #0
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff ffaa 	bl	8008634 <FATFS_LinkDriverEx>
 80086e0:	4603      	mov	r3, r0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	4603      	mov	r3, r0
 80086f2:	6039      	str	r1, [r7, #0]
 80086f4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80086f6:	2200      	movs	r2, #0
 80086f8:	2101      	movs	r1, #1
 80086fa:	2001      	movs	r0, #1
 80086fc:	f000 f9ae 	bl	8008a5c <osSemaphoreNew>
 8008700:	4602      	mov	r2, r0
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2301      	movne	r3, #1
 8008710:	2300      	moveq	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	60fb      	str	r3, [r7, #12]

    return ret;
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fab7 	bl	8008c9c <osSemaphoreDelete>
#endif
    return 1;
 800872e:	2301      	movs	r3, #1
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008744:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fa11 	bl	8008b70 <osSemaphoreAcquire>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008754:	2301      	movs	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa52 	bl	8008c14 <osSemaphoreRelease>
#endif
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <__NVIC_SetPriority>:
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	db0a      	blt.n	80087a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	490c      	ldr	r1, [pc, #48]	; (80087c4 <__NVIC_SetPriority+0x4c>)
 8008792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	440b      	add	r3, r1
 800879c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087a0:	e00a      	b.n	80087b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	4908      	ldr	r1, [pc, #32]	; (80087c8 <__NVIC_SetPriority+0x50>)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	3b04      	subs	r3, #4
 80087b0:	0112      	lsls	r2, r2, #4
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	440b      	add	r3, r1
 80087b6:	761a      	strb	r2, [r3, #24]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	e000e100 	.word	0xe000e100
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80087d0:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <SysTick_Handler+0x1c>)
 80087d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80087d4:	f002 fade 	bl	800ad94 <xTaskGetSchedulerState>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d001      	beq.n	80087e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80087de:	f003 f9c3 	bl	800bb68 <xPortSysTickHandler>
  }
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	e000e010 	.word	0xe000e010

080087ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087f0:	2100      	movs	r1, #0
 80087f2:	f06f 0004 	mvn.w	r0, #4
 80087f6:	f7ff ffbf 	bl	8008778 <__NVIC_SetPriority>
#endif
}
 80087fa:	bf00      	nop
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008806:	f3ef 8305 	mrs	r3, IPSR
 800880a:	603b      	str	r3, [r7, #0]
  return(result);
 800880c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008812:	f06f 0305 	mvn.w	r3, #5
 8008816:	607b      	str	r3, [r7, #4]
 8008818:	e00c      	b.n	8008834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <osKernelInitialize+0x44>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d105      	bne.n	800882e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008822:	4b08      	ldr	r3, [pc, #32]	; (8008844 <osKernelInitialize+0x44>)
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008828:	2300      	movs	r3, #0
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	e002      	b.n	8008834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008834:	687b      	ldr	r3, [r7, #4]
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20004348 	.word	0x20004348

08008848 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800884e:	f002 faa1 	bl	800ad94 <xTaskGetSchedulerState>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <osKernelGetState+0x1a>
 8008858:	2b02      	cmp	r3, #2
 800885a:	d105      	bne.n	8008868 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800885c:	2302      	movs	r3, #2
 800885e:	607b      	str	r3, [r7, #4]
      break;
 8008860:	e00c      	b.n	800887c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8008862:	2303      	movs	r3, #3
 8008864:	607b      	str	r3, [r7, #4]
      break;
 8008866:	e009      	b.n	800887c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <osKernelGetState+0x40>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <osKernelGetState+0x2e>
        state = osKernelReady;
 8008870:	2301      	movs	r3, #1
 8008872:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008874:	e001      	b.n	800887a <osKernelGetState+0x32>
        state = osKernelInactive;
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
      break;
 800887a:	bf00      	nop
  }

  return (state);
 800887c:	687b      	ldr	r3, [r7, #4]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20004348 	.word	0x20004348

0800888c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008892:	f3ef 8305 	mrs	r3, IPSR
 8008896:	603b      	str	r3, [r7, #0]
  return(result);
 8008898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800889e:	f06f 0305 	mvn.w	r3, #5
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	e010      	b.n	80088c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <osKernelStart+0x48>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d109      	bne.n	80088c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088ae:	f7ff ff9d 	bl	80087ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <osKernelStart+0x48>)
 80088b4:	2202      	movs	r2, #2
 80088b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088b8:	f001 fe12 	bl	800a4e0 <vTaskStartScheduler>
      stat = osOK;
 80088bc:	2300      	movs	r3, #0
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	e002      	b.n	80088c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088c8:	687b      	ldr	r3, [r7, #4]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20004348 	.word	0x20004348

080088d8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088de:	f3ef 8305 	mrs	r3, IPSR
 80088e2:	603b      	str	r3, [r7, #0]
  return(result);
 80088e4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80088ea:	f001 ff1b 	bl	800a724 <xTaskGetTickCountFromISR>
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	e002      	b.n	80088f8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80088f2:	f001 ff07 	bl	800a704 <xTaskGetTickCount>
 80088f6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80088f8:	687b      	ldr	r3, [r7, #4]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008902:	b580      	push	{r7, lr}
 8008904:	b08e      	sub	sp, #56	; 0x38
 8008906:	af04      	add	r7, sp, #16
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008912:	f3ef 8305 	mrs	r3, IPSR
 8008916:	617b      	str	r3, [r7, #20]
  return(result);
 8008918:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800891a:	2b00      	cmp	r3, #0
 800891c:	d17e      	bne.n	8008a1c <osThreadNew+0x11a>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d07b      	beq.n	8008a1c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008928:	2318      	movs	r3, #24
 800892a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800892c:	2300      	movs	r3, #0
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008934:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d045      	beq.n	80089c8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <osThreadNew+0x48>
        name = attr->name;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <osThreadNew+0x6e>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2b38      	cmp	r3, #56	; 0x38
 8008962:	d805      	bhi.n	8008970 <osThreadNew+0x6e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <osThreadNew+0x72>
        return (NULL);
 8008970:	2300      	movs	r3, #0
 8008972:	e054      	b.n	8008a1e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	089b      	lsrs	r3, r3, #2
 8008982:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00e      	beq.n	80089aa <osThreadNew+0xa8>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b5b      	cmp	r3, #91	; 0x5b
 8008992:	d90a      	bls.n	80089aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <osThreadNew+0xa8>
        mem = 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e010      	b.n	80089cc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10c      	bne.n	80089cc <osThreadNew+0xca>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <osThreadNew+0xca>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <osThreadNew+0xca>
          mem = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	e001      	b.n	80089cc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d110      	bne.n	80089f4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089da:	9202      	str	r2, [sp, #8]
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6a3a      	ldr	r2, [r7, #32]
 80089e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f001 fba3 	bl	800a134 <xTaskCreateStatic>
 80089ee:	4603      	mov	r3, r0
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e013      	b.n	8008a1c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d110      	bne.n	8008a1c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f107 0310 	add.w	r3, r7, #16
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f001 fbee 	bl	800a1ee <xTaskCreate>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d001      	beq.n	8008a1c <osThreadNew+0x11a>
            hTask = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a1c:	693b      	ldr	r3, [r7, #16]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	; 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a2e:	f3ef 8305 	mrs	r3, IPSR
 8008a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <osDelay+0x1c>
    stat = osErrorISR;
 8008a3a:	f06f 0305 	mvn.w	r3, #5
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e007      	b.n	8008a52 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fd13 	bl	800a478 <vTaskDelay>
    }
  }

  return (stat);
 8008a52:	68fb      	ldr	r3, [r7, #12]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6c:	f3ef 8305 	mrs	r3, IPSR
 8008a70:	613b      	str	r3, [r7, #16]
  return(result);
 8008a72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d175      	bne.n	8008b64 <osSemaphoreNew+0x108>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d072      	beq.n	8008b64 <osSemaphoreNew+0x108>
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d86e      	bhi.n	8008b64 <osSemaphoreNew+0x108>
    mem = -1;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d015      	beq.n	8008abe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d006      	beq.n	8008aa8 <osSemaphoreNew+0x4c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b4f      	cmp	r3, #79	; 0x4f
 8008aa0:	d902      	bls.n	8008aa8 <osSemaphoreNew+0x4c>
        mem = 1;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	e00c      	b.n	8008ac2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d108      	bne.n	8008ac2 <osSemaphoreNew+0x66>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <osSemaphoreNew+0x66>
          mem = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61bb      	str	r3, [r7, #24]
 8008abc:	e001      	b.n	8008ac2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac8:	d04c      	beq.n	8008b64 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d128      	bne.n	8008b22 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10a      	bne.n	8008aec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	2203      	movs	r2, #3
 8008adc:	9200      	str	r2, [sp, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	f000 fb80 	bl	80091e8 <xQueueGenericCreateStatic>
 8008ae8:	61f8      	str	r0, [r7, #28]
 8008aea:	e005      	b.n	8008af8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008aec:	2203      	movs	r2, #3
 8008aee:	2100      	movs	r1, #0
 8008af0:	2001      	movs	r0, #1
 8008af2:	f000 fbf1 	bl	80092d8 <xQueueGenericCreate>
 8008af6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d022      	beq.n	8008b44 <osSemaphoreNew+0xe8>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01f      	beq.n	8008b44 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b04:	2300      	movs	r3, #0
 8008b06:	2200      	movs	r2, #0
 8008b08:	2100      	movs	r1, #0
 8008b0a:	69f8      	ldr	r0, [r7, #28]
 8008b0c:	f000 fcac 	bl	8009468 <xQueueGenericSend>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d016      	beq.n	8008b44 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008b16:	69f8      	ldr	r0, [r7, #28]
 8008b18:	f001 f938 	bl	8009d8c <vQueueDelete>
            hSemaphore = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	e010      	b.n	8008b44 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d108      	bne.n	8008b3a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fc2e 	bl	8009392 <xQueueCreateCountingSemaphoreStatic>
 8008b36:	61f8      	str	r0, [r7, #28]
 8008b38:	e004      	b.n	8008b44 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fc5f 	bl	8009400 <xQueueCreateCountingSemaphore>
 8008b42:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e001      	b.n	8008b5c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b5c:	6979      	ldr	r1, [r7, #20]
 8008b5e:	69f8      	ldr	r0, [r7, #28]
 8008b60:	f001 fa60 	bl	800a024 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b64:	69fb      	ldr	r3, [r7, #28]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008b88:	f06f 0303 	mvn.w	r3, #3
 8008b8c:	617b      	str	r3, [r7, #20]
 8008b8e:	e039      	b.n	8008c04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b90:	f3ef 8305 	mrs	r3, IPSR
 8008b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d022      	beq.n	8008be2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008ba2:	f06f 0303 	mvn.w	r3, #3
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e02c      	b.n	8008c04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008bae:	f107 0308 	add.w	r3, r7, #8
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f001 f868 	bl	8009c8c <xQueueReceiveFromISR>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d003      	beq.n	8008bca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008bc2:	f06f 0302 	mvn.w	r3, #2
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e01c      	b.n	8008c04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d019      	beq.n	8008c04 <osSemaphoreAcquire+0x94>
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <osSemaphoreAcquire+0xa0>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	e010      	b.n	8008c04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6938      	ldr	r0, [r7, #16]
 8008be6:	f000 ff45 	bl	8009a74 <xQueueSemaphoreTake>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d009      	beq.n	8008c04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008bf6:	f06f 0301 	mvn.w	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e002      	b.n	8008c04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008bfe:	f06f 0302 	mvn.w	r3, #2
 8008c02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c04:	697b      	ldr	r3, [r7, #20]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008c2a:	f06f 0303 	mvn.w	r3, #3
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	e02c      	b.n	8008c8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c32:	f3ef 8305 	mrs	r3, IPSR
 8008c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01a      	beq.n	8008c74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	4619      	mov	r1, r3
 8008c48:	6938      	ldr	r0, [r7, #16]
 8008c4a:	f000 fda6 	bl	800979a <xQueueGiveFromISR>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d003      	beq.n	8008c5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008c54:	f06f 0302 	mvn.w	r3, #2
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e017      	b.n	8008c8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d014      	beq.n	8008c8c <osSemaphoreRelease+0x78>
 8008c62:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <osSemaphoreRelease+0x84>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	e00b      	b.n	8008c8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	6938      	ldr	r0, [r7, #16]
 8008c7c:	f000 fbf4 	bl	8009468 <xQueueGenericSend>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d002      	beq.n	8008c8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008c86:	f06f 0302 	mvn.w	r3, #2
 8008c8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008c8c:	697b      	ldr	r3, [r7, #20]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca8:	f3ef 8305 	mrs	r3, IPSR
 8008cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008cb4:	f06f 0305 	mvn.w	r3, #5
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e00e      	b.n	8008cda <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008cc2:	f06f 0303 	mvn.w	r3, #3
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e007      	b.n	8008cda <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008cca:	6938      	ldr	r0, [r7, #16]
 8008ccc:	f001 f9d4 	bl	800a078 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008cd4:	6938      	ldr	r0, [r7, #16]
 8008cd6:	f001 f859 	bl	8009d8c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008cda:	697b      	ldr	r3, [r7, #20]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	; 0x28
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf4:	f3ef 8305 	mrs	r3, IPSR
 8008cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8008cfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d15f      	bne.n	8008dc0 <osMessageQueueNew+0xdc>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d05c      	beq.n	8008dc0 <osMessageQueueNew+0xdc>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d059      	beq.n	8008dc0 <osMessageQueueNew+0xdc>
    mem = -1;
 8008d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d029      	beq.n	8008d6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d012      	beq.n	8008d46 <osMessageQueueNew+0x62>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	2b4f      	cmp	r3, #79	; 0x4f
 8008d26:	d90e      	bls.n	8008d46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d302      	bcc.n	8008d46 <osMessageQueueNew+0x62>
        mem = 1;
 8008d40:	2301      	movs	r3, #1
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e014      	b.n	8008d70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d110      	bne.n	8008d70 <osMessageQueueNew+0x8c>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10c      	bne.n	8008d70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d108      	bne.n	8008d70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <osMessageQueueNew+0x8c>
          mem = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]
 8008d6a:	e001      	b.n	8008d70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d10b      	bne.n	8008d8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	9100      	str	r1, [sp, #0]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fa2f 	bl	80091e8 <xQueueGenericCreateStatic>
 8008d8a:	61f8      	str	r0, [r7, #28]
 8008d8c:	e008      	b.n	8008da0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d105      	bne.n	8008da0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008d94:	2200      	movs	r2, #0
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fa9d 	bl	80092d8 <xQueueGenericCreate>
 8008d9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00c      	beq.n	8008dc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	e001      	b.n	8008db8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	69f8      	ldr	r0, [r7, #28]
 8008dbc:	f001 f932 	bl	800a024 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008dc0:	69fb      	ldr	r3, [r7, #28]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de4:	f3ef 8305 	mrs	r3, IPSR
 8008de8:	617b      	str	r3, [r7, #20]
  return(result);
 8008dea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d028      	beq.n	8008e42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <osMessageQueuePut+0x36>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <osMessageQueuePut+0x36>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008e02:	f06f 0303 	mvn.w	r3, #3
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e038      	b.n	8008e7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e0e:	f107 0210 	add.w	r2, r7, #16
 8008e12:	2300      	movs	r3, #0
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	69b8      	ldr	r0, [r7, #24]
 8008e18:	f000 fc24 	bl	8009664 <xQueueGenericSendFromISR>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d003      	beq.n	8008e2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008e22:	f06f 0302 	mvn.w	r3, #2
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e028      	b.n	8008e7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d025      	beq.n	8008e7c <osMessageQueuePut+0xb0>
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <osMessageQueuePut+0xbc>)
 8008e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	e01c      	b.n	8008e7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <osMessageQueuePut+0x82>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e4e:	f06f 0303 	mvn.w	r3, #3
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	e012      	b.n	8008e7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e56:	2300      	movs	r3, #0
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	69b8      	ldr	r0, [r7, #24]
 8008e5e:	f000 fb03 	bl	8009468 <xQueueGenericSend>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d009      	beq.n	8008e7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008e6e:	f06f 0301 	mvn.w	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e002      	b.n	8008e7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008e76:	f06f 0302 	mvn.w	r3, #2
 8008e7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea2:	f3ef 8305 	mrs	r3, IPSR
 8008ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d028      	beq.n	8008f00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <osMessageQueueGet+0x34>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <osMessageQueueGet+0x34>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ec0:	f06f 0303 	mvn.w	r3, #3
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	e037      	b.n	8008f38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008ecc:	f107 0310 	add.w	r3, r7, #16
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	69b8      	ldr	r0, [r7, #24]
 8008ed6:	f000 fed9 	bl	8009c8c <xQueueReceiveFromISR>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d003      	beq.n	8008ee8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008ee0:	f06f 0302 	mvn.w	r3, #2
 8008ee4:	61fb      	str	r3, [r7, #28]
 8008ee6:	e027      	b.n	8008f38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d024      	beq.n	8008f38 <osMessageQueueGet+0xac>
 8008eee:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <osMessageQueueGet+0xb8>)
 8008ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	e01b      	b.n	8008f38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <osMessageQueueGet+0x80>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d103      	bne.n	8008f14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008f0c:	f06f 0303 	mvn.w	r3, #3
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	e011      	b.n	8008f38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	69b8      	ldr	r0, [r7, #24]
 8008f1a:	f000 fccb 	bl	80098b4 <xQueueReceive>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d009      	beq.n	8008f38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008f2a:	f06f 0301 	mvn.w	r3, #1
 8008f2e:	61fb      	str	r3, [r7, #28]
 8008f30:	e002      	b.n	8008f38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f32:	f06f 0302 	mvn.w	r3, #2
 8008f36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f38:	69fb      	ldr	r3, [r7, #28]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3720      	adds	r7, #32
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a07      	ldr	r2, [pc, #28]	; (8008f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <vApplicationGetIdleTaskMemory+0x30>)
 8008f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2280      	movs	r2, #128	; 0x80
 8008f64:	601a      	str	r2, [r3, #0]
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2000434c 	.word	0x2000434c
 8008f78:	200043a8 	.word	0x200043a8

08008f7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4a07      	ldr	r2, [pc, #28]	; (8008fa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4a06      	ldr	r2, [pc, #24]	; (8008fac <vApplicationGetTimerTaskMemory+0x30>)
 8008f92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f9a:	601a      	str	r2, [r3, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	200045a8 	.word	0x200045a8
 8008fac:	20004604 	.word	0x20004604

08008fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f103 0208 	add.w	r2, r3, #8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f103 0208 	add.w	r2, r3, #8
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f103 0208 	add.w	r2, r3, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800900a:	b480      	push	{r7}
 800900c:	b085      	sub	sp, #20
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009068:	d103      	bne.n	8009072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e00c      	b.n	800908c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3308      	adds	r3, #8
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e002      	b.n	8009080 <vListInsert+0x2e>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	429a      	cmp	r2, r3
 800908a:	d2f6      	bcs.n	800907a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6892      	ldr	r2, [r2, #8]
 80090da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6852      	ldr	r2, [r2, #4]
 80090e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d103      	bne.n	80090f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	1e5a      	subs	r2, r3, #1
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10a      	bne.n	8009142 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800913e:	bf00      	nop
 8009140:	e7fe      	b.n	8009140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009142:	f002 fc7f 	bl	800ba44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	441a      	add	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	3b01      	subs	r3, #1
 8009174:	68f9      	ldr	r1, [r7, #12]
 8009176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	441a      	add	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d114      	bne.n	80091c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01a      	beq.n	80091d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3310      	adds	r3, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	f001 fc37 	bl	800aa18 <xTaskRemoveFromEventList>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d012      	beq.n	80091d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091b0:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <xQueueGenericReset+0xcc>)
 80091b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	e009      	b.n	80091d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3310      	adds	r3, #16
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fef2 	bl	8008fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3324      	adds	r3, #36	; 0x24
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff feed 	bl	8008fb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f002 fc65 	bl	800baa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091da:	2301      	movs	r3, #1
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	; 0x38
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <xQueueGenericCreateStatic+0x52>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <xQueueGenericCreateStatic+0x56>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueGenericCreateStatic+0x58>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	623b      	str	r3, [r7, #32]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <xQueueGenericCreateStatic+0x7e>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <xQueueGenericCreateStatic+0x82>
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <xQueueGenericCreateStatic+0x84>
 800926a:	2300      	movs	r3, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	61fb      	str	r3, [r7, #28]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009286:	2350      	movs	r3, #80	; 0x50
 8009288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b50      	cmp	r3, #80	; 0x50
 800928e:	d00a      	beq.n	80092a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61bb      	str	r3, [r7, #24]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00d      	beq.n	80092ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4613      	mov	r3, r2
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 f83f 	bl	800934c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3730      	adds	r7, #48	; 0x30
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <xQueueGenericCreate+0x2a>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	613b      	str	r3, [r7, #16]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	fb02 f303 	mul.w	r3, r2, r3
 800930a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3350      	adds	r3, #80	; 0x50
 8009310:	4618      	mov	r0, r3
 8009312:	f002 fcb9 	bl	800bc88 <pvPortMalloc>
 8009316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d011      	beq.n	8009342 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	3350      	adds	r3, #80	; 0x50
 8009326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009330:	79fa      	ldrb	r2, [r7, #7]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	4613      	mov	r3, r2
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f805 	bl	800934c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009342:	69bb      	ldr	r3, [r7, #24]
	}
 8009344:	4618      	mov	r0, r3
 8009346:	3720      	adds	r7, #32
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d103      	bne.n	8009368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e002      	b.n	800936e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800937a:	2101      	movs	r1, #1
 800937c:	69b8      	ldr	r0, [r7, #24]
 800937e:	f7ff fecb 	bl	8009118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08a      	sub	sp, #40	; 0x28
 8009396:	af02      	add	r7, sp, #8
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61bb      	str	r3, [r7, #24]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d90a      	bls.n	80093d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	617b      	str	r3, [r7, #20]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093d8:	2302      	movs	r3, #2
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff ff00 	bl	80091e8 <xQueueGenericCreateStatic>
 80093e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093f6:	69fb      	ldr	r3, [r7, #28]
	}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3720      	adds	r7, #32
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	613b      	str	r3, [r7, #16]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d90a      	bls.n	8009444 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	60fb      	str	r3, [r7, #12]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009444:	2202      	movs	r2, #2
 8009446:	2100      	movs	r1, #0
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ff45 	bl	80092d8 <xQueueGenericCreate>
 800944e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800945c:	697b      	ldr	r3, [r7, #20]
	}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009476:	2300      	movs	r3, #0
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <xQueueGenericSend+0x32>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <xQueueGenericSend+0x40>
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <xQueueGenericSend+0x44>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <xQueueGenericSend+0x46>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <xQueueGenericSend+0x60>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d103      	bne.n	80094d6 <xQueueGenericSend+0x6e>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <xQueueGenericSend+0x72>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e000      	b.n	80094dc <xQueueGenericSend+0x74>
 80094da:	2300      	movs	r3, #0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	623b      	str	r3, [r7, #32]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094f6:	f001 fc4d 	bl	800ad94 <xTaskGetSchedulerState>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <xQueueGenericSend+0x9e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <xQueueGenericSend+0xa2>
 8009506:	2301      	movs	r3, #1
 8009508:	e000      	b.n	800950c <xQueueGenericSend+0xa4>
 800950a:	2300      	movs	r3, #0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <xQueueGenericSend+0xbe>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	61fb      	str	r3, [r7, #28]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009526:	f002 fa8d 	bl	800ba44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	429a      	cmp	r2, r3
 8009534:	d302      	bcc.n	800953c <xQueueGenericSend+0xd4>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d129      	bne.n	8009590 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009542:	f000 fc5e 	bl	8009e02 <prvCopyDataToQueue>
 8009546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	3324      	adds	r3, #36	; 0x24
 8009554:	4618      	mov	r0, r3
 8009556:	f001 fa5f 	bl	800aa18 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <xQueueGenericSend+0x1f8>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	e00a      	b.n	8009588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <xQueueGenericSend+0x1f8>)
 800957a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009588:	f002 fa8c 	bl	800baa4 <vPortExitCritical>
				return pdPASS;
 800958c:	2301      	movs	r3, #1
 800958e:	e063      	b.n	8009658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009596:	f002 fa85 	bl	800baa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800959a:	2300      	movs	r3, #0
 800959c:	e05c      	b.n	8009658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 fa99 	bl	800aae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ae:	2301      	movs	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095b2:	f002 fa77 	bl	800baa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095b6:	f000 fff9 	bl	800a5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ba:	f002 fa43 	bl	800ba44 <vPortEnterCritical>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ca:	d103      	bne.n	80095d4 <xQueueGenericSend+0x16c>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095da:	b25b      	sxtb	r3, r3
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x182>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095ea:	f002 fa5b 	bl	800baa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095ee:	1d3a      	adds	r2, r7, #4
 80095f0:	f107 0314 	add.w	r3, r7, #20
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fa88 	bl	800ab0c <xTaskCheckForTimeOut>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d124      	bne.n	800964c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009604:	f000 fcf5 	bl	8009ff2 <prvIsQueueFull>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d018      	beq.n	8009640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	3310      	adds	r3, #16
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f001 f9ae 	bl	800a978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800961c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800961e:	f000 fc80 	bl	8009f22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009622:	f000 ffd1 	bl	800a5c8 <xTaskResumeAll>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af7c 	bne.w	8009526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <xQueueGenericSend+0x1f8>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	e772      	b.n	8009526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009642:	f000 fc6e 	bl	8009f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009646:	f000 ffbf 	bl	800a5c8 <xTaskResumeAll>
 800964a:	e76c      	b.n	8009526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964e:	f000 fc68 	bl	8009f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009652:	f000 ffb9 	bl	800a5c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009658:	4618      	mov	r0, r3
 800965a:	3738      	adds	r7, #56	; 0x38
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	; 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d103      	bne.n	80096a0 <xQueueGenericSendFromISR+0x3c>
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <xQueueGenericSendFromISR+0x40>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e000      	b.n	80096a6 <xQueueGenericSendFromISR+0x42>
 80096a4:	2300      	movs	r3, #0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d103      	bne.n	80096ce <xQueueGenericSendFromISR+0x6a>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d101      	bne.n	80096d2 <xQueueGenericSendFromISR+0x6e>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <xQueueGenericSendFromISR+0x70>
 80096d2:	2300      	movs	r3, #0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	623b      	str	r3, [r7, #32]
}
 80096ea:	bf00      	nop
 80096ec:	e7fe      	b.n	80096ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096ee:	f002 fa8b 	bl	800bc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096f2:	f3ef 8211 	mrs	r2, BASEPRI
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	61fa      	str	r2, [r7, #28]
 8009708:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800970a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	429a      	cmp	r2, r3
 8009718:	d302      	bcc.n	8009720 <xQueueGenericSendFromISR+0xbc>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d12f      	bne.n	8009780 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009736:	f000 fb64 	bl	8009e02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800973a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009742:	d112      	bne.n	800976a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d016      	beq.n	800977a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	3324      	adds	r3, #36	; 0x24
 8009750:	4618      	mov	r0, r3
 8009752:	f001 f961 	bl	800aa18 <xTaskRemoveFromEventList>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00e      	beq.n	800977a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e007      	b.n	800977a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800976a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800976e:	3301      	adds	r3, #1
 8009770:	b2db      	uxtb	r3, r3
 8009772:	b25a      	sxtb	r2, r3
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800977a:	2301      	movs	r3, #1
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800977e:	e001      	b.n	8009784 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009786:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800978e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009792:	4618      	mov	r0, r3
 8009794:	3740      	adds	r7, #64	; 0x40
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b08e      	sub	sp, #56	; 0x38
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	623b      	str	r3, [r7, #32]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <xQueueGiveFromISR+0x58>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <xQueueGiveFromISR+0x5c>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <xQueueGiveFromISR+0x5e>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xQueueGiveFromISR+0x78>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61bb      	str	r3, [r7, #24]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009812:	f002 f9f9 	bl	800bc08 <vPortValidateInterruptPriority>
	__asm volatile
 8009816:	f3ef 8211 	mrs	r2, BASEPRI
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	617a      	str	r2, [r7, #20]
 800982c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800982e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800983e:	429a      	cmp	r2, r3
 8009840:	d22b      	bcs.n	800989a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800985c:	d112      	bne.n	8009884 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	2b00      	cmp	r3, #0
 8009864:	d016      	beq.n	8009894 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	3324      	adds	r3, #36	; 0x24
 800986a:	4618      	mov	r0, r3
 800986c:	f001 f8d4 	bl	800aa18 <xTaskRemoveFromEventList>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e007      	b.n	8009894 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009888:	3301      	adds	r3, #1
 800988a:	b2db      	uxtb	r3, r3
 800988c:	b25a      	sxtb	r2, r3
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009894:	2301      	movs	r3, #1
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
 8009898:	e001      	b.n	800989e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800989a:	2300      	movs	r3, #0
 800989c:	637b      	str	r3, [r7, #52]	; 0x34
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f383 8811 	msr	BASEPRI, r3
}
 80098a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3738      	adds	r7, #56	; 0x38
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08c      	sub	sp, #48	; 0x30
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xQueueReceive+0x30>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	623b      	str	r3, [r7, #32]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <xQueueReceive+0x3e>
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <xQueueReceive+0x42>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <xQueueReceive+0x44>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xQueueReceive+0x5e>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	61fb      	str	r3, [r7, #28]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009912:	f001 fa3f 	bl	800ad94 <xTaskGetSchedulerState>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <xQueueReceive+0x6e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <xQueueReceive+0x72>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <xQueueReceive+0x74>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xQueueReceive+0x8e>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	61bb      	str	r3, [r7, #24]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009942:	f002 f87f 	bl	800ba44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01f      	beq.n	8009992 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009956:	f000 fabe 	bl	8009ed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	1e5a      	subs	r2, r3, #1
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00f      	beq.n	800998a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	3310      	adds	r3, #16
 800996e:	4618      	mov	r0, r3
 8009970:	f001 f852 	bl	800aa18 <xTaskRemoveFromEventList>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d007      	beq.n	800998a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800997a:	4b3d      	ldr	r3, [pc, #244]	; (8009a70 <xQueueReceive+0x1bc>)
 800997c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800998a:	f002 f88b 	bl	800baa4 <vPortExitCritical>
				return pdPASS;
 800998e:	2301      	movs	r3, #1
 8009990:	e069      	b.n	8009a66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d103      	bne.n	80099a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009998:	f002 f884 	bl	800baa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800999c:	2300      	movs	r3, #0
 800999e:	e062      	b.n	8009a66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099a6:	f107 0310 	add.w	r3, r7, #16
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 f898 	bl	800aae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099b4:	f002 f876 	bl	800baa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099b8:	f000 fdf8 	bl	800a5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099bc:	f002 f842 	bl	800ba44 <vPortEnterCritical>
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c6:	b25b      	sxtb	r3, r3
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099cc:	d103      	bne.n	80099d6 <xQueueReceive+0x122>
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e2:	d103      	bne.n	80099ec <xQueueReceive+0x138>
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099ec:	f002 f85a 	bl	800baa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099f0:	1d3a      	adds	r2, r7, #4
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	4611      	mov	r1, r2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 f887 	bl	800ab0c <xTaskCheckForTimeOut>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d123      	bne.n	8009a4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a06:	f000 fade 	bl	8009fc6 <prvIsQueueEmpty>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d017      	beq.n	8009a40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 ffad 	bl	800a978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a20:	f000 fa7f 	bl	8009f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a24:	f000 fdd0 	bl	800a5c8 <xTaskResumeAll>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d189      	bne.n	8009942 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a2e:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <xQueueReceive+0x1bc>)
 8009a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	e780      	b.n	8009942 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a42:	f000 fa6e 	bl	8009f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a46:	f000 fdbf 	bl	800a5c8 <xTaskResumeAll>
 8009a4a:	e77a      	b.n	8009942 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4e:	f000 fa68 	bl	8009f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a52:	f000 fdb9 	bl	800a5c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a58:	f000 fab5 	bl	8009fc6 <prvIsQueueEmpty>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f43f af6f 	beq.w	8009942 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3730      	adds	r7, #48	; 0x30
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	e000ed04 	.word	0xe000ed04

08009a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08e      	sub	sp, #56	; 0x38
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	623b      	str	r3, [r7, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61fb      	str	r3, [r7, #28]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ac4:	f001 f966 	bl	800ad94 <xTaskGetSchedulerState>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <xQueueSemaphoreTake+0x60>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <xQueueSemaphoreTake+0x64>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <xQueueSemaphoreTake+0x66>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	61bb      	str	r3, [r7, #24]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009af4:	f001 ffa6 	bl	800ba44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d024      	beq.n	8009b4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	1e5a      	subs	r2, r3, #1
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b14:	f001 fab4 	bl	800b080 <pvTaskIncrementMutexHeldCount>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00f      	beq.n	8009b46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	3310      	adds	r3, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 ff74 	bl	800aa18 <xTaskRemoveFromEventList>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b36:	4b54      	ldr	r3, [pc, #336]	; (8009c88 <xQueueSemaphoreTake+0x214>)
 8009b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b46:	f001 ffad 	bl	800baa4 <vPortExitCritical>
				return pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e097      	b.n	8009c7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d111      	bne.n	8009b78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	617b      	str	r3, [r7, #20]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b70:	f001 ff98 	bl	800baa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e082      	b.n	8009c7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b7e:	f107 030c 	add.w	r3, r7, #12
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 ffac 	bl	800aae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b8c:	f001 ff8a 	bl	800baa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b90:	f000 fd0c 	bl	800a5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b94:	f001 ff56 	bl	800ba44 <vPortEnterCritical>
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b9e:	b25b      	sxtb	r3, r3
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ba4:	d103      	bne.n	8009bae <xQueueSemaphoreTake+0x13a>
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bb4:	b25b      	sxtb	r3, r3
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bba:	d103      	bne.n	8009bc4 <xQueueSemaphoreTake+0x150>
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bc4:	f001 ff6e 	bl	800baa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bc8:	463a      	mov	r2, r7
 8009bca:	f107 030c 	add.w	r3, r7, #12
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 ff9b 	bl	800ab0c <xTaskCheckForTimeOut>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d132      	bne.n	8009c42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bde:	f000 f9f2 	bl	8009fc6 <prvIsQueueEmpty>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d026      	beq.n	8009c36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d109      	bne.n	8009c04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009bf0:	f001 ff28 	bl	800ba44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 f8e9 	bl	800add0 <xTaskPriorityInherit>
 8009bfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009c00:	f001 ff50 	bl	800baa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	3324      	adds	r3, #36	; 0x24
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 feb3 	bl	800a978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c14:	f000 f985 	bl	8009f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c18:	f000 fcd6 	bl	800a5c8 <xTaskResumeAll>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f af68 	bne.w	8009af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c24:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <xQueueSemaphoreTake+0x214>)
 8009c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	e75e      	b.n	8009af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c38:	f000 f973 	bl	8009f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c3c:	f000 fcc4 	bl	800a5c8 <xTaskResumeAll>
 8009c40:	e758      	b.n	8009af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c44:	f000 f96d 	bl	8009f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c48:	f000 fcbe 	bl	800a5c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c4e:	f000 f9ba 	bl	8009fc6 <prvIsQueueEmpty>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f43f af4d 	beq.w	8009af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00d      	beq.n	8009c7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009c60:	f001 fef0 	bl	800ba44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c66:	f000 f8b4 	bl	8009dd2 <prvGetDisinheritPriorityAfterTimeout>
 8009c6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 f982 	bl	800af7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c78:	f001 ff14 	bl	800baa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3738      	adds	r7, #56	; 0x38
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	; 0x38
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	623b      	str	r3, [r7, #32]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <xQueueReceiveFromISR+0x3a>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <xQueueReceiveFromISR+0x3e>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <xQueueReceiveFromISR+0x40>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	61fb      	str	r3, [r7, #28]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ce6:	f001 ff8f 	bl	800bc08 <vPortValidateInterruptPriority>
	__asm volatile
 8009cea:	f3ef 8211 	mrs	r2, BASEPRI
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	61ba      	str	r2, [r7, #24]
 8009d00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d02f      	beq.n	8009d72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d20:	f000 f8d9 	bl	8009ed6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	1e5a      	subs	r2, r3, #1
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d34:	d112      	bne.n	8009d5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d016      	beq.n	8009d6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	3310      	adds	r3, #16
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fe68 	bl	800aa18 <xTaskRemoveFromEventList>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00b      	beq.n	8009d6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e007      	b.n	8009d6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d60:	3301      	adds	r3, #1
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	b25a      	sxtb	r2, r3
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d70:	e001      	b.n	8009d76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f383 8811 	msr	BASEPRI, r3
}
 8009d80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3738      	adds	r7, #56	; 0x38
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <vQueueDelete+0x28>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60bb      	str	r3, [r7, #8]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f95f 	bl	800a078 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f002 f82b 	bl	800be20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d006      	beq.n	8009df0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e001      	b.n	8009df4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009df4:	68fb      	ldr	r3, [r7, #12]
	}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10d      	bne.n	8009e3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d14d      	bne.n	8009ec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 f837 	bl	800aea0 <xTaskPriorityDisinherit>
 8009e32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	609a      	str	r2, [r3, #8]
 8009e3a:	e043      	b.n	8009ec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d119      	bne.n	8009e76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6858      	ldr	r0, [r3, #4]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68b9      	ldr	r1, [r7, #8]
 8009e4e:	f002 f92f 	bl	800c0b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	441a      	add	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d32b      	bcc.n	8009ec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	605a      	str	r2, [r3, #4]
 8009e74:	e026      	b.n	8009ec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	68d8      	ldr	r0, [r3, #12]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	f002 f915 	bl	800c0b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	425b      	negs	r3, r3
 8009e90:	441a      	add	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d207      	bcs.n	8009eb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	425b      	negs	r3, r3
 8009eac:	441a      	add	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d105      	bne.n	8009ec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ecc:	697b      	ldr	r3, [r7, #20]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d018      	beq.n	8009f1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	441a      	add	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d303      	bcc.n	8009f0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68d9      	ldr	r1, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	461a      	mov	r2, r3
 8009f14:	6838      	ldr	r0, [r7, #0]
 8009f16:	f002 f8cb 	bl	800c0b0 <memcpy>
	}
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f2a:	f001 fd8b 	bl	800ba44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f36:	e011      	b.n	8009f5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d012      	beq.n	8009f66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3324      	adds	r3, #36	; 0x24
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fd67 	bl	800aa18 <xTaskRemoveFromEventList>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f50:	f000 fe3e 	bl	800abd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dce9      	bgt.n	8009f38 <prvUnlockQueue+0x16>
 8009f64:	e000      	b.n	8009f68 <prvUnlockQueue+0x46>
					break;
 8009f66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	22ff      	movs	r2, #255	; 0xff
 8009f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f70:	f001 fd98 	bl	800baa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f74:	f001 fd66 	bl	800ba44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f80:	e011      	b.n	8009fa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d012      	beq.n	8009fb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3310      	adds	r3, #16
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 fd42 	bl	800aa18 <xTaskRemoveFromEventList>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f9a:	f000 fe19 	bl	800abd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dce9      	bgt.n	8009f82 <prvUnlockQueue+0x60>
 8009fae:	e000      	b.n	8009fb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009fb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	22ff      	movs	r2, #255	; 0xff
 8009fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009fba:	f001 fd73 	bl	800baa4 <vPortExitCritical>
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fce:	f001 fd39 	bl	800ba44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e001      	b.n	8009fe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 fd5e 	bl	800baa4 <vPortExitCritical>

	return xReturn;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ffa:	f001 fd23 	bl	800ba44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	429a      	cmp	r2, r3
 800a008:	d102      	bne.n	800a010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a00a:	2301      	movs	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	e001      	b.n	800a014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a014:	f001 fd46 	bl	800baa4 <vPortExitCritical>

	return xReturn;
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	e014      	b.n	800a05e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a034:	4a0f      	ldr	r2, [pc, #60]	; (800a074 <vQueueAddToRegistry+0x50>)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10b      	bne.n	800a058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a040:	490c      	ldr	r1, [pc, #48]	; (800a074 <vQueueAddToRegistry+0x50>)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a04a:	4a0a      	ldr	r2, [pc, #40]	; (800a074 <vQueueAddToRegistry+0x50>)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a056:	e006      	b.n	800a066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b07      	cmp	r3, #7
 800a062:	d9e7      	bls.n	800a034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	2000ad1c 	.word	0x2000ad1c

0800a078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e016      	b.n	800a0b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a086:	4a10      	ldr	r2, [pc, #64]	; (800a0c8 <vQueueUnregisterQueue+0x50>)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	4413      	add	r3, r2
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d10b      	bne.n	800a0ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a096:	4a0c      	ldr	r2, [pc, #48]	; (800a0c8 <vQueueUnregisterQueue+0x50>)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2100      	movs	r1, #0
 800a09c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a0a0:	4a09      	ldr	r2, [pc, #36]	; (800a0c8 <vQueueUnregisterQueue+0x50>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	605a      	str	r2, [r3, #4]
				break;
 800a0ac:	e006      	b.n	800a0bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b07      	cmp	r3, #7
 800a0b8:	d9e5      	bls.n	800a086 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a0ba:	bf00      	nop
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	2000ad1c 	.word	0x2000ad1c

0800a0cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0dc:	f001 fcb2 	bl	800ba44 <vPortEnterCritical>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ec:	d103      	bne.n	800a0f6 <vQueueWaitForMessageRestricted+0x2a>
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a102:	d103      	bne.n	800a10c <vQueueWaitForMessageRestricted+0x40>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a10c:	f001 fcca 	bl	800baa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	3324      	adds	r3, #36	; 0x24
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fc4d 	bl	800a9c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a126:	6978      	ldr	r0, [r7, #20]
 800a128:	f7ff fefb 	bl	8009f22 <prvUnlockQueue>
	}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08e      	sub	sp, #56	; 0x38
 800a138:	af04      	add	r7, sp, #16
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xTaskCreateStatic+0x46>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61fb      	str	r3, [r7, #28]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a17a:	235c      	movs	r3, #92	; 0x5c
 800a17c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b5c      	cmp	r3, #92	; 0x5c
 800a182:	d00a      	beq.n	800a19a <xTaskCreateStatic+0x66>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	61bb      	str	r3, [r7, #24]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a19a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01e      	beq.n	800a1e0 <xTaskCreateStatic+0xac>
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01b      	beq.n	800a1e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9303      	str	r3, [sp, #12]
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	9302      	str	r3, [sp, #8]
 800a1c2:	f107 0314 	add.w	r3, r7, #20
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 f850 	bl	800a278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1da:	f000 f8dd 	bl	800a398 <prvAddNewTaskToReadyList>
 800a1de:	e001      	b.n	800a1e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1e4:	697b      	ldr	r3, [r7, #20]
	}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3728      	adds	r7, #40	; 0x28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b08c      	sub	sp, #48	; 0x30
 800a1f2:	af04      	add	r7, sp, #16
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	603b      	str	r3, [r7, #0]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fd40 	bl	800bc88 <pvPortMalloc>
 800a208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00e      	beq.n	800a22e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a210:	205c      	movs	r0, #92	; 0x5c
 800a212:	f001 fd39 	bl	800bc88 <pvPortMalloc>
 800a216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	631a      	str	r2, [r3, #48]	; 0x30
 800a224:	e005      	b.n	800a232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a226:	6978      	ldr	r0, [r7, #20]
 800a228:	f001 fdfa 	bl	800be20 <vPortFree>
 800a22c:	e001      	b.n	800a232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d017      	beq.n	800a268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a240:	88fa      	ldrh	r2, [r7, #6]
 800a242:	2300      	movs	r3, #0
 800a244:	9303      	str	r3, [sp, #12]
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	9302      	str	r3, [sp, #8]
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 f80e 	bl	800a278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a25c:	69f8      	ldr	r0, [r7, #28]
 800a25e:	f000 f89b 	bl	800a398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a262:	2301      	movs	r3, #1
 800a264:	61bb      	str	r3, [r7, #24]
 800a266:	e002      	b.n	800a26e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a26c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a26e:	69bb      	ldr	r3, [r7, #24]
	}
 800a270:	4618      	mov	r0, r3
 800a272:	3720      	adds	r7, #32
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	461a      	mov	r2, r3
 800a290:	21a5      	movs	r1, #165	; 0xa5
 800a292:	f001 ff1b 	bl	800c0cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	617b      	str	r3, [r7, #20]
}
 800a2cc:	bf00      	nop
 800a2ce:	e7fe      	b.n	800a2ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d01f      	beq.n	800a316 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	e012      	b.n	800a302 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	7819      	ldrb	r1, [r3, #0]
 800a2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3334      	adds	r3, #52	; 0x34
 800a2ec:	460a      	mov	r2, r1
 800a2ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d006      	beq.n	800a30a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	3301      	adds	r3, #1
 800a300:	61fb      	str	r3, [r7, #28]
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	2b0f      	cmp	r3, #15
 800a306:	d9e9      	bls.n	800a2dc <prvInitialiseNewTask+0x64>
 800a308:	e000      	b.n	800a30c <prvInitialiseNewTask+0x94>
			{
				break;
 800a30a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a314:	e003      	b.n	800a31e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	2b37      	cmp	r3, #55	; 0x37
 800a322:	d901      	bls.n	800a328 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a324:	2337      	movs	r3, #55	; 0x37
 800a326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a32c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	2200      	movs	r2, #0
 800a338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	3304      	adds	r3, #4
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fe56 	bl	8008ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	3318      	adds	r3, #24
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fe51 	bl	8008ff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	2200      	movs	r2, #0
 800a368:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	69b8      	ldr	r0, [r7, #24]
 800a378:	f001 fa38 	bl	800b7ec <pxPortInitialiseStack>
 800a37c:	4602      	mov	r2, r0
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a38e:	bf00      	nop
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3a0:	f001 fb50 	bl	800ba44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3a4:	4b2d      	ldr	r3, [pc, #180]	; (800a45c <prvAddNewTaskToReadyList+0xc4>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	4a2c      	ldr	r2, [pc, #176]	; (800a45c <prvAddNewTaskToReadyList+0xc4>)
 800a3ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3ae:	4b2c      	ldr	r3, [pc, #176]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3b6:	4a2a      	ldr	r2, [pc, #168]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3bc:	4b27      	ldr	r3, [pc, #156]	; (800a45c <prvAddNewTaskToReadyList+0xc4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d110      	bne.n	800a3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3c4:	f000 fc28 	bl	800ac18 <prvInitialiseTaskLists>
 800a3c8:	e00d      	b.n	800a3e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3ca:	4b26      	ldr	r3, [pc, #152]	; (800a464 <prvAddNewTaskToReadyList+0xcc>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3d2:	4b23      	ldr	r3, [pc, #140]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d802      	bhi.n	800a3e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3e0:	4a1f      	ldr	r2, [pc, #124]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3e6:	4b20      	ldr	r3, [pc, #128]	; (800a468 <prvAddNewTaskToReadyList+0xd0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	4a1e      	ldr	r2, [pc, #120]	; (800a468 <prvAddNewTaskToReadyList+0xd0>)
 800a3ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <prvAddNewTaskToReadyList+0xd0>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <prvAddNewTaskToReadyList+0xd4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d903      	bls.n	800a40c <prvAddNewTaskToReadyList+0x74>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a18      	ldr	r2, [pc, #96]	; (800a46c <prvAddNewTaskToReadyList+0xd4>)
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4a15      	ldr	r2, [pc, #84]	; (800a470 <prvAddNewTaskToReadyList+0xd8>)
 800a41a:	441a      	add	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7fe fdf1 	bl	800900a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a428:	f001 fb3c 	bl	800baa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a42c:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <prvAddNewTaskToReadyList+0xcc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00e      	beq.n	800a452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a434:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	429a      	cmp	r2, r3
 800a440:	d207      	bcs.n	800a452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a442:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <prvAddNewTaskToReadyList+0xdc>)
 800a444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a452:	bf00      	nop
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20004ed8 	.word	0x20004ed8
 800a460:	20004a04 	.word	0x20004a04
 800a464:	20004ee4 	.word	0x20004ee4
 800a468:	20004ef4 	.word	0x20004ef4
 800a46c:	20004ee0 	.word	0x20004ee0
 800a470:	20004a08 	.word	0x20004a08
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d017      	beq.n	800a4ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <vTaskDelay+0x60>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <vTaskDelay+0x30>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60bb      	str	r3, [r7, #8]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4a8:	f000 f880 	bl	800a5ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fdfa 	bl	800b0a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4b4:	f000 f888 	bl	800a5c8 <xTaskResumeAll>
 800a4b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <vTaskDelay+0x64>)
 800a4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20004f00 	.word	0x20004f00
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4ee:	463a      	mov	r2, r7
 800a4f0:	1d39      	adds	r1, r7, #4
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fd26 	bl	8008f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	9202      	str	r2, [sp, #8]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	2300      	movs	r3, #0
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	2300      	movs	r3, #0
 800a50c:	460a      	mov	r2, r1
 800a50e:	4921      	ldr	r1, [pc, #132]	; (800a594 <vTaskStartScheduler+0xb4>)
 800a510:	4821      	ldr	r0, [pc, #132]	; (800a598 <vTaskStartScheduler+0xb8>)
 800a512:	f7ff fe0f 	bl	800a134 <xTaskCreateStatic>
 800a516:	4603      	mov	r3, r0
 800a518:	4a20      	ldr	r2, [pc, #128]	; (800a59c <vTaskStartScheduler+0xbc>)
 800a51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a51c:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <vTaskStartScheduler+0xbc>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e001      	b.n	800a52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d102      	bne.n	800a53a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a534:	f000 fe0c 	bl	800b150 <xTimerCreateTimerTask>
 800a538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d116      	bne.n	800a56e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	613b      	str	r3, [r7, #16]
}
 800a552:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a554:	4b12      	ldr	r3, [pc, #72]	; (800a5a0 <vTaskStartScheduler+0xc0>)
 800a556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a55c:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <vTaskStartScheduler+0xc4>)
 800a55e:	2201      	movs	r2, #1
 800a560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a562:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <vTaskStartScheduler+0xc8>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a568:	f001 f9ca 	bl	800b900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a56c:	e00e      	b.n	800a58c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a574:	d10a      	bne.n	800a58c <vTaskStartScheduler+0xac>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	60fb      	str	r3, [r7, #12]
}
 800a588:	bf00      	nop
 800a58a:	e7fe      	b.n	800a58a <vTaskStartScheduler+0xaa>
}
 800a58c:	bf00      	nop
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	0800ca88 	.word	0x0800ca88
 800a598:	0800abe9 	.word	0x0800abe9
 800a59c:	20004efc 	.word	0x20004efc
 800a5a0:	20004ef8 	.word	0x20004ef8
 800a5a4:	20004ee4 	.word	0x20004ee4
 800a5a8:	20004edc 	.word	0x20004edc

0800a5ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5b0:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <vTaskSuspendAll+0x18>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	4a03      	ldr	r2, [pc, #12]	; (800a5c4 <vTaskSuspendAll+0x18>)
 800a5b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5ba:	bf00      	nop
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	20004f00 	.word	0x20004f00

0800a5c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5d6:	4b42      	ldr	r3, [pc, #264]	; (800a6e0 <xTaskResumeAll+0x118>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	603b      	str	r3, [r7, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5f4:	f001 fa26 	bl	800ba44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5f8:	4b39      	ldr	r3, [pc, #228]	; (800a6e0 <xTaskResumeAll+0x118>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4a38      	ldr	r2, [pc, #224]	; (800a6e0 <xTaskResumeAll+0x118>)
 800a600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a602:	4b37      	ldr	r3, [pc, #220]	; (800a6e0 <xTaskResumeAll+0x118>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d162      	bne.n	800a6d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a60a:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <xTaskResumeAll+0x11c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05e      	beq.n	800a6d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a612:	e02f      	b.n	800a674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a614:	4b34      	ldr	r3, [pc, #208]	; (800a6e8 <xTaskResumeAll+0x120>)
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3318      	adds	r3, #24
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe fd4f 	bl	80090c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3304      	adds	r3, #4
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fd4a 	bl	80090c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a634:	4b2d      	ldr	r3, [pc, #180]	; (800a6ec <xTaskResumeAll+0x124>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d903      	bls.n	800a644 <xTaskResumeAll+0x7c>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <xTaskResumeAll+0x124>)
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a648:	4613      	mov	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4a27      	ldr	r2, [pc, #156]	; (800a6f0 <xTaskResumeAll+0x128>)
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3304      	adds	r3, #4
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7fe fcd5 	bl	800900a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	4b23      	ldr	r3, [pc, #140]	; (800a6f4 <xTaskResumeAll+0x12c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a66e:	4b22      	ldr	r3, [pc, #136]	; (800a6f8 <xTaskResumeAll+0x130>)
 800a670:	2201      	movs	r2, #1
 800a672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a674:	4b1c      	ldr	r3, [pc, #112]	; (800a6e8 <xTaskResumeAll+0x120>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1cb      	bne.n	800a614 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a682:	f000 fb67 	bl	800ad54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a686:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <xTaskResumeAll+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d010      	beq.n	800a6b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a692:	f000 f859 	bl	800a748 <xTaskIncrementTick>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a69c:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <xTaskResumeAll+0x130>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f1      	bne.n	800a692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <xTaskResumeAll+0x134>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6b4:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <xTaskResumeAll+0x130>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d009      	beq.n	800a6d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	; (800a700 <xTaskResumeAll+0x138>)
 800a6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6d0:	f001 f9e8 	bl	800baa4 <vPortExitCritical>

	return xAlreadyYielded;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20004f00 	.word	0x20004f00
 800a6e4:	20004ed8 	.word	0x20004ed8
 800a6e8:	20004e98 	.word	0x20004e98
 800a6ec:	20004ee0 	.word	0x20004ee0
 800a6f0:	20004a08 	.word	0x20004a08
 800a6f4:	20004a04 	.word	0x20004a04
 800a6f8:	20004eec 	.word	0x20004eec
 800a6fc:	20004ee8 	.word	0x20004ee8
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <xTaskGetTickCount+0x1c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a710:	687b      	ldr	r3, [r7, #4]
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	20004edc 	.word	0x20004edc

0800a724 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a72a:	f001 fa6d 	bl	800bc08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a72e:	2300      	movs	r3, #0
 800a730:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a732:	4b04      	ldr	r3, [pc, #16]	; (800a744 <xTaskGetTickCountFromISR+0x20>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a738:	683b      	ldr	r3, [r7, #0]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20004edc 	.word	0x20004edc

0800a748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a752:	4b4f      	ldr	r3, [pc, #316]	; (800a890 <xTaskIncrementTick+0x148>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 808f 	bne.w	800a87a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a75c:	4b4d      	ldr	r3, [pc, #308]	; (800a894 <xTaskIncrementTick+0x14c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a764:	4a4b      	ldr	r2, [pc, #300]	; (800a894 <xTaskIncrementTick+0x14c>)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d120      	bne.n	800a7b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a770:	4b49      	ldr	r3, [pc, #292]	; (800a898 <xTaskIncrementTick+0x150>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <xTaskIncrementTick+0x48>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	603b      	str	r3, [r7, #0]
}
 800a78c:	bf00      	nop
 800a78e:	e7fe      	b.n	800a78e <xTaskIncrementTick+0x46>
 800a790:	4b41      	ldr	r3, [pc, #260]	; (800a898 <xTaskIncrementTick+0x150>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	4b41      	ldr	r3, [pc, #260]	; (800a89c <xTaskIncrementTick+0x154>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a3f      	ldr	r2, [pc, #252]	; (800a898 <xTaskIncrementTick+0x150>)
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	4a3f      	ldr	r2, [pc, #252]	; (800a89c <xTaskIncrementTick+0x154>)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	4b3e      	ldr	r3, [pc, #248]	; (800a8a0 <xTaskIncrementTick+0x158>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4a3d      	ldr	r2, [pc, #244]	; (800a8a0 <xTaskIncrementTick+0x158>)
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	f000 fad1 	bl	800ad54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7b2:	4b3c      	ldr	r3, [pc, #240]	; (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d349      	bcc.n	800a850 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7bc:	4b36      	ldr	r3, [pc, #216]	; (800a898 <xTaskIncrementTick+0x150>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d104      	bne.n	800a7d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c6:	4b37      	ldr	r3, [pc, #220]	; (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7cc:	601a      	str	r2, [r3, #0]
					break;
 800a7ce:	e03f      	b.n	800a850 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d0:	4b31      	ldr	r3, [pc, #196]	; (800a898 <xTaskIncrementTick+0x150>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d203      	bcs.n	800a7f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7e8:	4a2e      	ldr	r2, [pc, #184]	; (800a8a4 <xTaskIncrementTick+0x15c>)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7ee:	e02f      	b.n	800a850 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fc65 	bl	80090c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d004      	beq.n	800a80c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	3318      	adds	r3, #24
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fc5c 	bl	80090c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	4b25      	ldr	r3, [pc, #148]	; (800a8a8 <xTaskIncrementTick+0x160>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d903      	bls.n	800a820 <xTaskIncrementTick+0xd8>
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	4a22      	ldr	r2, [pc, #136]	; (800a8a8 <xTaskIncrementTick+0x160>)
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ac <xTaskIncrementTick+0x164>)
 800a82e:	441a      	add	r2, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f7fe fbe7 	bl	800900a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a840:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <xTaskIncrementTick+0x168>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	429a      	cmp	r2, r3
 800a848:	d3b8      	bcc.n	800a7bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a84a:	2301      	movs	r3, #1
 800a84c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84e:	e7b5      	b.n	800a7bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <xTaskIncrementTick+0x168>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a856:	4915      	ldr	r1, [pc, #84]	; (800a8ac <xTaskIncrementTick+0x164>)
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d901      	bls.n	800a86c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a86c:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <xTaskIncrementTick+0x16c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d007      	beq.n	800a884 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a874:	2301      	movs	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e004      	b.n	800a884 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <xTaskIncrementTick+0x170>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3301      	adds	r3, #1
 800a880:	4a0d      	ldr	r2, [pc, #52]	; (800a8b8 <xTaskIncrementTick+0x170>)
 800a882:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a884:	697b      	ldr	r3, [r7, #20]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20004f00 	.word	0x20004f00
 800a894:	20004edc 	.word	0x20004edc
 800a898:	20004e90 	.word	0x20004e90
 800a89c:	20004e94 	.word	0x20004e94
 800a8a0:	20004ef0 	.word	0x20004ef0
 800a8a4:	20004ef8 	.word	0x20004ef8
 800a8a8:	20004ee0 	.word	0x20004ee0
 800a8ac:	20004a08 	.word	0x20004a08
 800a8b0:	20004a04 	.word	0x20004a04
 800a8b4:	20004eec 	.word	0x20004eec
 800a8b8:	20004ee8 	.word	0x20004ee8

0800a8bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8c2:	4b28      	ldr	r3, [pc, #160]	; (800a964 <vTaskSwitchContext+0xa8>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8ca:	4b27      	ldr	r3, [pc, #156]	; (800a968 <vTaskSwitchContext+0xac>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8d0:	e041      	b.n	800a956 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a8d2:	4b25      	ldr	r3, [pc, #148]	; (800a968 <vTaskSwitchContext+0xac>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d8:	4b24      	ldr	r3, [pc, #144]	; (800a96c <vTaskSwitchContext+0xb0>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e010      	b.n	800a902 <vTaskSwitchContext+0x46>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <vTaskSwitchContext+0x40>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	607b      	str	r3, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vTaskSwitchContext+0x3e>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	491b      	ldr	r1, [pc, #108]	; (800a970 <vTaskSwitchContext+0xb4>)
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0e4      	beq.n	800a8e0 <vTaskSwitchContext+0x24>
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4a13      	ldr	r2, [pc, #76]	; (800a970 <vTaskSwitchContext+0xb4>)
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3308      	adds	r3, #8
 800a938:	429a      	cmp	r2, r3
 800a93a:	d104      	bne.n	800a946 <vTaskSwitchContext+0x8a>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	4a09      	ldr	r2, [pc, #36]	; (800a974 <vTaskSwitchContext+0xb8>)
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	4a06      	ldr	r2, [pc, #24]	; (800a96c <vTaskSwitchContext+0xb0>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6013      	str	r3, [r2, #0]
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	20004f00 	.word	0x20004f00
 800a968:	20004eec 	.word	0x20004eec
 800a96c:	20004ee0 	.word	0x20004ee0
 800a970:	20004a08 	.word	0x20004a08
 800a974:	20004a04 	.word	0x20004a04

0800a978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60fb      	str	r3, [r7, #12]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <vTaskPlaceOnEventList+0x44>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3318      	adds	r3, #24
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7fe fb53 	bl	8009052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	6838      	ldr	r0, [r7, #0]
 800a9b0:	f000 fb7a 	bl	800b0a8 <prvAddCurrentTaskToDelayedList>
}
 800a9b4:	bf00      	nop
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20004a04 	.word	0x20004a04

0800a9c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	617b      	str	r3, [r7, #20]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3318      	adds	r3, #24
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f7fe fb0a 	bl	800900a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	68b8      	ldr	r0, [r7, #8]
 800aa06:	f000 fb4f 	bl	800b0a8 <prvAddCurrentTaskToDelayedList>
	}
 800aa0a:	bf00      	nop
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20004a04 	.word	0x20004a04

0800aa18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	60fb      	str	r3, [r7, #12]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3318      	adds	r3, #24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fb3b 	bl	80090c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <xTaskRemoveFromEventList+0xb0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d11d      	bne.n	800aa92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fb32 	bl	80090c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	4b19      	ldr	r3, [pc, #100]	; (800aacc <xTaskRemoveFromEventList+0xb4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d903      	bls.n	800aa74 <xTaskRemoveFromEventList+0x5c>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	4a16      	ldr	r2, [pc, #88]	; (800aacc <xTaskRemoveFromEventList+0xb4>)
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4a13      	ldr	r2, [pc, #76]	; (800aad0 <xTaskRemoveFromEventList+0xb8>)
 800aa82:	441a      	add	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7fe fabd 	bl	800900a <vListInsertEnd>
 800aa90:	e005      	b.n	800aa9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3318      	adds	r3, #24
 800aa96:	4619      	mov	r1, r3
 800aa98:	480e      	ldr	r0, [pc, #56]	; (800aad4 <xTaskRemoveFromEventList+0xbc>)
 800aa9a:	f7fe fab6 	bl	800900a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <xTaskRemoveFromEventList+0xc0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d905      	bls.n	800aab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <xTaskRemoveFromEventList+0xc4>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	e001      	b.n	800aabc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aabc:	697b      	ldr	r3, [r7, #20]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20004f00 	.word	0x20004f00
 800aacc:	20004ee0 	.word	0x20004ee0
 800aad0:	20004a08 	.word	0x20004a08
 800aad4:	20004e98 	.word	0x20004e98
 800aad8:	20004a04 	.word	0x20004a04
 800aadc:	20004eec 	.word	0x20004eec

0800aae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <vTaskInternalSetTimeOutState+0x24>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aaf0:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <vTaskInternalSetTimeOutState+0x28>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	605a      	str	r2, [r3, #4]
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	20004ef0 	.word	0x20004ef0
 800ab08:	20004edc 	.word	0x20004edc

0800ab0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	613b      	str	r3, [r7, #16]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab4e:	f000 ff79 	bl	800ba44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab52:	4b1d      	ldr	r3, [pc, #116]	; (800abc8 <xTaskCheckForTimeOut+0xbc>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6a:	d102      	bne.n	800ab72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	e023      	b.n	800abba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4b15      	ldr	r3, [pc, #84]	; (800abcc <xTaskCheckForTimeOut+0xc0>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d007      	beq.n	800ab8e <xTaskCheckForTimeOut+0x82>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e015      	b.n	800abba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d20b      	bcs.n	800abb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ff9b 	bl	800aae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e004      	b.n	800abba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abba:	f000 ff73 	bl	800baa4 <vPortExitCritical>

	return xReturn;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20004edc 	.word	0x20004edc
 800abcc:	20004ef0 	.word	0x20004ef0

0800abd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <vTaskMissedYield+0x14>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	20004eec 	.word	0x20004eec

0800abe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abf0:	f000 f852 	bl	800ac98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abf4:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <prvIdleTask+0x28>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d9f9      	bls.n	800abf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <prvIdleTask+0x2c>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac0c:	e7f0      	b.n	800abf0 <prvIdleTask+0x8>
 800ac0e:	bf00      	nop
 800ac10:	20004a08 	.word	0x20004a08
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e00c      	b.n	800ac3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4a12      	ldr	r2, [pc, #72]	; (800ac78 <prvInitialiseTaskLists+0x60>)
 800ac30:	4413      	add	r3, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe f9bc 	bl	8008fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b37      	cmp	r3, #55	; 0x37
 800ac42:	d9ef      	bls.n	800ac24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac44:	480d      	ldr	r0, [pc, #52]	; (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac46:	f7fe f9b3 	bl	8008fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac4a:	480d      	ldr	r0, [pc, #52]	; (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac4c:	f7fe f9b0 	bl	8008fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac50:	480c      	ldr	r0, [pc, #48]	; (800ac84 <prvInitialiseTaskLists+0x6c>)
 800ac52:	f7fe f9ad 	bl	8008fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac56:	480c      	ldr	r0, [pc, #48]	; (800ac88 <prvInitialiseTaskLists+0x70>)
 800ac58:	f7fe f9aa 	bl	8008fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac5c:	480b      	ldr	r0, [pc, #44]	; (800ac8c <prvInitialiseTaskLists+0x74>)
 800ac5e:	f7fe f9a7 	bl	8008fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac62:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <prvInitialiseTaskLists+0x78>)
 800ac64:	4a05      	ldr	r2, [pc, #20]	; (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <prvInitialiseTaskLists+0x7c>)
 800ac6a:	4a05      	ldr	r2, [pc, #20]	; (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac6c:	601a      	str	r2, [r3, #0]
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20004a08 	.word	0x20004a08
 800ac7c:	20004e68 	.word	0x20004e68
 800ac80:	20004e7c 	.word	0x20004e7c
 800ac84:	20004e98 	.word	0x20004e98
 800ac88:	20004eac 	.word	0x20004eac
 800ac8c:	20004ec4 	.word	0x20004ec4
 800ac90:	20004e90 	.word	0x20004e90
 800ac94:	20004e94 	.word	0x20004e94

0800ac98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac9e:	e019      	b.n	800acd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aca0:	f000 fed0 	bl	800ba44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca4:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <prvCheckTasksWaitingTermination+0x50>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fa07 	bl	80090c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acb6:	4b0d      	ldr	r3, [pc, #52]	; (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3b01      	subs	r3, #1
 800acbc:	4a0b      	ldr	r2, [pc, #44]	; (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acca:	f000 feeb 	bl	800baa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f810 	bl	800acf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e1      	bne.n	800aca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20004eac 	.word	0x20004eac
 800acec:	20004ed8 	.word	0x20004ed8
 800acf0:	20004ec0 	.word	0x20004ec0

0800acf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d108      	bne.n	800ad18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 f888 	bl	800be20 <vPortFree>
				vPortFree( pxTCB );
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 f885 	bl	800be20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad16:	e018      	b.n	800ad4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d103      	bne.n	800ad2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 f87c 	bl	800be20 <vPortFree>
	}
 800ad28:	e00f      	b.n	800ad4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d00a      	beq.n	800ad4a <prvDeleteTCB+0x56>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	60fb      	str	r3, [r7, #12]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <prvDeleteTCB+0x54>
	}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad5a:	4b0c      	ldr	r3, [pc, #48]	; (800ad8c <prvResetNextTaskUnblockTime+0x38>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad64:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <prvResetNextTaskUnblockTime+0x3c>)
 800ad66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad6c:	e008      	b.n	800ad80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6e:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <prvResetNextTaskUnblockTime+0x38>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <prvResetNextTaskUnblockTime+0x3c>)
 800ad7e:	6013      	str	r3, [r2, #0]
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20004e90 	.word	0x20004e90
 800ad90:	20004ef8 	.word	0x20004ef8

0800ad94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad9a:	4b0b      	ldr	r3, [pc, #44]	; (800adc8 <xTaskGetSchedulerState+0x34>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ada2:	2301      	movs	r3, #1
 800ada4:	607b      	str	r3, [r7, #4]
 800ada6:	e008      	b.n	800adba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada8:	4b08      	ldr	r3, [pc, #32]	; (800adcc <xTaskGetSchedulerState+0x38>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adb0:	2302      	movs	r3, #2
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	e001      	b.n	800adba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adb6:	2300      	movs	r3, #0
 800adb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adba:	687b      	ldr	r3, [r7, #4]
	}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	20004ee4 	.word	0x20004ee4
 800adcc:	20004f00 	.word	0x20004f00

0800add0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800addc:	2300      	movs	r3, #0
 800adde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d051      	beq.n	800ae8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adea:	4b2a      	ldr	r3, [pc, #168]	; (800ae94 <xTaskPriorityInherit+0xc4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d241      	bcs.n	800ae78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db06      	blt.n	800ae0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adfc:	4b25      	ldr	r3, [pc, #148]	; (800ae94 <xTaskPriorityInherit+0xc4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	6959      	ldr	r1, [r3, #20]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4a1f      	ldr	r2, [pc, #124]	; (800ae98 <xTaskPriorityInherit+0xc8>)
 800ae1c:	4413      	add	r3, r2
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d122      	bne.n	800ae68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe f94c 	bl	80090c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae2c:	4b19      	ldr	r3, [pc, #100]	; (800ae94 <xTaskPriorityInherit+0xc4>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <xTaskPriorityInherit+0xcc>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d903      	bls.n	800ae4a <xTaskPriorityInherit+0x7a>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a15      	ldr	r2, [pc, #84]	; (800ae9c <xTaskPriorityInherit+0xcc>)
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4a10      	ldr	r2, [pc, #64]	; (800ae98 <xTaskPriorityInherit+0xc8>)
 800ae58:	441a      	add	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fe f8d2 	bl	800900a <vListInsertEnd>
 800ae66:	e004      	b.n	800ae72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <xTaskPriorityInherit+0xc4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae72:	2301      	movs	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	e008      	b.n	800ae8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <xTaskPriorityInherit+0xc4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d201      	bcs.n	800ae8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae86:	2301      	movs	r3, #1
 800ae88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20004a04 	.word	0x20004a04
 800ae98:	20004a08 	.word	0x20004a08
 800ae9c:	20004ee0 	.word	0x20004ee0

0800aea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d056      	beq.n	800af64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aeb6:	4b2e      	ldr	r3, [pc, #184]	; (800af70 <xTaskPriorityDisinherit+0xd0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d00a      	beq.n	800aed6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	60fb      	str	r3, [r7, #12]
}
 800aed2:	bf00      	nop
 800aed4:	e7fe      	b.n	800aed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	60bb      	str	r3, [r7, #8]
}
 800aef0:	bf00      	nop
 800aef2:	e7fe      	b.n	800aef2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af06:	429a      	cmp	r2, r3
 800af08:	d02c      	beq.n	800af64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d128      	bne.n	800af64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	3304      	adds	r3, #4
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe f8d4 	bl	80090c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <xTaskPriorityDisinherit+0xd4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d903      	bls.n	800af44 <xTaskPriorityDisinherit+0xa4>
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	4a0c      	ldr	r2, [pc, #48]	; (800af74 <xTaskPriorityDisinherit+0xd4>)
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4a09      	ldr	r2, [pc, #36]	; (800af78 <xTaskPriorityDisinherit+0xd8>)
 800af52:	441a      	add	r2, r3
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	3304      	adds	r3, #4
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f7fe f855 	bl	800900a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af64:	697b      	ldr	r3, [r7, #20]
	}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20004a04 	.word	0x20004a04
 800af74:	20004ee0 	.word	0x20004ee0
 800af78:	20004a08 	.word	0x20004a08

0800af7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af8a:	2301      	movs	r3, #1
 800af8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d06a      	beq.n	800b06a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	60fb      	str	r3, [r7, #12]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d902      	bls.n	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	61fb      	str	r3, [r7, #28]
 800afc0:	e002      	b.n	800afc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	69fa      	ldr	r2, [r7, #28]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d04b      	beq.n	800b06a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d146      	bne.n	800b06a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800afdc:	4b25      	ldr	r3, [pc, #148]	; (800b074 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d10a      	bne.n	800affc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	60bb      	str	r3, [r7, #8]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	db04      	blt.n	800b01a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	6959      	ldr	r1, [r3, #20]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4a13      	ldr	r2, [pc, #76]	; (800b078 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b02a:	4413      	add	r3, r2
 800b02c:	4299      	cmp	r1, r3
 800b02e:	d11c      	bne.n	800b06a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe f845 	bl	80090c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d903      	bls.n	800b04e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	4a0c      	ldr	r2, [pc, #48]	; (800b07c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b04c:	6013      	str	r3, [r2, #0]
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	4613      	mov	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4a07      	ldr	r2, [pc, #28]	; (800b078 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b05c:	441a      	add	r2, r3
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	3304      	adds	r3, #4
 800b062:	4619      	mov	r1, r3
 800b064:	4610      	mov	r0, r2
 800b066:	f7fd ffd0 	bl	800900a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b06a:	bf00      	nop
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20004a04 	.word	0x20004a04
 800b078:	20004a08 	.word	0x20004a08
 800b07c:	20004ee0 	.word	0x20004ee0

0800b080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b092:	3201      	adds	r2, #1
 800b094:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b096:	4b03      	ldr	r3, [pc, #12]	; (800b0a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b098:	681b      	ldr	r3, [r3, #0]
	}
 800b09a:	4618      	mov	r0, r3
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	20004a04 	.word	0x20004a04

0800b0a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b0b2:	4b21      	ldr	r3, [pc, #132]	; (800b138 <prvAddCurrentTaskToDelayedList+0x90>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0b8:	4b20      	ldr	r3, [pc, #128]	; (800b13c <prvAddCurrentTaskToDelayedList+0x94>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f800 	bl	80090c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ca:	d10a      	bne.n	800b0e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d007      	beq.n	800b0e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0d2:	4b1a      	ldr	r3, [pc, #104]	; (800b13c <prvAddCurrentTaskToDelayedList+0x94>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4819      	ldr	r0, [pc, #100]	; (800b140 <prvAddCurrentTaskToDelayedList+0x98>)
 800b0dc:	f7fd ff95 	bl	800900a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0e0:	e026      	b.n	800b130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0ea:	4b14      	ldr	r3, [pc, #80]	; (800b13c <prvAddCurrentTaskToDelayedList+0x94>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d209      	bcs.n	800b10e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0fa:	4b12      	ldr	r3, [pc, #72]	; (800b144 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <prvAddCurrentTaskToDelayedList+0x94>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3304      	adds	r3, #4
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f7fd ffa3 	bl	8009052 <vListInsert>
}
 800b10c:	e010      	b.n	800b130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b10e:	4b0e      	ldr	r3, [pc, #56]	; (800b148 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <prvAddCurrentTaskToDelayedList+0x94>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3304      	adds	r3, #4
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f7fd ff99 	bl	8009052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	429a      	cmp	r2, r3
 800b128:	d202      	bcs.n	800b130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b12a:	4a08      	ldr	r2, [pc, #32]	; (800b14c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	6013      	str	r3, [r2, #0]
}
 800b130:	bf00      	nop
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20004edc 	.word	0x20004edc
 800b13c:	20004a04 	.word	0x20004a04
 800b140:	20004ec4 	.word	0x20004ec4
 800b144:	20004e94 	.word	0x20004e94
 800b148:	20004e90 	.word	0x20004e90
 800b14c:	20004ef8 	.word	0x20004ef8

0800b150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b15a:	f000 fb07 	bl	800b76c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b15e:	4b1c      	ldr	r3, [pc, #112]	; (800b1d0 <xTimerCreateTimerTask+0x80>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d021      	beq.n	800b1aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b16e:	1d3a      	adds	r2, r7, #4
 800b170:	f107 0108 	add.w	r1, r7, #8
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fd feff 	bl	8008f7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	9202      	str	r2, [sp, #8]
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	2302      	movs	r3, #2
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	2300      	movs	r3, #0
 800b18e:	460a      	mov	r2, r1
 800b190:	4910      	ldr	r1, [pc, #64]	; (800b1d4 <xTimerCreateTimerTask+0x84>)
 800b192:	4811      	ldr	r0, [pc, #68]	; (800b1d8 <xTimerCreateTimerTask+0x88>)
 800b194:	f7fe ffce 	bl	800a134 <xTaskCreateStatic>
 800b198:	4603      	mov	r3, r0
 800b19a:	4a10      	ldr	r2, [pc, #64]	; (800b1dc <xTimerCreateTimerTask+0x8c>)
 800b19c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <xTimerCreateTimerTask+0x8c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	613b      	str	r3, [r7, #16]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b1c6:	697b      	ldr	r3, [r7, #20]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20004f34 	.word	0x20004f34
 800b1d4:	0800ca90 	.word	0x0800ca90
 800b1d8:	0800b315 	.word	0x0800b315
 800b1dc:	20004f38 	.word	0x20004f38

0800b1e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08a      	sub	sp, #40	; 0x28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	623b      	str	r3, [r7, #32]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b20e:	4b1a      	ldr	r3, [pc, #104]	; (800b278 <xTimerGenericCommand+0x98>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d02a      	beq.n	800b26c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b05      	cmp	r3, #5
 800b226:	dc18      	bgt.n	800b25a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b228:	f7ff fdb4 	bl	800ad94 <xTaskGetSchedulerState>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d109      	bne.n	800b246 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b232:	4b11      	ldr	r3, [pc, #68]	; (800b278 <xTimerGenericCommand+0x98>)
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	f107 0110 	add.w	r1, r7, #16
 800b23a:	2300      	movs	r3, #0
 800b23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23e:	f7fe f913 	bl	8009468 <xQueueGenericSend>
 800b242:	6278      	str	r0, [r7, #36]	; 0x24
 800b244:	e012      	b.n	800b26c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <xTimerGenericCommand+0x98>)
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f107 0110 	add.w	r1, r7, #16
 800b24e:	2300      	movs	r3, #0
 800b250:	2200      	movs	r2, #0
 800b252:	f7fe f909 	bl	8009468 <xQueueGenericSend>
 800b256:	6278      	str	r0, [r7, #36]	; 0x24
 800b258:	e008      	b.n	800b26c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b25a:	4b07      	ldr	r3, [pc, #28]	; (800b278 <xTimerGenericCommand+0x98>)
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f107 0110 	add.w	r1, r7, #16
 800b262:	2300      	movs	r3, #0
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	f7fe f9fd 	bl	8009664 <xQueueGenericSendFromISR>
 800b26a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3728      	adds	r7, #40	; 0x28
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20004f34 	.word	0x20004f34

0800b27c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af02      	add	r7, sp, #8
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	4b22      	ldr	r3, [pc, #136]	; (800b310 <prvProcessExpiredTimer+0x94>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	3304      	adds	r3, #4
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd ff15 	bl	80090c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d022      	beq.n	800b2ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	699a      	ldr	r2, [r3, #24]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	18d1      	adds	r1, r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	6978      	ldr	r0, [r7, #20]
 800b2b6:	f000 f8d1 	bl	800b45c <prvInsertTimerInActiveList>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01f      	beq.n	800b300 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	6978      	ldr	r0, [r7, #20]
 800b2cc:	f7ff ff88 	bl	800b1e0 <xTimerGenericCommand>
 800b2d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d113      	bne.n	800b300 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60fb      	str	r3, [r7, #12]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f4:	f023 0301 	bic.w	r3, r3, #1
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	4798      	blx	r3
}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	20004f2c 	.word	0x20004f2c

0800b314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f857 	bl	800b3d4 <prvGetNextExpireTime>
 800b326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4619      	mov	r1, r3
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f803 	bl	800b338 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b332:	f000 f8d5 	bl	800b4e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b336:	e7f1      	b.n	800b31c <prvTimerTask+0x8>

0800b338 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b342:	f7ff f933 	bl	800a5ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b346:	f107 0308 	add.w	r3, r7, #8
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f866 	bl	800b41c <prvSampleTimeNow>
 800b350:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d130      	bne.n	800b3ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <prvProcessTimerOrBlockTask+0x3c>
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	429a      	cmp	r2, r3
 800b364:	d806      	bhi.n	800b374 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b366:	f7ff f92f 	bl	800a5c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b36a:	68f9      	ldr	r1, [r7, #12]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ff85 	bl	800b27c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b372:	e024      	b.n	800b3be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d008      	beq.n	800b38c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b37a:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <prvProcessTimerOrBlockTask+0x90>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <prvProcessTimerOrBlockTask+0x50>
 800b384:	2301      	movs	r3, #1
 800b386:	e000      	b.n	800b38a <prvProcessTimerOrBlockTask+0x52>
 800b388:	2300      	movs	r3, #0
 800b38a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b38c:	4b0f      	ldr	r3, [pc, #60]	; (800b3cc <prvProcessTimerOrBlockTask+0x94>)
 800b38e:	6818      	ldr	r0, [r3, #0]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	4619      	mov	r1, r3
 800b39a:	f7fe fe97 	bl	800a0cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b39e:	f7ff f913 	bl	800a5c8 <xTaskResumeAll>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b3a8:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <prvProcessTimerOrBlockTask+0x98>)
 800b3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	f3bf 8f6f 	isb	sy
}
 800b3b8:	e001      	b.n	800b3be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b3ba:	f7ff f905 	bl	800a5c8 <xTaskResumeAll>
}
 800b3be:	bf00      	nop
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20004f30 	.word	0x20004f30
 800b3cc:	20004f34 	.word	0x20004f34
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3dc:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <prvGetNextExpireTime+0x44>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <prvGetNextExpireTime+0x16>
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	e000      	b.n	800b3ec <prvGetNextExpireTime+0x18>
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3f8:	4b07      	ldr	r3, [pc, #28]	; (800b418 <prvGetNextExpireTime+0x44>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	e001      	b.n	800b408 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b408:	68fb      	ldr	r3, [r7, #12]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20004f2c 	.word	0x20004f2c

0800b41c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b424:	f7ff f96e 	bl	800a704 <xTaskGetTickCount>
 800b428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b42a:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <prvSampleTimeNow+0x3c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	429a      	cmp	r2, r3
 800b432:	d205      	bcs.n	800b440 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b434:	f000 f936 	bl	800b6a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	e002      	b.n	800b446 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b446:	4a04      	ldr	r2, [pc, #16]	; (800b458 <prvSampleTimeNow+0x3c>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b44c:	68fb      	ldr	r3, [r7, #12]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20004f3c 	.word	0x20004f3c

0800b45c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d812      	bhi.n	800b4a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	1ad2      	subs	r2, r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d302      	bcc.n	800b496 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b490:	2301      	movs	r3, #1
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	e01b      	b.n	800b4ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b496:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <prvInsertTimerInActiveList+0x7c>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3304      	adds	r3, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f7fd fdd6 	bl	8009052 <vListInsert>
 800b4a6:	e012      	b.n	800b4ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d206      	bcs.n	800b4be <prvInsertTimerInActiveList+0x62>
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d302      	bcc.n	800b4be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	e007      	b.n	800b4ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4be:	4b07      	ldr	r3, [pc, #28]	; (800b4dc <prvInsertTimerInActiveList+0x80>)
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	f7fd fdc2 	bl	8009052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4ce:	697b      	ldr	r3, [r7, #20]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3718      	adds	r7, #24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	20004f30 	.word	0x20004f30
 800b4dc:	20004f2c 	.word	0x20004f2c

0800b4e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08e      	sub	sp, #56	; 0x38
 800b4e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4e6:	e0ca      	b.n	800b67e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da18      	bge.n	800b520 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4ee:	1d3b      	adds	r3, r7, #4
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10a      	bne.n	800b510 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	61fb      	str	r3, [r7, #28]
}
 800b50c:	bf00      	nop
 800b50e:	e7fe      	b.n	800b50e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b516:	6850      	ldr	r0, [r2, #4]
 800b518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51a:	6892      	ldr	r2, [r2, #8]
 800b51c:	4611      	mov	r1, r2
 800b51e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f2c0 80aa 	blt.w	800b67c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d004      	beq.n	800b53e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	3304      	adds	r3, #4
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd fdc3 	bl	80090c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b53e:	463b      	mov	r3, r7
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff ff6b 	bl	800b41c <prvSampleTimeNow>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b09      	cmp	r3, #9
 800b54c:	f200 8097 	bhi.w	800b67e <prvProcessReceivedCommands+0x19e>
 800b550:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <prvProcessReceivedCommands+0x78>)
 800b552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b556:	bf00      	nop
 800b558:	0800b581 	.word	0x0800b581
 800b55c:	0800b581 	.word	0x0800b581
 800b560:	0800b581 	.word	0x0800b581
 800b564:	0800b5f5 	.word	0x0800b5f5
 800b568:	0800b609 	.word	0x0800b609
 800b56c:	0800b653 	.word	0x0800b653
 800b570:	0800b581 	.word	0x0800b581
 800b574:	0800b581 	.word	0x0800b581
 800b578:	0800b5f5 	.word	0x0800b5f5
 800b57c:	0800b609 	.word	0x0800b609
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b586:	f043 0301 	orr.w	r3, r3, #1
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	18d1      	adds	r1, r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5a0:	f7ff ff5c 	bl	800b45c <prvInsertTimerInActiveList>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d069      	beq.n	800b67e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d05e      	beq.n	800b67e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	441a      	add	r2, r3
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5d2:	f7ff fe05 	bl	800b1e0 <xTimerGenericCommand>
 800b5d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d14f      	bne.n	800b67e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	61bb      	str	r3, [r7, #24]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5fa:	f023 0301 	bic.w	r3, r3, #1
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b606:	e03a      	b.n	800b67e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	617b      	str	r3, [r7, #20]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	699a      	ldr	r2, [r3, #24]
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	18d1      	adds	r1, r2, r3
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b64c:	f7ff ff06 	bl	800b45c <prvInsertTimerInActiveList>
					break;
 800b650:	e015      	b.n	800b67e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b662:	f000 fbdd 	bl	800be20 <vPortFree>
 800b666:	e00a      	b.n	800b67e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b66e:	f023 0301 	bic.w	r3, r3, #1
 800b672:	b2da      	uxtb	r2, r3
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b67a:	e000      	b.n	800b67e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b67c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b67e:	4b08      	ldr	r3, [pc, #32]	; (800b6a0 <prvProcessReceivedCommands+0x1c0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	1d39      	adds	r1, r7, #4
 800b684:	2200      	movs	r2, #0
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe f914 	bl	80098b4 <xQueueReceive>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f47f af2a 	bne.w	800b4e8 <prvProcessReceivedCommands+0x8>
	}
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop
 800b698:	3730      	adds	r7, #48	; 0x30
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20004f34 	.word	0x20004f34

0800b6a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6aa:	e048      	b.n	800b73e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6b6:	4b2b      	ldr	r3, [pc, #172]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fd fcfd 	bl	80090c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d8:	f003 0304 	and.w	r3, r3, #4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d02e      	beq.n	800b73e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d90e      	bls.n	800b710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6fe:	4b19      	ldr	r3, [pc, #100]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7fd fca2 	bl	8009052 <vListInsert>
 800b70e:	e016      	b.n	800b73e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b710:	2300      	movs	r3, #0
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	2300      	movs	r3, #0
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	2100      	movs	r1, #0
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7ff fd60 	bl	800b1e0 <xTimerGenericCommand>
 800b720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	603b      	str	r3, [r7, #0]
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1b1      	bne.n	800b6ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <prvSwitchTimerLists+0xc4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a04      	ldr	r2, [pc, #16]	; (800b764 <prvSwitchTimerLists+0xc0>)
 800b754:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b756:	4a04      	ldr	r2, [pc, #16]	; (800b768 <prvSwitchTimerLists+0xc4>)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	6013      	str	r3, [r2, #0]
}
 800b75c:	bf00      	nop
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	20004f2c 	.word	0x20004f2c
 800b768:	20004f30 	.word	0x20004f30

0800b76c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b772:	f000 f967 	bl	800ba44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b776:	4b15      	ldr	r3, [pc, #84]	; (800b7cc <prvCheckForValidListAndQueue+0x60>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d120      	bne.n	800b7c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b77e:	4814      	ldr	r0, [pc, #80]	; (800b7d0 <prvCheckForValidListAndQueue+0x64>)
 800b780:	f7fd fc16 	bl	8008fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b784:	4813      	ldr	r0, [pc, #76]	; (800b7d4 <prvCheckForValidListAndQueue+0x68>)
 800b786:	f7fd fc13 	bl	8008fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b78a:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <prvCheckForValidListAndQueue+0x6c>)
 800b78c:	4a10      	ldr	r2, [pc, #64]	; (800b7d0 <prvCheckForValidListAndQueue+0x64>)
 800b78e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b790:	4b12      	ldr	r3, [pc, #72]	; (800b7dc <prvCheckForValidListAndQueue+0x70>)
 800b792:	4a10      	ldr	r2, [pc, #64]	; (800b7d4 <prvCheckForValidListAndQueue+0x68>)
 800b794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b796:	2300      	movs	r3, #0
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <prvCheckForValidListAndQueue+0x74>)
 800b79c:	4a11      	ldr	r2, [pc, #68]	; (800b7e4 <prvCheckForValidListAndQueue+0x78>)
 800b79e:	2110      	movs	r1, #16
 800b7a0:	200a      	movs	r0, #10
 800b7a2:	f7fd fd21 	bl	80091e8 <xQueueGenericCreateStatic>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <prvCheckForValidListAndQueue+0x60>)
 800b7aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7ac:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <prvCheckForValidListAndQueue+0x60>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <prvCheckForValidListAndQueue+0x60>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	490b      	ldr	r1, [pc, #44]	; (800b7e8 <prvCheckForValidListAndQueue+0x7c>)
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fc32 	bl	800a024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7c0:	f000 f970 	bl	800baa4 <vPortExitCritical>
}
 800b7c4:	bf00      	nop
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20004f34 	.word	0x20004f34
 800b7d0:	20004f04 	.word	0x20004f04
 800b7d4:	20004f18 	.word	0x20004f18
 800b7d8:	20004f2c 	.word	0x20004f2c
 800b7dc:	20004f30 	.word	0x20004f30
 800b7e0:	20004fe0 	.word	0x20004fe0
 800b7e4:	20004f40 	.word	0x20004f40
 800b7e8:	0800ca98 	.word	0x0800ca98

0800b7ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	3b04      	subs	r3, #4
 800b7fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3b04      	subs	r3, #4
 800b80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f023 0201 	bic.w	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3b04      	subs	r3, #4
 800b81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b81c:	4a0c      	ldr	r2, [pc, #48]	; (800b850 <pxPortInitialiseStack+0x64>)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3b14      	subs	r3, #20
 800b826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3b04      	subs	r3, #4
 800b832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f06f 0202 	mvn.w	r2, #2
 800b83a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3b20      	subs	r3, #32
 800b840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b842:	68fb      	ldr	r3, [r7, #12]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	0800b855 	.word	0x0800b855

0800b854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <prvTaskExitError+0x54>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b866:	d00a      	beq.n	800b87e <prvTaskExitError+0x2a>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60fb      	str	r3, [r7, #12]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <prvTaskExitError+0x28>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	60bb      	str	r3, [r7, #8]
}
 800b890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b892:	bf00      	nop
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0fc      	beq.n	800b894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b89a:	bf00      	nop
 800b89c:	bf00      	nop
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	20000024 	.word	0x20000024
 800b8ac:	00000000 	.word	0x00000000

0800b8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <pxCurrentTCBConst2>)
 800b8b2:	6819      	ldr	r1, [r3, #0]
 800b8b4:	6808      	ldr	r0, [r1, #0]
 800b8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f380 8809 	msr	PSP, r0
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8811 	msr	BASEPRI, r0
 800b8ca:	4770      	bx	lr
 800b8cc:	f3af 8000 	nop.w

0800b8d0 <pxCurrentTCBConst2>:
 800b8d0:	20004a04 	.word	0x20004a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop

0800b8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8d8:	4808      	ldr	r0, [pc, #32]	; (800b8fc <prvPortStartFirstTask+0x24>)
 800b8da:	6800      	ldr	r0, [r0, #0]
 800b8dc:	6800      	ldr	r0, [r0, #0]
 800b8de:	f380 8808 	msr	MSP, r0
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f380 8814 	msr	CONTROL, r0
 800b8ea:	b662      	cpsie	i
 800b8ec:	b661      	cpsie	f
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	df00      	svc	0
 800b8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8fa:	bf00      	nop
 800b8fc:	e000ed08 	.word	0xe000ed08

0800b900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b906:	4b46      	ldr	r3, [pc, #280]	; (800ba20 <xPortStartScheduler+0x120>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a46      	ldr	r2, [pc, #280]	; (800ba24 <xPortStartScheduler+0x124>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d10a      	bne.n	800b926 <xPortStartScheduler+0x26>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	613b      	str	r3, [r7, #16]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b926:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <xPortStartScheduler+0x120>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a3f      	ldr	r2, [pc, #252]	; (800ba28 <xPortStartScheduler+0x128>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d10a      	bne.n	800b946 <xPortStartScheduler+0x46>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	60fb      	str	r3, [r7, #12]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b946:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <xPortStartScheduler+0x12c>)
 800b948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	22ff      	movs	r2, #255	; 0xff
 800b956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	4b31      	ldr	r3, [pc, #196]	; (800ba30 <xPortStartScheduler+0x130>)
 800b96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b96e:	4b31      	ldr	r3, [pc, #196]	; (800ba34 <xPortStartScheduler+0x134>)
 800b970:	2207      	movs	r2, #7
 800b972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b974:	e009      	b.n	800b98a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b976:	4b2f      	ldr	r3, [pc, #188]	; (800ba34 <xPortStartScheduler+0x134>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	4a2d      	ldr	r2, [pc, #180]	; (800ba34 <xPortStartScheduler+0x134>)
 800b97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	b2db      	uxtb	r3, r3
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b992:	2b80      	cmp	r3, #128	; 0x80
 800b994:	d0ef      	beq.n	800b976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b996:	4b27      	ldr	r3, [pc, #156]	; (800ba34 <xPortStartScheduler+0x134>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f1c3 0307 	rsb	r3, r3, #7
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d00a      	beq.n	800b9b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	60bb      	str	r3, [r7, #8]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9b8:	4b1e      	ldr	r3, [pc, #120]	; (800ba34 <xPortStartScheduler+0x134>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	021b      	lsls	r3, r3, #8
 800b9be:	4a1d      	ldr	r2, [pc, #116]	; (800ba34 <xPortStartScheduler+0x134>)
 800b9c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ba34 <xPortStartScheduler+0x134>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9ca:	4a1a      	ldr	r2, [pc, #104]	; (800ba34 <xPortStartScheduler+0x134>)
 800b9cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9d6:	4b18      	ldr	r3, [pc, #96]	; (800ba38 <xPortStartScheduler+0x138>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a17      	ldr	r2, [pc, #92]	; (800ba38 <xPortStartScheduler+0x138>)
 800b9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <xPortStartScheduler+0x138>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a14      	ldr	r2, [pc, #80]	; (800ba38 <xPortStartScheduler+0x138>)
 800b9e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9ee:	f000 f8dd 	bl	800bbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9f2:	4b12      	ldr	r3, [pc, #72]	; (800ba3c <xPortStartScheduler+0x13c>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9f8:	f000 f8fc 	bl	800bbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9fc:	4b10      	ldr	r3, [pc, #64]	; (800ba40 <xPortStartScheduler+0x140>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a0f      	ldr	r2, [pc, #60]	; (800ba40 <xPortStartScheduler+0x140>)
 800ba02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba08:	f7ff ff66 	bl	800b8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba0c:	f7fe ff56 	bl	800a8bc <vTaskSwitchContext>
	prvTaskExitError();
 800ba10:	f7ff ff20 	bl	800b854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	e000ed00 	.word	0xe000ed00
 800ba24:	410fc271 	.word	0x410fc271
 800ba28:	410fc270 	.word	0x410fc270
 800ba2c:	e000e400 	.word	0xe000e400
 800ba30:	20005030 	.word	0x20005030
 800ba34:	20005034 	.word	0x20005034
 800ba38:	e000ed20 	.word	0xe000ed20
 800ba3c:	20000024 	.word	0x20000024
 800ba40:	e000ef34 	.word	0xe000ef34

0800ba44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	607b      	str	r3, [r7, #4]
}
 800ba5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba5e:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <vPortEnterCritical+0x58>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	4a0d      	ldr	r2, [pc, #52]	; (800ba9c <vPortEnterCritical+0x58>)
 800ba66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba68:	4b0c      	ldr	r3, [pc, #48]	; (800ba9c <vPortEnterCritical+0x58>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d10f      	bne.n	800ba90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba70:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <vPortEnterCritical+0x5c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	603b      	str	r3, [r7, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <vPortEnterCritical+0x4a>
	}
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	20000024 	.word	0x20000024
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baaa:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <vPortExitCritical+0x50>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10a      	bne.n	800bac8 <vPortExitCritical+0x24>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	607b      	str	r3, [r7, #4]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <vPortExitCritical+0x50>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3b01      	subs	r3, #1
 800bace:	4a09      	ldr	r2, [pc, #36]	; (800baf4 <vPortExitCritical+0x50>)
 800bad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bad2:	4b08      	ldr	r3, [pc, #32]	; (800baf4 <vPortExitCritical+0x50>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d105      	bne.n	800bae6 <vPortExitCritical+0x42>
 800bada:	2300      	movs	r3, #0
 800badc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	f383 8811 	msr	BASEPRI, r3
}
 800bae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20000024 	.word	0x20000024
	...

0800bb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb00:	f3ef 8009 	mrs	r0, PSP
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <pxCurrentTCBConst>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	f01e 0f10 	tst.w	lr, #16
 800bb10:	bf08      	it	eq
 800bb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1a:	6010      	str	r0, [r2, #0]
 800bb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb24:	f380 8811 	msr	BASEPRI, r0
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f7fe fec4 	bl	800a8bc <vTaskSwitchContext>
 800bb34:	f04f 0000 	mov.w	r0, #0
 800bb38:	f380 8811 	msr	BASEPRI, r0
 800bb3c:	bc09      	pop	{r0, r3}
 800bb3e:	6819      	ldr	r1, [r3, #0]
 800bb40:	6808      	ldr	r0, [r1, #0]
 800bb42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb46:	f01e 0f10 	tst.w	lr, #16
 800bb4a:	bf08      	it	eq
 800bb4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb50:	f380 8809 	msr	PSP, r0
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	f3af 8000 	nop.w

0800bb60 <pxCurrentTCBConst>:
 800bb60:	20004a04 	.word	0x20004a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop

0800bb68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb82:	f7fe fde1 	bl	800a748 <xTaskIncrementTick>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb8c:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <xPortSysTickHandler+0x40>)
 800bb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	f383 8811 	msr	BASEPRI, r3
}
 800bb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bbb0:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <vPortSetupTimerInterrupt+0x34>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <vPortSetupTimerInterrupt+0x38>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <vPortSetupTimerInterrupt+0x3c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <vPortSetupTimerInterrupt+0x40>)
 800bbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc6:	099b      	lsrs	r3, r3, #6
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <vPortSetupTimerInterrupt+0x44>)
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbce:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <vPortSetupTimerInterrupt+0x34>)
 800bbd0:	2207      	movs	r2, #7
 800bbd2:	601a      	str	r2, [r3, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	e000e010 	.word	0xe000e010
 800bbe4:	e000e018 	.word	0xe000e018
 800bbe8:	20000000 	.word	0x20000000
 800bbec:	10624dd3 	.word	0x10624dd3
 800bbf0:	e000e014 	.word	0xe000e014

0800bbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc04 <vPortEnableVFP+0x10>
 800bbf8:	6801      	ldr	r1, [r0, #0]
 800bbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bbfe:	6001      	str	r1, [r0, #0]
 800bc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc02:	bf00      	nop
 800bc04:	e000ed88 	.word	0xe000ed88

0800bc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc0e:	f3ef 8305 	mrs	r3, IPSR
 800bc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b0f      	cmp	r3, #15
 800bc18:	d914      	bls.n	800bc44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc1a:	4a17      	ldr	r2, [pc, #92]	; (800bc78 <vPortValidateInterruptPriority+0x70>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc24:	4b15      	ldr	r3, [pc, #84]	; (800bc7c <vPortValidateInterruptPriority+0x74>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	7afa      	ldrb	r2, [r7, #11]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d20a      	bcs.n	800bc44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	607b      	str	r3, [r7, #4]
}
 800bc40:	bf00      	nop
 800bc42:	e7fe      	b.n	800bc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc44:	4b0e      	ldr	r3, [pc, #56]	; (800bc80 <vPortValidateInterruptPriority+0x78>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <vPortValidateInterruptPriority+0x7c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d90a      	bls.n	800bc6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	603b      	str	r3, [r7, #0]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <vPortValidateInterruptPriority+0x60>
	}
 800bc6a:	bf00      	nop
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	e000e3f0 	.word	0xe000e3f0
 800bc7c:	20005030 	.word	0x20005030
 800bc80:	e000ed0c 	.word	0xe000ed0c
 800bc84:	20005034 	.word	0x20005034

0800bc88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc94:	f7fe fc8a 	bl	800a5ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc98:	4b5b      	ldr	r3, [pc, #364]	; (800be08 <pvPortMalloc+0x180>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bca0:	f000 f920 	bl	800bee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bca4:	4b59      	ldr	r3, [pc, #356]	; (800be0c <pvPortMalloc+0x184>)
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f040 8093 	bne.w	800bdd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01d      	beq.n	800bcf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bcb8:	2208      	movs	r2, #8
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d014      	beq.n	800bcf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f023 0307 	bic.w	r3, r3, #7
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <pvPortMalloc+0x6c>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	617b      	str	r3, [r7, #20]
}
 800bcf0:	bf00      	nop
 800bcf2:	e7fe      	b.n	800bcf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d06e      	beq.n	800bdd8 <pvPortMalloc+0x150>
 800bcfa:	4b45      	ldr	r3, [pc, #276]	; (800be10 <pvPortMalloc+0x188>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d869      	bhi.n	800bdd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd04:	4b43      	ldr	r3, [pc, #268]	; (800be14 <pvPortMalloc+0x18c>)
 800bd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd08:	4b42      	ldr	r3, [pc, #264]	; (800be14 <pvPortMalloc+0x18c>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd0e:	e004      	b.n	800bd1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d903      	bls.n	800bd2c <pvPortMalloc+0xa4>
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f1      	bne.n	800bd10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd2c:	4b36      	ldr	r3, [pc, #216]	; (800be08 <pvPortMalloc+0x180>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d050      	beq.n	800bdd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2208      	movs	r2, #8
 800bd3c:	4413      	add	r3, r2
 800bd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	1ad2      	subs	r2, r2, r3
 800bd50:	2308      	movs	r3, #8
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d91f      	bls.n	800bd98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <pvPortMalloc+0xf8>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	613b      	str	r3, [r7, #16]
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd92:	69b8      	ldr	r0, [r7, #24]
 800bd94:	f000 f908 	bl	800bfa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd98:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <pvPortMalloc+0x188>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	4a1b      	ldr	r2, [pc, #108]	; (800be10 <pvPortMalloc+0x188>)
 800bda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bda6:	4b1a      	ldr	r3, [pc, #104]	; (800be10 <pvPortMalloc+0x188>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <pvPortMalloc+0x190>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d203      	bcs.n	800bdba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bdb2:	4b17      	ldr	r3, [pc, #92]	; (800be10 <pvPortMalloc+0x188>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a18      	ldr	r2, [pc, #96]	; (800be18 <pvPortMalloc+0x190>)
 800bdb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	4b13      	ldr	r3, [pc, #76]	; (800be0c <pvPortMalloc+0x184>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <pvPortMalloc+0x194>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	4a11      	ldr	r2, [pc, #68]	; (800be1c <pvPortMalloc+0x194>)
 800bdd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bdd8:	f7fe fbf6 	bl	800a5c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <pvPortMalloc+0x174>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60fb      	str	r3, [r7, #12]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <pvPortMalloc+0x172>
	return pvReturn;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3728      	adds	r7, #40	; 0x28
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20008c40 	.word	0x20008c40
 800be0c:	20008c54 	.word	0x20008c54
 800be10:	20008c44 	.word	0x20008c44
 800be14:	20008c38 	.word	0x20008c38
 800be18:	20008c48 	.word	0x20008c48
 800be1c:	20008c4c 	.word	0x20008c4c

0800be20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d04d      	beq.n	800bece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be32:	2308      	movs	r3, #8
 800be34:	425b      	negs	r3, r3
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	4413      	add	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	4b24      	ldr	r3, [pc, #144]	; (800bed8 <vPortFree+0xb8>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <vPortFree+0x44>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	60fb      	str	r3, [r7, #12]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <vPortFree+0x62>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	60bb      	str	r3, [r7, #8]
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	4b14      	ldr	r3, [pc, #80]	; (800bed8 <vPortFree+0xb8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4013      	ands	r3, r2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01e      	beq.n	800bece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11a      	bne.n	800bece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <vPortFree+0xb8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	43db      	mvns	r3, r3
 800bea2:	401a      	ands	r2, r3
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bea8:	f7fe fb80 	bl	800a5ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <vPortFree+0xbc>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4413      	add	r3, r2
 800beb6:	4a09      	ldr	r2, [pc, #36]	; (800bedc <vPortFree+0xbc>)
 800beb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800beba:	6938      	ldr	r0, [r7, #16]
 800bebc:	f000 f874 	bl	800bfa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bec0:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <vPortFree+0xc0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3301      	adds	r3, #1
 800bec6:	4a06      	ldr	r2, [pc, #24]	; (800bee0 <vPortFree+0xc0>)
 800bec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800beca:	f7fe fb7d 	bl	800a5c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bece:	bf00      	nop
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20008c54 	.word	0x20008c54
 800bedc:	20008c44 	.word	0x20008c44
 800bee0:	20008c50 	.word	0x20008c50

0800bee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800beee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bef0:	4b27      	ldr	r3, [pc, #156]	; (800bf90 <prvHeapInit+0xac>)
 800bef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00c      	beq.n	800bf18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3307      	adds	r3, #7
 800bf02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 0307 	bic.w	r3, r3, #7
 800bf0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	4a1f      	ldr	r2, [pc, #124]	; (800bf90 <prvHeapInit+0xac>)
 800bf14:	4413      	add	r3, r2
 800bf16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf1c:	4a1d      	ldr	r2, [pc, #116]	; (800bf94 <prvHeapInit+0xb0>)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf22:	4b1c      	ldr	r3, [pc, #112]	; (800bf94 <prvHeapInit+0xb0>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf30:	2208      	movs	r2, #8
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 0307 	bic.w	r3, r3, #7
 800bf3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <prvHeapInit+0xb4>)
 800bf44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf46:	4b14      	ldr	r3, [pc, #80]	; (800bf98 <prvHeapInit+0xb4>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf4e:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <prvHeapInit+0xb4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf64:	4b0c      	ldr	r3, [pc, #48]	; (800bf98 <prvHeapInit+0xb4>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4a0a      	ldr	r2, [pc, #40]	; (800bf9c <prvHeapInit+0xb8>)
 800bf72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	4a09      	ldr	r2, [pc, #36]	; (800bfa0 <prvHeapInit+0xbc>)
 800bf7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf7c:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <prvHeapInit+0xc0>)
 800bf7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf82:	601a      	str	r2, [r3, #0]
}
 800bf84:	bf00      	nop
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	20005038 	.word	0x20005038
 800bf94:	20008c38 	.word	0x20008c38
 800bf98:	20008c40 	.word	0x20008c40
 800bf9c:	20008c48 	.word	0x20008c48
 800bfa0:	20008c44 	.word	0x20008c44
 800bfa4:	20008c54 	.word	0x20008c54

0800bfa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfb0:	4b28      	ldr	r3, [pc, #160]	; (800c054 <prvInsertBlockIntoFreeList+0xac>)
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e002      	b.n	800bfbc <prvInsertBlockIntoFreeList+0x14>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d8f7      	bhi.n	800bfb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d108      	bne.n	800bfea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	441a      	add	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	441a      	add	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d118      	bne.n	800c030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	4b15      	ldr	r3, [pc, #84]	; (800c058 <prvInsertBlockIntoFreeList+0xb0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	d00d      	beq.n	800c026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	441a      	add	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	e008      	b.n	800c038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <prvInsertBlockIntoFreeList+0xb0>)
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	e003      	b.n	800c038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d002      	beq.n	800c046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c046:	bf00      	nop
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20008c38 	.word	0x20008c38
 800c058:	20008c40 	.word	0x20008c40

0800c05c <__errno>:
 800c05c:	4b01      	ldr	r3, [pc, #4]	; (800c064 <__errno+0x8>)
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20000028 	.word	0x20000028

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	4d0d      	ldr	r5, [pc, #52]	; (800c0a0 <__libc_init_array+0x38>)
 800c06c:	4c0d      	ldr	r4, [pc, #52]	; (800c0a4 <__libc_init_array+0x3c>)
 800c06e:	1b64      	subs	r4, r4, r5
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	2600      	movs	r6, #0
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	4d0b      	ldr	r5, [pc, #44]	; (800c0a8 <__libc_init_array+0x40>)
 800c07a:	4c0c      	ldr	r4, [pc, #48]	; (800c0ac <__libc_init_array+0x44>)
 800c07c:	f000 fc62 	bl	800c944 <_init>
 800c080:	1b64      	subs	r4, r4, r5
 800c082:	10a4      	asrs	r4, r4, #2
 800c084:	2600      	movs	r6, #0
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800f488 	.word	0x0800f488
 800c0a4:	0800f488 	.word	0x0800f488
 800c0a8:	0800f488 	.word	0x0800f488
 800c0ac:	0800f48c 	.word	0x0800f48c

0800c0b0 <memcpy>:
 800c0b0:	440a      	add	r2, r1
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c0b8:	d100      	bne.n	800c0bc <memcpy+0xc>
 800c0ba:	4770      	bx	lr
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c6:	4291      	cmp	r1, r2
 800c0c8:	d1f9      	bne.n	800c0be <memcpy+0xe>
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <memset>:
 800c0cc:	4402      	add	r2, r0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d100      	bne.n	800c0d6 <memset+0xa>
 800c0d4:	4770      	bx	lr
 800c0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0da:	e7f9      	b.n	800c0d0 <memset+0x4>

0800c0dc <sniprintf>:
 800c0dc:	b40c      	push	{r2, r3}
 800c0de:	b530      	push	{r4, r5, lr}
 800c0e0:	4b17      	ldr	r3, [pc, #92]	; (800c140 <sniprintf+0x64>)
 800c0e2:	1e0c      	subs	r4, r1, #0
 800c0e4:	681d      	ldr	r5, [r3, #0]
 800c0e6:	b09d      	sub	sp, #116	; 0x74
 800c0e8:	da08      	bge.n	800c0fc <sniprintf+0x20>
 800c0ea:	238b      	movs	r3, #139	; 0x8b
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f2:	b01d      	add	sp, #116	; 0x74
 800c0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0f8:	b002      	add	sp, #8
 800c0fa:	4770      	bx	lr
 800c0fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c100:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c104:	bf14      	ite	ne
 800c106:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c10a:	4623      	moveq	r3, r4
 800c10c:	9304      	str	r3, [sp, #16]
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c114:	9002      	str	r0, [sp, #8]
 800c116:	9006      	str	r0, [sp, #24]
 800c118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c11c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c11e:	ab21      	add	r3, sp, #132	; 0x84
 800c120:	a902      	add	r1, sp, #8
 800c122:	4628      	mov	r0, r5
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	f000 f869 	bl	800c1fc <_svfiprintf_r>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	bfbc      	itt	lt
 800c12e:	238b      	movlt	r3, #139	; 0x8b
 800c130:	602b      	strlt	r3, [r5, #0]
 800c132:	2c00      	cmp	r4, #0
 800c134:	d0dd      	beq.n	800c0f2 <sniprintf+0x16>
 800c136:	9b02      	ldr	r3, [sp, #8]
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	e7d9      	b.n	800c0f2 <sniprintf+0x16>
 800c13e:	bf00      	nop
 800c140:	20000028 	.word	0x20000028

0800c144 <__ssputs_r>:
 800c144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c148:	688e      	ldr	r6, [r1, #8]
 800c14a:	429e      	cmp	r6, r3
 800c14c:	4682      	mov	sl, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	4690      	mov	r8, r2
 800c152:	461f      	mov	r7, r3
 800c154:	d838      	bhi.n	800c1c8 <__ssputs_r+0x84>
 800c156:	898a      	ldrh	r2, [r1, #12]
 800c158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c15c:	d032      	beq.n	800c1c4 <__ssputs_r+0x80>
 800c15e:	6825      	ldr	r5, [r4, #0]
 800c160:	6909      	ldr	r1, [r1, #16]
 800c162:	eba5 0901 	sub.w	r9, r5, r1
 800c166:	6965      	ldr	r5, [r4, #20]
 800c168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c170:	3301      	adds	r3, #1
 800c172:	444b      	add	r3, r9
 800c174:	106d      	asrs	r5, r5, #1
 800c176:	429d      	cmp	r5, r3
 800c178:	bf38      	it	cc
 800c17a:	461d      	movcc	r5, r3
 800c17c:	0553      	lsls	r3, r2, #21
 800c17e:	d531      	bpl.n	800c1e4 <__ssputs_r+0xa0>
 800c180:	4629      	mov	r1, r5
 800c182:	f000 fb39 	bl	800c7f8 <_malloc_r>
 800c186:	4606      	mov	r6, r0
 800c188:	b950      	cbnz	r0, 800c1a0 <__ssputs_r+0x5c>
 800c18a:	230c      	movs	r3, #12
 800c18c:	f8ca 3000 	str.w	r3, [sl]
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c196:	81a3      	strh	r3, [r4, #12]
 800c198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a0:	6921      	ldr	r1, [r4, #16]
 800c1a2:	464a      	mov	r2, r9
 800c1a4:	f7ff ff84 	bl	800c0b0 <memcpy>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	6126      	str	r6, [r4, #16]
 800c1b6:	6165      	str	r5, [r4, #20]
 800c1b8:	444e      	add	r6, r9
 800c1ba:	eba5 0509 	sub.w	r5, r5, r9
 800c1be:	6026      	str	r6, [r4, #0]
 800c1c0:	60a5      	str	r5, [r4, #8]
 800c1c2:	463e      	mov	r6, r7
 800c1c4:	42be      	cmp	r6, r7
 800c1c6:	d900      	bls.n	800c1ca <__ssputs_r+0x86>
 800c1c8:	463e      	mov	r6, r7
 800c1ca:	4632      	mov	r2, r6
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	4641      	mov	r1, r8
 800c1d0:	f000 faa8 	bl	800c724 <memmove>
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	1b9b      	subs	r3, r3, r6
 800c1da:	4432      	add	r2, r6
 800c1dc:	60a3      	str	r3, [r4, #8]
 800c1de:	6022      	str	r2, [r4, #0]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e7db      	b.n	800c19c <__ssputs_r+0x58>
 800c1e4:	462a      	mov	r2, r5
 800c1e6:	f000 fb61 	bl	800c8ac <_realloc_r>
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d1e1      	bne.n	800c1b4 <__ssputs_r+0x70>
 800c1f0:	6921      	ldr	r1, [r4, #16]
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	f000 fab0 	bl	800c758 <_free_r>
 800c1f8:	e7c7      	b.n	800c18a <__ssputs_r+0x46>
	...

0800c1fc <_svfiprintf_r>:
 800c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c200:	4698      	mov	r8, r3
 800c202:	898b      	ldrh	r3, [r1, #12]
 800c204:	061b      	lsls	r3, r3, #24
 800c206:	b09d      	sub	sp, #116	; 0x74
 800c208:	4607      	mov	r7, r0
 800c20a:	460d      	mov	r5, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	d50e      	bpl.n	800c22e <_svfiprintf_r+0x32>
 800c210:	690b      	ldr	r3, [r1, #16]
 800c212:	b963      	cbnz	r3, 800c22e <_svfiprintf_r+0x32>
 800c214:	2140      	movs	r1, #64	; 0x40
 800c216:	f000 faef 	bl	800c7f8 <_malloc_r>
 800c21a:	6028      	str	r0, [r5, #0]
 800c21c:	6128      	str	r0, [r5, #16]
 800c21e:	b920      	cbnz	r0, 800c22a <_svfiprintf_r+0x2e>
 800c220:	230c      	movs	r3, #12
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c228:	e0d1      	b.n	800c3ce <_svfiprintf_r+0x1d2>
 800c22a:	2340      	movs	r3, #64	; 0x40
 800c22c:	616b      	str	r3, [r5, #20]
 800c22e:	2300      	movs	r3, #0
 800c230:	9309      	str	r3, [sp, #36]	; 0x24
 800c232:	2320      	movs	r3, #32
 800c234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c238:	f8cd 800c 	str.w	r8, [sp, #12]
 800c23c:	2330      	movs	r3, #48	; 0x30
 800c23e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3e8 <_svfiprintf_r+0x1ec>
 800c242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c246:	f04f 0901 	mov.w	r9, #1
 800c24a:	4623      	mov	r3, r4
 800c24c:	469a      	mov	sl, r3
 800c24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c252:	b10a      	cbz	r2, 800c258 <_svfiprintf_r+0x5c>
 800c254:	2a25      	cmp	r2, #37	; 0x25
 800c256:	d1f9      	bne.n	800c24c <_svfiprintf_r+0x50>
 800c258:	ebba 0b04 	subs.w	fp, sl, r4
 800c25c:	d00b      	beq.n	800c276 <_svfiprintf_r+0x7a>
 800c25e:	465b      	mov	r3, fp
 800c260:	4622      	mov	r2, r4
 800c262:	4629      	mov	r1, r5
 800c264:	4638      	mov	r0, r7
 800c266:	f7ff ff6d 	bl	800c144 <__ssputs_r>
 800c26a:	3001      	adds	r0, #1
 800c26c:	f000 80aa 	beq.w	800c3c4 <_svfiprintf_r+0x1c8>
 800c270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c272:	445a      	add	r2, fp
 800c274:	9209      	str	r2, [sp, #36]	; 0x24
 800c276:	f89a 3000 	ldrb.w	r3, [sl]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 80a2 	beq.w	800c3c4 <_svfiprintf_r+0x1c8>
 800c280:	2300      	movs	r3, #0
 800c282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c28a:	f10a 0a01 	add.w	sl, sl, #1
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	9307      	str	r3, [sp, #28]
 800c292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c296:	931a      	str	r3, [sp, #104]	; 0x68
 800c298:	4654      	mov	r4, sl
 800c29a:	2205      	movs	r2, #5
 800c29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a0:	4851      	ldr	r0, [pc, #324]	; (800c3e8 <_svfiprintf_r+0x1ec>)
 800c2a2:	f7f3 ff9d 	bl	80001e0 <memchr>
 800c2a6:	9a04      	ldr	r2, [sp, #16]
 800c2a8:	b9d8      	cbnz	r0, 800c2e2 <_svfiprintf_r+0xe6>
 800c2aa:	06d0      	lsls	r0, r2, #27
 800c2ac:	bf44      	itt	mi
 800c2ae:	2320      	movmi	r3, #32
 800c2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b4:	0711      	lsls	r1, r2, #28
 800c2b6:	bf44      	itt	mi
 800c2b8:	232b      	movmi	r3, #43	; 0x2b
 800c2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2be:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2c4:	d015      	beq.n	800c2f2 <_svfiprintf_r+0xf6>
 800c2c6:	9a07      	ldr	r2, [sp, #28]
 800c2c8:	4654      	mov	r4, sl
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f04f 0c0a 	mov.w	ip, #10
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2d6:	3b30      	subs	r3, #48	; 0x30
 800c2d8:	2b09      	cmp	r3, #9
 800c2da:	d94e      	bls.n	800c37a <_svfiprintf_r+0x17e>
 800c2dc:	b1b0      	cbz	r0, 800c30c <_svfiprintf_r+0x110>
 800c2de:	9207      	str	r2, [sp, #28]
 800c2e0:	e014      	b.n	800c30c <_svfiprintf_r+0x110>
 800c2e2:	eba0 0308 	sub.w	r3, r0, r8
 800c2e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	46a2      	mov	sl, r4
 800c2f0:	e7d2      	b.n	800c298 <_svfiprintf_r+0x9c>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	1d19      	adds	r1, r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9103      	str	r1, [sp, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfbb      	ittet	lt
 800c2fe:	425b      	neglt	r3, r3
 800c300:	f042 0202 	orrlt.w	r2, r2, #2
 800c304:	9307      	strge	r3, [sp, #28]
 800c306:	9307      	strlt	r3, [sp, #28]
 800c308:	bfb8      	it	lt
 800c30a:	9204      	strlt	r2, [sp, #16]
 800c30c:	7823      	ldrb	r3, [r4, #0]
 800c30e:	2b2e      	cmp	r3, #46	; 0x2e
 800c310:	d10c      	bne.n	800c32c <_svfiprintf_r+0x130>
 800c312:	7863      	ldrb	r3, [r4, #1]
 800c314:	2b2a      	cmp	r3, #42	; 0x2a
 800c316:	d135      	bne.n	800c384 <_svfiprintf_r+0x188>
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	1d1a      	adds	r2, r3, #4
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	9203      	str	r2, [sp, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfb8      	it	lt
 800c324:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c328:	3402      	adds	r4, #2
 800c32a:	9305      	str	r3, [sp, #20]
 800c32c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3f8 <_svfiprintf_r+0x1fc>
 800c330:	7821      	ldrb	r1, [r4, #0]
 800c332:	2203      	movs	r2, #3
 800c334:	4650      	mov	r0, sl
 800c336:	f7f3 ff53 	bl	80001e0 <memchr>
 800c33a:	b140      	cbz	r0, 800c34e <_svfiprintf_r+0x152>
 800c33c:	2340      	movs	r3, #64	; 0x40
 800c33e:	eba0 000a 	sub.w	r0, r0, sl
 800c342:	fa03 f000 	lsl.w	r0, r3, r0
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	4303      	orrs	r3, r0
 800c34a:	3401      	adds	r4, #1
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c352:	4826      	ldr	r0, [pc, #152]	; (800c3ec <_svfiprintf_r+0x1f0>)
 800c354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c358:	2206      	movs	r2, #6
 800c35a:	f7f3 ff41 	bl	80001e0 <memchr>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d038      	beq.n	800c3d4 <_svfiprintf_r+0x1d8>
 800c362:	4b23      	ldr	r3, [pc, #140]	; (800c3f0 <_svfiprintf_r+0x1f4>)
 800c364:	bb1b      	cbnz	r3, 800c3ae <_svfiprintf_r+0x1b2>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	3307      	adds	r3, #7
 800c36a:	f023 0307 	bic.w	r3, r3, #7
 800c36e:	3308      	adds	r3, #8
 800c370:	9303      	str	r3, [sp, #12]
 800c372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c374:	4433      	add	r3, r6
 800c376:	9309      	str	r3, [sp, #36]	; 0x24
 800c378:	e767      	b.n	800c24a <_svfiprintf_r+0x4e>
 800c37a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c37e:	460c      	mov	r4, r1
 800c380:	2001      	movs	r0, #1
 800c382:	e7a5      	b.n	800c2d0 <_svfiprintf_r+0xd4>
 800c384:	2300      	movs	r3, #0
 800c386:	3401      	adds	r4, #1
 800c388:	9305      	str	r3, [sp, #20]
 800c38a:	4619      	mov	r1, r3
 800c38c:	f04f 0c0a 	mov.w	ip, #10
 800c390:	4620      	mov	r0, r4
 800c392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c396:	3a30      	subs	r2, #48	; 0x30
 800c398:	2a09      	cmp	r2, #9
 800c39a:	d903      	bls.n	800c3a4 <_svfiprintf_r+0x1a8>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0c5      	beq.n	800c32c <_svfiprintf_r+0x130>
 800c3a0:	9105      	str	r1, [sp, #20]
 800c3a2:	e7c3      	b.n	800c32c <_svfiprintf_r+0x130>
 800c3a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e7f0      	b.n	800c390 <_svfiprintf_r+0x194>
 800c3ae:	ab03      	add	r3, sp, #12
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <_svfiprintf_r+0x1f8>)
 800c3b6:	a904      	add	r1, sp, #16
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f3af 8000 	nop.w
 800c3be:	1c42      	adds	r2, r0, #1
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	d1d6      	bne.n	800c372 <_svfiprintf_r+0x176>
 800c3c4:	89ab      	ldrh	r3, [r5, #12]
 800c3c6:	065b      	lsls	r3, r3, #25
 800c3c8:	f53f af2c 	bmi.w	800c224 <_svfiprintf_r+0x28>
 800c3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ce:	b01d      	add	sp, #116	; 0x74
 800c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d4:	ab03      	add	r3, sp, #12
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	462a      	mov	r2, r5
 800c3da:	4b06      	ldr	r3, [pc, #24]	; (800c3f4 <_svfiprintf_r+0x1f8>)
 800c3dc:	a904      	add	r1, sp, #16
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f000 f87a 	bl	800c4d8 <_printf_i>
 800c3e4:	e7eb      	b.n	800c3be <_svfiprintf_r+0x1c2>
 800c3e6:	bf00      	nop
 800c3e8:	0800f44c 	.word	0x0800f44c
 800c3ec:	0800f456 	.word	0x0800f456
 800c3f0:	00000000 	.word	0x00000000
 800c3f4:	0800c145 	.word	0x0800c145
 800c3f8:	0800f452 	.word	0x0800f452

0800c3fc <_printf_common>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	4616      	mov	r6, r2
 800c402:	4699      	mov	r9, r3
 800c404:	688a      	ldr	r2, [r1, #8]
 800c406:	690b      	ldr	r3, [r1, #16]
 800c408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c40c:	4293      	cmp	r3, r2
 800c40e:	bfb8      	it	lt
 800c410:	4613      	movlt	r3, r2
 800c412:	6033      	str	r3, [r6, #0]
 800c414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c418:	4607      	mov	r7, r0
 800c41a:	460c      	mov	r4, r1
 800c41c:	b10a      	cbz	r2, 800c422 <_printf_common+0x26>
 800c41e:	3301      	adds	r3, #1
 800c420:	6033      	str	r3, [r6, #0]
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	0699      	lsls	r1, r3, #26
 800c426:	bf42      	ittt	mi
 800c428:	6833      	ldrmi	r3, [r6, #0]
 800c42a:	3302      	addmi	r3, #2
 800c42c:	6033      	strmi	r3, [r6, #0]
 800c42e:	6825      	ldr	r5, [r4, #0]
 800c430:	f015 0506 	ands.w	r5, r5, #6
 800c434:	d106      	bne.n	800c444 <_printf_common+0x48>
 800c436:	f104 0a19 	add.w	sl, r4, #25
 800c43a:	68e3      	ldr	r3, [r4, #12]
 800c43c:	6832      	ldr	r2, [r6, #0]
 800c43e:	1a9b      	subs	r3, r3, r2
 800c440:	42ab      	cmp	r3, r5
 800c442:	dc26      	bgt.n	800c492 <_printf_common+0x96>
 800c444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c448:	1e13      	subs	r3, r2, #0
 800c44a:	6822      	ldr	r2, [r4, #0]
 800c44c:	bf18      	it	ne
 800c44e:	2301      	movne	r3, #1
 800c450:	0692      	lsls	r2, r2, #26
 800c452:	d42b      	bmi.n	800c4ac <_printf_common+0xb0>
 800c454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c458:	4649      	mov	r1, r9
 800c45a:	4638      	mov	r0, r7
 800c45c:	47c0      	blx	r8
 800c45e:	3001      	adds	r0, #1
 800c460:	d01e      	beq.n	800c4a0 <_printf_common+0xa4>
 800c462:	6823      	ldr	r3, [r4, #0]
 800c464:	68e5      	ldr	r5, [r4, #12]
 800c466:	6832      	ldr	r2, [r6, #0]
 800c468:	f003 0306 	and.w	r3, r3, #6
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	bf08      	it	eq
 800c470:	1aad      	subeq	r5, r5, r2
 800c472:	68a3      	ldr	r3, [r4, #8]
 800c474:	6922      	ldr	r2, [r4, #16]
 800c476:	bf0c      	ite	eq
 800c478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c47c:	2500      	movne	r5, #0
 800c47e:	4293      	cmp	r3, r2
 800c480:	bfc4      	itt	gt
 800c482:	1a9b      	subgt	r3, r3, r2
 800c484:	18ed      	addgt	r5, r5, r3
 800c486:	2600      	movs	r6, #0
 800c488:	341a      	adds	r4, #26
 800c48a:	42b5      	cmp	r5, r6
 800c48c:	d11a      	bne.n	800c4c4 <_printf_common+0xc8>
 800c48e:	2000      	movs	r0, #0
 800c490:	e008      	b.n	800c4a4 <_printf_common+0xa8>
 800c492:	2301      	movs	r3, #1
 800c494:	4652      	mov	r2, sl
 800c496:	4649      	mov	r1, r9
 800c498:	4638      	mov	r0, r7
 800c49a:	47c0      	blx	r8
 800c49c:	3001      	adds	r0, #1
 800c49e:	d103      	bne.n	800c4a8 <_printf_common+0xac>
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a8:	3501      	adds	r5, #1
 800c4aa:	e7c6      	b.n	800c43a <_printf_common+0x3e>
 800c4ac:	18e1      	adds	r1, r4, r3
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	2030      	movs	r0, #48	; 0x30
 800c4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4b6:	4422      	add	r2, r4
 800c4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4c0:	3302      	adds	r3, #2
 800c4c2:	e7c7      	b.n	800c454 <_printf_common+0x58>
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	47c0      	blx	r8
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d0e6      	beq.n	800c4a0 <_printf_common+0xa4>
 800c4d2:	3601      	adds	r6, #1
 800c4d4:	e7d9      	b.n	800c48a <_printf_common+0x8e>
	...

0800c4d8 <_printf_i>:
 800c4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4dc:	460c      	mov	r4, r1
 800c4de:	4691      	mov	r9, r2
 800c4e0:	7e27      	ldrb	r7, [r4, #24]
 800c4e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4e4:	2f78      	cmp	r7, #120	; 0x78
 800c4e6:	4680      	mov	r8, r0
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4ee:	d807      	bhi.n	800c500 <_printf_i+0x28>
 800c4f0:	2f62      	cmp	r7, #98	; 0x62
 800c4f2:	d80a      	bhi.n	800c50a <_printf_i+0x32>
 800c4f4:	2f00      	cmp	r7, #0
 800c4f6:	f000 80d8 	beq.w	800c6aa <_printf_i+0x1d2>
 800c4fa:	2f58      	cmp	r7, #88	; 0x58
 800c4fc:	f000 80a3 	beq.w	800c646 <_printf_i+0x16e>
 800c500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c508:	e03a      	b.n	800c580 <_printf_i+0xa8>
 800c50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c50e:	2b15      	cmp	r3, #21
 800c510:	d8f6      	bhi.n	800c500 <_printf_i+0x28>
 800c512:	a001      	add	r0, pc, #4	; (adr r0, 800c518 <_printf_i+0x40>)
 800c514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c518:	0800c571 	.word	0x0800c571
 800c51c:	0800c585 	.word	0x0800c585
 800c520:	0800c501 	.word	0x0800c501
 800c524:	0800c501 	.word	0x0800c501
 800c528:	0800c501 	.word	0x0800c501
 800c52c:	0800c501 	.word	0x0800c501
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c501 	.word	0x0800c501
 800c538:	0800c501 	.word	0x0800c501
 800c53c:	0800c501 	.word	0x0800c501
 800c540:	0800c501 	.word	0x0800c501
 800c544:	0800c691 	.word	0x0800c691
 800c548:	0800c5b5 	.word	0x0800c5b5
 800c54c:	0800c673 	.word	0x0800c673
 800c550:	0800c501 	.word	0x0800c501
 800c554:	0800c501 	.word	0x0800c501
 800c558:	0800c6b3 	.word	0x0800c6b3
 800c55c:	0800c501 	.word	0x0800c501
 800c560:	0800c5b5 	.word	0x0800c5b5
 800c564:	0800c501 	.word	0x0800c501
 800c568:	0800c501 	.word	0x0800c501
 800c56c:	0800c67b 	.word	0x0800c67b
 800c570:	680b      	ldr	r3, [r1, #0]
 800c572:	1d1a      	adds	r2, r3, #4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	600a      	str	r2, [r1, #0]
 800c578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c580:	2301      	movs	r3, #1
 800c582:	e0a3      	b.n	800c6cc <_printf_i+0x1f4>
 800c584:	6825      	ldr	r5, [r4, #0]
 800c586:	6808      	ldr	r0, [r1, #0]
 800c588:	062e      	lsls	r6, r5, #24
 800c58a:	f100 0304 	add.w	r3, r0, #4
 800c58e:	d50a      	bpl.n	800c5a6 <_printf_i+0xce>
 800c590:	6805      	ldr	r5, [r0, #0]
 800c592:	600b      	str	r3, [r1, #0]
 800c594:	2d00      	cmp	r5, #0
 800c596:	da03      	bge.n	800c5a0 <_printf_i+0xc8>
 800c598:	232d      	movs	r3, #45	; 0x2d
 800c59a:	426d      	negs	r5, r5
 800c59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a0:	485e      	ldr	r0, [pc, #376]	; (800c71c <_printf_i+0x244>)
 800c5a2:	230a      	movs	r3, #10
 800c5a4:	e019      	b.n	800c5da <_printf_i+0x102>
 800c5a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c5aa:	6805      	ldr	r5, [r0, #0]
 800c5ac:	600b      	str	r3, [r1, #0]
 800c5ae:	bf18      	it	ne
 800c5b0:	b22d      	sxthne	r5, r5
 800c5b2:	e7ef      	b.n	800c594 <_printf_i+0xbc>
 800c5b4:	680b      	ldr	r3, [r1, #0]
 800c5b6:	6825      	ldr	r5, [r4, #0]
 800c5b8:	1d18      	adds	r0, r3, #4
 800c5ba:	6008      	str	r0, [r1, #0]
 800c5bc:	0628      	lsls	r0, r5, #24
 800c5be:	d501      	bpl.n	800c5c4 <_printf_i+0xec>
 800c5c0:	681d      	ldr	r5, [r3, #0]
 800c5c2:	e002      	b.n	800c5ca <_printf_i+0xf2>
 800c5c4:	0669      	lsls	r1, r5, #25
 800c5c6:	d5fb      	bpl.n	800c5c0 <_printf_i+0xe8>
 800c5c8:	881d      	ldrh	r5, [r3, #0]
 800c5ca:	4854      	ldr	r0, [pc, #336]	; (800c71c <_printf_i+0x244>)
 800c5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800c5ce:	bf0c      	ite	eq
 800c5d0:	2308      	moveq	r3, #8
 800c5d2:	230a      	movne	r3, #10
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5da:	6866      	ldr	r6, [r4, #4]
 800c5dc:	60a6      	str	r6, [r4, #8]
 800c5de:	2e00      	cmp	r6, #0
 800c5e0:	bfa2      	ittt	ge
 800c5e2:	6821      	ldrge	r1, [r4, #0]
 800c5e4:	f021 0104 	bicge.w	r1, r1, #4
 800c5e8:	6021      	strge	r1, [r4, #0]
 800c5ea:	b90d      	cbnz	r5, 800c5f0 <_printf_i+0x118>
 800c5ec:	2e00      	cmp	r6, #0
 800c5ee:	d04d      	beq.n	800c68c <_printf_i+0x1b4>
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5f6:	fb03 5711 	mls	r7, r3, r1, r5
 800c5fa:	5dc7      	ldrb	r7, [r0, r7]
 800c5fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c600:	462f      	mov	r7, r5
 800c602:	42bb      	cmp	r3, r7
 800c604:	460d      	mov	r5, r1
 800c606:	d9f4      	bls.n	800c5f2 <_printf_i+0x11a>
 800c608:	2b08      	cmp	r3, #8
 800c60a:	d10b      	bne.n	800c624 <_printf_i+0x14c>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	07df      	lsls	r7, r3, #31
 800c610:	d508      	bpl.n	800c624 <_printf_i+0x14c>
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	6861      	ldr	r1, [r4, #4]
 800c616:	4299      	cmp	r1, r3
 800c618:	bfde      	ittt	le
 800c61a:	2330      	movle	r3, #48	; 0x30
 800c61c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c620:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c624:	1b92      	subs	r2, r2, r6
 800c626:	6122      	str	r2, [r4, #16]
 800c628:	f8cd a000 	str.w	sl, [sp]
 800c62c:	464b      	mov	r3, r9
 800c62e:	aa03      	add	r2, sp, #12
 800c630:	4621      	mov	r1, r4
 800c632:	4640      	mov	r0, r8
 800c634:	f7ff fee2 	bl	800c3fc <_printf_common>
 800c638:	3001      	adds	r0, #1
 800c63a:	d14c      	bne.n	800c6d6 <_printf_i+0x1fe>
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c640:	b004      	add	sp, #16
 800c642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c646:	4835      	ldr	r0, [pc, #212]	; (800c71c <_printf_i+0x244>)
 800c648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	680e      	ldr	r6, [r1, #0]
 800c650:	061f      	lsls	r7, r3, #24
 800c652:	f856 5b04 	ldr.w	r5, [r6], #4
 800c656:	600e      	str	r6, [r1, #0]
 800c658:	d514      	bpl.n	800c684 <_printf_i+0x1ac>
 800c65a:	07d9      	lsls	r1, r3, #31
 800c65c:	bf44      	itt	mi
 800c65e:	f043 0320 	orrmi.w	r3, r3, #32
 800c662:	6023      	strmi	r3, [r4, #0]
 800c664:	b91d      	cbnz	r5, 800c66e <_printf_i+0x196>
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	f023 0320 	bic.w	r3, r3, #32
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	2310      	movs	r3, #16
 800c670:	e7b0      	b.n	800c5d4 <_printf_i+0xfc>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	f043 0320 	orr.w	r3, r3, #32
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	2378      	movs	r3, #120	; 0x78
 800c67c:	4828      	ldr	r0, [pc, #160]	; (800c720 <_printf_i+0x248>)
 800c67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c682:	e7e3      	b.n	800c64c <_printf_i+0x174>
 800c684:	065e      	lsls	r6, r3, #25
 800c686:	bf48      	it	mi
 800c688:	b2ad      	uxthmi	r5, r5
 800c68a:	e7e6      	b.n	800c65a <_printf_i+0x182>
 800c68c:	4616      	mov	r6, r2
 800c68e:	e7bb      	b.n	800c608 <_printf_i+0x130>
 800c690:	680b      	ldr	r3, [r1, #0]
 800c692:	6826      	ldr	r6, [r4, #0]
 800c694:	6960      	ldr	r0, [r4, #20]
 800c696:	1d1d      	adds	r5, r3, #4
 800c698:	600d      	str	r5, [r1, #0]
 800c69a:	0635      	lsls	r5, r6, #24
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	d501      	bpl.n	800c6a4 <_printf_i+0x1cc>
 800c6a0:	6018      	str	r0, [r3, #0]
 800c6a2:	e002      	b.n	800c6aa <_printf_i+0x1d2>
 800c6a4:	0671      	lsls	r1, r6, #25
 800c6a6:	d5fb      	bpl.n	800c6a0 <_printf_i+0x1c8>
 800c6a8:	8018      	strh	r0, [r3, #0]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	6123      	str	r3, [r4, #16]
 800c6ae:	4616      	mov	r6, r2
 800c6b0:	e7ba      	b.n	800c628 <_printf_i+0x150>
 800c6b2:	680b      	ldr	r3, [r1, #0]
 800c6b4:	1d1a      	adds	r2, r3, #4
 800c6b6:	600a      	str	r2, [r1, #0]
 800c6b8:	681e      	ldr	r6, [r3, #0]
 800c6ba:	6862      	ldr	r2, [r4, #4]
 800c6bc:	2100      	movs	r1, #0
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7f3 fd8e 	bl	80001e0 <memchr>
 800c6c4:	b108      	cbz	r0, 800c6ca <_printf_i+0x1f2>
 800c6c6:	1b80      	subs	r0, r0, r6
 800c6c8:	6060      	str	r0, [r4, #4]
 800c6ca:	6863      	ldr	r3, [r4, #4]
 800c6cc:	6123      	str	r3, [r4, #16]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6d4:	e7a8      	b.n	800c628 <_printf_i+0x150>
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	4632      	mov	r2, r6
 800c6da:	4649      	mov	r1, r9
 800c6dc:	4640      	mov	r0, r8
 800c6de:	47d0      	blx	sl
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d0ab      	beq.n	800c63c <_printf_i+0x164>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	079b      	lsls	r3, r3, #30
 800c6e8:	d413      	bmi.n	800c712 <_printf_i+0x23a>
 800c6ea:	68e0      	ldr	r0, [r4, #12]
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	4298      	cmp	r0, r3
 800c6f0:	bfb8      	it	lt
 800c6f2:	4618      	movlt	r0, r3
 800c6f4:	e7a4      	b.n	800c640 <_printf_i+0x168>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	47d0      	blx	sl
 800c700:	3001      	adds	r0, #1
 800c702:	d09b      	beq.n	800c63c <_printf_i+0x164>
 800c704:	3501      	adds	r5, #1
 800c706:	68e3      	ldr	r3, [r4, #12]
 800c708:	9903      	ldr	r1, [sp, #12]
 800c70a:	1a5b      	subs	r3, r3, r1
 800c70c:	42ab      	cmp	r3, r5
 800c70e:	dcf2      	bgt.n	800c6f6 <_printf_i+0x21e>
 800c710:	e7eb      	b.n	800c6ea <_printf_i+0x212>
 800c712:	2500      	movs	r5, #0
 800c714:	f104 0619 	add.w	r6, r4, #25
 800c718:	e7f5      	b.n	800c706 <_printf_i+0x22e>
 800c71a:	bf00      	nop
 800c71c:	0800f45d 	.word	0x0800f45d
 800c720:	0800f46e 	.word	0x0800f46e

0800c724 <memmove>:
 800c724:	4288      	cmp	r0, r1
 800c726:	b510      	push	{r4, lr}
 800c728:	eb01 0402 	add.w	r4, r1, r2
 800c72c:	d902      	bls.n	800c734 <memmove+0x10>
 800c72e:	4284      	cmp	r4, r0
 800c730:	4623      	mov	r3, r4
 800c732:	d807      	bhi.n	800c744 <memmove+0x20>
 800c734:	1e43      	subs	r3, r0, #1
 800c736:	42a1      	cmp	r1, r4
 800c738:	d008      	beq.n	800c74c <memmove+0x28>
 800c73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c742:	e7f8      	b.n	800c736 <memmove+0x12>
 800c744:	4402      	add	r2, r0
 800c746:	4601      	mov	r1, r0
 800c748:	428a      	cmp	r2, r1
 800c74a:	d100      	bne.n	800c74e <memmove+0x2a>
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c756:	e7f7      	b.n	800c748 <memmove+0x24>

0800c758 <_free_r>:
 800c758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c75a:	2900      	cmp	r1, #0
 800c75c:	d048      	beq.n	800c7f0 <_free_r+0x98>
 800c75e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c762:	9001      	str	r0, [sp, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	f1a1 0404 	sub.w	r4, r1, #4
 800c76a:	bfb8      	it	lt
 800c76c:	18e4      	addlt	r4, r4, r3
 800c76e:	f000 f8d3 	bl	800c918 <__malloc_lock>
 800c772:	4a20      	ldr	r2, [pc, #128]	; (800c7f4 <_free_r+0x9c>)
 800c774:	9801      	ldr	r0, [sp, #4]
 800c776:	6813      	ldr	r3, [r2, #0]
 800c778:	4615      	mov	r5, r2
 800c77a:	b933      	cbnz	r3, 800c78a <_free_r+0x32>
 800c77c:	6063      	str	r3, [r4, #4]
 800c77e:	6014      	str	r4, [r2, #0]
 800c780:	b003      	add	sp, #12
 800c782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c786:	f000 b8cd 	b.w	800c924 <__malloc_unlock>
 800c78a:	42a3      	cmp	r3, r4
 800c78c:	d90b      	bls.n	800c7a6 <_free_r+0x4e>
 800c78e:	6821      	ldr	r1, [r4, #0]
 800c790:	1862      	adds	r2, r4, r1
 800c792:	4293      	cmp	r3, r2
 800c794:	bf04      	itt	eq
 800c796:	681a      	ldreq	r2, [r3, #0]
 800c798:	685b      	ldreq	r3, [r3, #4]
 800c79a:	6063      	str	r3, [r4, #4]
 800c79c:	bf04      	itt	eq
 800c79e:	1852      	addeq	r2, r2, r1
 800c7a0:	6022      	streq	r2, [r4, #0]
 800c7a2:	602c      	str	r4, [r5, #0]
 800c7a4:	e7ec      	b.n	800c780 <_free_r+0x28>
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	b10b      	cbz	r3, 800c7b0 <_free_r+0x58>
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	d9fa      	bls.n	800c7a6 <_free_r+0x4e>
 800c7b0:	6811      	ldr	r1, [r2, #0]
 800c7b2:	1855      	adds	r5, r2, r1
 800c7b4:	42a5      	cmp	r5, r4
 800c7b6:	d10b      	bne.n	800c7d0 <_free_r+0x78>
 800c7b8:	6824      	ldr	r4, [r4, #0]
 800c7ba:	4421      	add	r1, r4
 800c7bc:	1854      	adds	r4, r2, r1
 800c7be:	42a3      	cmp	r3, r4
 800c7c0:	6011      	str	r1, [r2, #0]
 800c7c2:	d1dd      	bne.n	800c780 <_free_r+0x28>
 800c7c4:	681c      	ldr	r4, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	6053      	str	r3, [r2, #4]
 800c7ca:	4421      	add	r1, r4
 800c7cc:	6011      	str	r1, [r2, #0]
 800c7ce:	e7d7      	b.n	800c780 <_free_r+0x28>
 800c7d0:	d902      	bls.n	800c7d8 <_free_r+0x80>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	e7d3      	b.n	800c780 <_free_r+0x28>
 800c7d8:	6825      	ldr	r5, [r4, #0]
 800c7da:	1961      	adds	r1, r4, r5
 800c7dc:	428b      	cmp	r3, r1
 800c7de:	bf04      	itt	eq
 800c7e0:	6819      	ldreq	r1, [r3, #0]
 800c7e2:	685b      	ldreq	r3, [r3, #4]
 800c7e4:	6063      	str	r3, [r4, #4]
 800c7e6:	bf04      	itt	eq
 800c7e8:	1949      	addeq	r1, r1, r5
 800c7ea:	6021      	streq	r1, [r4, #0]
 800c7ec:	6054      	str	r4, [r2, #4]
 800c7ee:	e7c7      	b.n	800c780 <_free_r+0x28>
 800c7f0:	b003      	add	sp, #12
 800c7f2:	bd30      	pop	{r4, r5, pc}
 800c7f4:	20008c58 	.word	0x20008c58

0800c7f8 <_malloc_r>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	1ccd      	adds	r5, r1, #3
 800c7fc:	f025 0503 	bic.w	r5, r5, #3
 800c800:	3508      	adds	r5, #8
 800c802:	2d0c      	cmp	r5, #12
 800c804:	bf38      	it	cc
 800c806:	250c      	movcc	r5, #12
 800c808:	2d00      	cmp	r5, #0
 800c80a:	4606      	mov	r6, r0
 800c80c:	db01      	blt.n	800c812 <_malloc_r+0x1a>
 800c80e:	42a9      	cmp	r1, r5
 800c810:	d903      	bls.n	800c81a <_malloc_r+0x22>
 800c812:	230c      	movs	r3, #12
 800c814:	6033      	str	r3, [r6, #0]
 800c816:	2000      	movs	r0, #0
 800c818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c81a:	f000 f87d 	bl	800c918 <__malloc_lock>
 800c81e:	4921      	ldr	r1, [pc, #132]	; (800c8a4 <_malloc_r+0xac>)
 800c820:	680a      	ldr	r2, [r1, #0]
 800c822:	4614      	mov	r4, r2
 800c824:	b99c      	cbnz	r4, 800c84e <_malloc_r+0x56>
 800c826:	4f20      	ldr	r7, [pc, #128]	; (800c8a8 <_malloc_r+0xb0>)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	b923      	cbnz	r3, 800c836 <_malloc_r+0x3e>
 800c82c:	4621      	mov	r1, r4
 800c82e:	4630      	mov	r0, r6
 800c830:	f000 f862 	bl	800c8f8 <_sbrk_r>
 800c834:	6038      	str	r0, [r7, #0]
 800c836:	4629      	mov	r1, r5
 800c838:	4630      	mov	r0, r6
 800c83a:	f000 f85d 	bl	800c8f8 <_sbrk_r>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d123      	bne.n	800c88a <_malloc_r+0x92>
 800c842:	230c      	movs	r3, #12
 800c844:	6033      	str	r3, [r6, #0]
 800c846:	4630      	mov	r0, r6
 800c848:	f000 f86c 	bl	800c924 <__malloc_unlock>
 800c84c:	e7e3      	b.n	800c816 <_malloc_r+0x1e>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	1b5b      	subs	r3, r3, r5
 800c852:	d417      	bmi.n	800c884 <_malloc_r+0x8c>
 800c854:	2b0b      	cmp	r3, #11
 800c856:	d903      	bls.n	800c860 <_malloc_r+0x68>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	441c      	add	r4, r3
 800c85c:	6025      	str	r5, [r4, #0]
 800c85e:	e004      	b.n	800c86a <_malloc_r+0x72>
 800c860:	6863      	ldr	r3, [r4, #4]
 800c862:	42a2      	cmp	r2, r4
 800c864:	bf0c      	ite	eq
 800c866:	600b      	streq	r3, [r1, #0]
 800c868:	6053      	strne	r3, [r2, #4]
 800c86a:	4630      	mov	r0, r6
 800c86c:	f000 f85a 	bl	800c924 <__malloc_unlock>
 800c870:	f104 000b 	add.w	r0, r4, #11
 800c874:	1d23      	adds	r3, r4, #4
 800c876:	f020 0007 	bic.w	r0, r0, #7
 800c87a:	1ac2      	subs	r2, r0, r3
 800c87c:	d0cc      	beq.n	800c818 <_malloc_r+0x20>
 800c87e:	1a1b      	subs	r3, r3, r0
 800c880:	50a3      	str	r3, [r4, r2]
 800c882:	e7c9      	b.n	800c818 <_malloc_r+0x20>
 800c884:	4622      	mov	r2, r4
 800c886:	6864      	ldr	r4, [r4, #4]
 800c888:	e7cc      	b.n	800c824 <_malloc_r+0x2c>
 800c88a:	1cc4      	adds	r4, r0, #3
 800c88c:	f024 0403 	bic.w	r4, r4, #3
 800c890:	42a0      	cmp	r0, r4
 800c892:	d0e3      	beq.n	800c85c <_malloc_r+0x64>
 800c894:	1a21      	subs	r1, r4, r0
 800c896:	4630      	mov	r0, r6
 800c898:	f000 f82e 	bl	800c8f8 <_sbrk_r>
 800c89c:	3001      	adds	r0, #1
 800c89e:	d1dd      	bne.n	800c85c <_malloc_r+0x64>
 800c8a0:	e7cf      	b.n	800c842 <_malloc_r+0x4a>
 800c8a2:	bf00      	nop
 800c8a4:	20008c58 	.word	0x20008c58
 800c8a8:	20008c5c 	.word	0x20008c5c

0800c8ac <_realloc_r>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	b921      	cbnz	r1, 800c8c0 <_realloc_r+0x14>
 800c8b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	f7ff bf9c 	b.w	800c7f8 <_malloc_r>
 800c8c0:	b922      	cbnz	r2, 800c8cc <_realloc_r+0x20>
 800c8c2:	f7ff ff49 	bl	800c758 <_free_r>
 800c8c6:	4625      	mov	r5, r4
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8cc:	f000 f830 	bl	800c930 <_malloc_usable_size_r>
 800c8d0:	42a0      	cmp	r0, r4
 800c8d2:	d20f      	bcs.n	800c8f4 <_realloc_r+0x48>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	f7ff ff8e 	bl	800c7f8 <_malloc_r>
 800c8dc:	4605      	mov	r5, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0f2      	beq.n	800c8c8 <_realloc_r+0x1c>
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	f7ff fbe3 	bl	800c0b0 <memcpy>
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff33 	bl	800c758 <_free_r>
 800c8f2:	e7e9      	b.n	800c8c8 <_realloc_r+0x1c>
 800c8f4:	4635      	mov	r5, r6
 800c8f6:	e7e7      	b.n	800c8c8 <_realloc_r+0x1c>

0800c8f8 <_sbrk_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_sbrk_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f4 fb74 	bl	8000ff0 <_sbrk>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_sbrk_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_sbrk_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	2000ad5c 	.word	0x2000ad5c

0800c918 <__malloc_lock>:
 800c918:	4801      	ldr	r0, [pc, #4]	; (800c920 <__malloc_lock+0x8>)
 800c91a:	f000 b811 	b.w	800c940 <__retarget_lock_acquire_recursive>
 800c91e:	bf00      	nop
 800c920:	2000ad64 	.word	0x2000ad64

0800c924 <__malloc_unlock>:
 800c924:	4801      	ldr	r0, [pc, #4]	; (800c92c <__malloc_unlock+0x8>)
 800c926:	f000 b80c 	b.w	800c942 <__retarget_lock_release_recursive>
 800c92a:	bf00      	nop
 800c92c:	2000ad64 	.word	0x2000ad64

0800c930 <_malloc_usable_size_r>:
 800c930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c934:	1f18      	subs	r0, r3, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	bfbc      	itt	lt
 800c93a:	580b      	ldrlt	r3, [r1, r0]
 800c93c:	18c0      	addlt	r0, r0, r3
 800c93e:	4770      	bx	lr

0800c940 <__retarget_lock_acquire_recursive>:
 800c940:	4770      	bx	lr

0800c942 <__retarget_lock_release_recursive>:
 800c942:	4770      	bx	lr

0800c944 <_init>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr

0800c950 <_fini>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr
