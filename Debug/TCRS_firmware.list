
TCRS_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029bc  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa4  08007fa4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fac  08007fac  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a74  20000028  08007fdc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a9c  08007fdc  00025a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bdf  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003397  00000000  00000000  00039c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005744  00000000  00000000  0003f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149b7  00000000  00000000  00044dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fe9  00000000  00000000  0005977b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  000f17b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d0 	.word	0x080055d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	080055d0 	.word	0x080055d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fe32 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f828 	bl	8000534 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8d4 	bl	8000690 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80004e8:	f000 f896 	bl	8000618 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80004ec:	f000 fc9c 	bl	8000e28 <_Z11ST7735_Initv>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f002 fae2 	bl	8002ab8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x44>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x48>)
 80004fa:	f002 fb27 	bl	8002b4c <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x4c>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of display_task */
  display_taskHandle = osThreadNew(start_display_task, NULL, &display_task_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x50>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x54>)
 800050a:	f002 fb1f 	bl	8002b4c <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <main+0x58>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f002 faf4 	bl	8002b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x40>
 800051a:	bf00      	nop
 800051c:	080056b8 	.word	0x080056b8
 8000520:	08000741 	.word	0x08000741
 8000524:	2000009c 	.word	0x2000009c
 8000528:	080056dc 	.word	0x080056dc
 800052c:	0800075d 	.word	0x0800075d
 8000530:	200000a0 	.word	0x200000a0

08000534 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 f83c 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 800057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f8c3 	bl	8001744 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80005ce:	f000 fa15 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2103      	movs	r1, #3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fb20 	bl	8001c34 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000604:	f000 f9fa 	bl	80009fc <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <_ZL12MX_SPI1_Initv+0x74>)
 8000620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 8000664:	220a      	movs	r2, #10
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <_ZL12MX_SPI1_Initv+0x70>)
 800066a:	f001 fcd1 	bl	8002010 <HAL_SPI_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800067e:	f000 f9bd 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000044 	.word	0x20000044
 800068c:	40013000 	.word	0x40013000

08000690 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a21      	ldr	r2, [pc, #132]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <_ZL12MX_GPIO_Initv+0xa4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	211c      	movs	r1, #28
 80006e2:	4815      	ldr	r0, [pc, #84]	; (8000738 <_ZL12MX_GPIO_Initv+0xa8>)
 80006e4:	f000 fffa 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2107      	movs	r1, #7
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <_ZL12MX_GPIO_Initv+0xac>)
 80006ee:	f000 fff5 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DISPLAY_CS_Pin;
 80006f2:	231c      	movs	r3, #28
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <_ZL12MX_GPIO_Initv+0xa8>)
 800070a:	f000 fe63 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_COMAND_Pin DISPLAY_RESET_Pin DISPLAY_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_COMAND_Pin|DISPLAY_RESET_Pin|DISPLAY_BACKLIGHT_Pin;
 800070e:	2307      	movs	r3, #7
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <_ZL12MX_GPIO_Initv+0xac>)
 8000726:	f000 fe55 	bl	80013d4 <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f002 fa91 	bl	8002c70 <osDelay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800074e:	2108      	movs	r1, #8
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <_Z16StartDefaultTaskPv+0x18>)
 8000752:	f000 ffdc 	bl	800170e <HAL_GPIO_TogglePin>
    osDelay(100);
 8000756:	e7f7      	b.n	8000748 <_Z16StartDefaultTaskPv+0x8>
 8000758:	40020000 	.word	0x40020000

0800075c <_Z18start_display_taskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_display_task */
void start_display_task(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af04      	add	r7, sp, #16
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_display_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f002 fa82 	bl	8002c70 <osDelay>


	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800076c:	2104      	movs	r1, #4
 800076e:	488b      	ldr	r0, [pc, #556]	; (800099c <_Z18start_display_taskPv+0x240>)
 8000770:	f000 ffcd 	bl	800170e <HAL_GPIO_TogglePin>
	osDelay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000778:	f002 fa7a 	bl	8002c70 <osDelay>
	// Check border
	ST7735_FillScreen(ST7735_BLACK);
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fccf 	bl	8001120 <_Z17ST7735_FillScreent>

	for(int x = 0; x < ST7735_WIDTH; x++) {
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b4f      	cmp	r3, #79	; 0x4f
 800078a:	dc13      	bgt.n	80007b4 <_Z18start_display_taskPv+0x58>
		ST7735_DrawPixel(x, 0, ST7735_RED);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	b29b      	uxth	r3, r3
 8000790:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fb60 	bl	8000e5c <_Z16ST7735_DrawPixelttt>
		ST7735_DrawPixel(x, ST7735_HEIGHT-1, ST7735_RED);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007a4:	219f      	movs	r1, #159	; 0x9f
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fb58 	bl	8000e5c <_Z16ST7735_DrawPixelttt>
	for(int x = 0; x < ST7735_WIDTH; x++) {
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e7e8      	b.n	8000786 <_Z18start_display_taskPv+0x2a>
	}

	for(int y = 0; y < ST7735_HEIGHT; y++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b9f      	cmp	r3, #159	; 0x9f
 80007bc:	dc13      	bgt.n	80007e6 <_Z18start_display_taskPv+0x8a>
		ST7735_DrawPixel(0, y, ST7735_RED);
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007c6:	4619      	mov	r1, r3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fb47 	bl	8000e5c <_Z16ST7735_DrawPixelttt>
		ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007d6:	4619      	mov	r1, r3
 80007d8:	204f      	movs	r0, #79	; 0x4f
 80007da:	f000 fb3f 	bl	8000e5c <_Z16ST7735_DrawPixelttt>
	for(int y = 0; y < ST7735_HEIGHT; y++) {
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	e7e8      	b.n	80007b8 <_Z18start_display_taskPv+0x5c>
	}

	osDelay(3000);
 80007e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ea:	f002 fa41 	bl	8002c70 <osDelay>

	// Check fonts
	ST7735_FillScreen(ST7735_BLACK);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fc96 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 80007f4:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <_Z18start_display_taskPv+0x244>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	9202      	str	r2, [sp, #8]
 80007fa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007fe:	9201      	str	r2, [sp, #4]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a67      	ldr	r2, [pc, #412]	; (80009a4 <_Z18start_display_taskPv+0x248>)
 8000808:	2100      	movs	r1, #0
 800080a:	2000      	movs	r0, #0
 800080c:	f000 fbcd 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8000810:	4b65      	ldr	r3, [pc, #404]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 8000812:	2200      	movs	r2, #0
 8000814:	9202      	str	r2, [sp, #8]
 8000816:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800081a:	9201      	str	r2, [sp, #4]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a62      	ldr	r2, [pc, #392]	; (80009ac <_Z18start_display_taskPv+0x250>)
 8000824:	211e      	movs	r1, #30
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fbbf 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 800082c:	4b60      	ldr	r3, [pc, #384]	; (80009b0 <_Z18start_display_taskPv+0x254>)
 800082e:	2200      	movs	r2, #0
 8000830:	9202      	str	r2, [sp, #8]
 8000832:	221f      	movs	r2, #31
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	9200      	str	r2, [sp, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a5d      	ldr	r2, [pc, #372]	; (80009b4 <_Z18start_display_taskPv+0x258>)
 800083e:	2154      	movs	r1, #84	; 0x54
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fbb2 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f002 fa11 	bl	8002c70 <osDelay>

	// Check colors
	ST7735_FillScreen(ST7735_BLACK);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fc66 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8000854:	4b54      	ldr	r3, [pc, #336]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 8000856:	2200      	movs	r2, #0
 8000858:	9202      	str	r2, [sp, #8]
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a54      	ldr	r2, [pc, #336]	; (80009b8 <_Z18start_display_taskPv+0x25c>)
 8000868:	2100      	movs	r1, #0
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fb9d 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 8000870:	20c8      	movs	r0, #200	; 0xc8
 8000872:	f002 f9fd 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_BLUE);
 8000876:	201f      	movs	r0, #31
 8000878:	f000 fc52 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 800087e:	221f      	movs	r2, #31
 8000880:	9202      	str	r2, [sp, #8]
 8000882:	2200      	movs	r2, #0
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a4b      	ldr	r2, [pc, #300]	; (80009bc <_Z18start_display_taskPv+0x260>)
 800088e:	2100      	movs	r1, #0
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fb8a 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 8000896:	20c8      	movs	r0, #200	; 0xc8
 8000898:	f002 f9ea 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_RED);
 800089c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80008a0:	f000 fc3e 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 80008a4:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 80008a6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008aa:	9202      	str	r2, [sp, #8]
 80008ac:	2200      	movs	r2, #0
 80008ae:	9201      	str	r2, [sp, #4]
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	9200      	str	r2, [sp, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a42      	ldr	r2, [pc, #264]	; (80009c0 <_Z18start_display_taskPv+0x264>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fb75 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 80008c0:	20c8      	movs	r0, #200	; 0xc8
 80008c2:	f002 f9d5 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_GREEN);
 80008c6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80008ca:	f000 fc29 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 80008d0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008d4:	9202      	str	r2, [sp, #8]
 80008d6:	2200      	movs	r2, #0
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <_Z18start_display_taskPv+0x268>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 fb60 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 80008ea:	20c8      	movs	r0, #200	; 0xc8
 80008ec:	f002 f9c0 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_CYAN);
 80008f0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80008f4:	f000 fc14 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 80008fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008fe:	9202      	str	r2, [sp, #8]
 8000900:	2200      	movs	r2, #0
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <_Z18start_display_taskPv+0x26c>)
 800090c:	2100      	movs	r1, #0
 800090e:	2000      	movs	r0, #0
 8000910:	f000 fb4b 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 8000914:	20c8      	movs	r0, #200	; 0xc8
 8000916:	f002 f9ab 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_MAGENTA);
 800091a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800091e:	f000 fbff 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 8000924:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000928:	9202      	str	r2, [sp, #8]
 800092a:	2200      	movs	r2, #0
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <_Z18start_display_taskPv+0x270>)
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fb36 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 800093e:	20c8      	movs	r0, #200	; 0xc8
 8000940:	f002 f996 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_YELLOW);
 8000944:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000948:	f000 fbea 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 800094e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000952:	9202      	str	r2, [sp, #8]
 8000954:	2200      	movs	r2, #0
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <_Z18start_display_taskPv+0x274>)
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fb21 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 8000968:	20c8      	movs	r0, #200	; 0xc8
 800096a:	f002 f981 	bl	8002c70 <osDelay>

	ST7735_FillScreen(ST7735_WHITE);
 800096e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000972:	f000 fbd5 	bl	8001120 <_Z17ST7735_FillScreent>
	ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <_Z18start_display_taskPv+0x24c>)
 8000978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097c:	9202      	str	r2, [sp, #8]
 800097e:	2200      	movs	r2, #0
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_Z18start_display_taskPv+0x278>)
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fb0c 	bl	8000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>
	osDelay(200);
 8000992:	20c8      	movs	r0, #200	; 0xc8
 8000994:	f002 f96c 	bl	8002c70 <osDelay>


  }
 8000998:	e6e4      	b.n	8000764 <_Z18start_display_taskPv+0x8>
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000
 80009a0:	20000004 	.word	0x20000004
 80009a4:	08005604 	.word	0x08005604
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	08005638 	.word	0x08005638
 80009b0:	20000014 	.word	0x20000014
 80009b4:	08005658 	.word	0x08005658
 80009b8:	08005664 	.word	0x08005664
 80009bc:	0800566c 	.word	0x0800566c
 80009c0:	08005674 	.word	0x08005674
 80009c4:	08005678 	.word	0x08005678
 80009c8:	08005680 	.word	0x08005680
 80009cc:	08005688 	.word	0x08005688
 80009d0:	08005690 	.word	0x08005690
 80009d4:	08005698 	.word	0x08005698

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 fbcd 	bl	8001188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40014800 	.word	0x40014800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fc97 	bl	8001380 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_SPI_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12b      	bne.n	8000ada <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_SPI_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aca:	2305      	movs	r3, #5
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_SPI_MspInit+0x8c>)
 8000ad6:	f000 fc7d 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	201a      	movs	r0, #26
 8000b06:	f000 fc3b 	bl	8001380 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b0a:	201a      	movs	r0, #26
 8000b0c:	f000 fc54 	bl	80013b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fa38 	bl	8001fac <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b3c:	f001 fa22 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8000b40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	0c9b      	lsrs	r3, r3, #18
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_InitTick+0xac>)
 8000b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b72:	f001 fcdd 	bl	8002530 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d104      	bne.n	8000b86 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b7e:	f001 fd31 	bl	80025e4 <HAL_TIM_Base_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	20005a10 	.word	0x20005a10
 8000b9c:	40014800 	.word	0x40014800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000bd2:	f001 fd69 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20005a10 	.word	0x20005a10

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c20:	4c0b      	ldr	r4, [pc, #44]	; (8000c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff ffd7 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f004 fc93 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fc4f 	bl	80004d8 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000c48:	08007fb4 	.word	0x08007fb4
  ldr r2, =_sbss
 8000c4c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000c50:	20005a9c 	.word	0x20005a9c

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <_ZL13ST7735_Selectv>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <_ZL13ST7735_Selectv+0x14>)
 8000c62:	f000 fd3b 	bl	80016dc <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020000 	.word	0x40020000

08000c70 <_Z15ST7735_Unselectv>:

void ST7735_Unselect() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <_Z15ST7735_Unselectv+0x14>)
 8000c7a:	f000 fd2f 	bl	80016dc <HAL_GPIO_WritePin>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020000 	.word	0x40020000

08000c88 <_ZL12ST7735_Resetv>:

static void ST7735_Reset() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2102      	movs	r1, #2
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <_ZL12ST7735_Resetv+0x24>)
 8000c92:	f000 fd23 	bl	80016dc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c96:	2005      	movs	r0, #5
 8000c98:	f000 fa96 	bl	80011c8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZL12ST7735_Resetv+0x24>)
 8000ca2:	f000 fd1b 	bl	80016dc <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020400 	.word	0x40020400

08000cb0 <_ZL19ST7735_WriteCommandh>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <_ZL19ST7735_WriteCommandh+0x2c>)
 8000cc0:	f000 fd0c 	bl	80016dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000cc4:	1df9      	adds	r1, r7, #7
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <_ZL19ST7735_WriteCommandh+0x30>)
 8000cce:	f001 fa28 	bl	8002122 <HAL_SPI_Transmit>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	20000044 	.word	0x20000044

08000ce4 <_ZL16ST7735_WriteDataPhj>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <_ZL16ST7735_WriteDataPhj+0x2c>)
 8000cf4:	f000 fcf2 	bl	80016dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <_ZL16ST7735_WriteDataPhj+0x30>)
 8000d04:	f001 fa0d 	bl	8002122 <HAL_SPI_Transmit>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40020400 	.word	0x40020400
 8000d14:	20000044 	.word	0x20000044

08000d18 <_ZL25ST7735_ExecuteCommandListPKh>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	73fa      	strb	r2, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bf14      	ite	ne
 8000d34:	2301      	movne	r3, #1
 8000d36:	2300      	moveq	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d035      	beq.n	8000daa <_ZL25ST7735_ExecuteCommandListPKh+0x92>
        uint8_t cmd = *addr++;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ffb0 	bl	8000cb0 <_ZL19ST7735_WriteCommandh>

        numArgs = *addr++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d6a:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000d6c:	7abb      	ldrb	r3, [r7, #10]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <_ZL25ST7735_ExecuteCommandListPKh+0x6c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d72:	7abb      	ldrb	r3, [r7, #10]
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffb4 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>
            addr += numArgs;
 8000d7c:	7abb      	ldrb	r3, [r7, #10]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000d84:	89bb      	ldrh	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0cf      	beq.n	8000d2a <_ZL25ST7735_ExecuteCommandListPKh+0x12>
            ms = *addr++;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000d94:	89bb      	ldrh	r3, [r7, #12]
 8000d96:	2bff      	cmp	r3, #255	; 0xff
 8000d98:	d102      	bne.n	8000da0 <_ZL25ST7735_ExecuteCommandListPKh+0x88>
 8000d9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d9e:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000da0:	89bb      	ldrh	r3, [r7, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fa10 	bl	80011c8 <HAL_Delay>
    while(numCommands--) {
 8000da8:	e7bf      	b.n	8000d2a <_ZL25ST7735_ExecuteCommandListPKh+0x12>
        }
    }
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_ZL23ST7735_SetAddressWindowhhhh>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000db2:	b590      	push	{r4, r7, lr}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4604      	mov	r4, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	717b      	strb	r3, [r7, #5]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000dd0:	202a      	movs	r0, #42	; 0x2a
 8000dd2:	f7ff ff6d 	bl	8000cb0 <_ZL19ST7735_WriteCommandh>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	331a      	adds	r3, #26
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	737b      	strb	r3, [r7, #13]
 8000de2:	797b      	ldrb	r3, [r7, #5]
 8000de4:	331a      	adds	r3, #26
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2104      	movs	r1, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff77 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000df6:	202b      	movs	r0, #43	; 0x2b
 8000df8:	f7ff ff5a 	bl	8000cb0 <_ZL19ST7735_WriteCommandh>
    data[1] = y0 + ST7735_YSTART;
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2104      	movs	r1, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff66 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000e18:	202c      	movs	r0, #44	; 0x2c
 8000e1a:	f7ff ff49 	bl	8000cb0 <_ZL19ST7735_WriteCommandh>
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
	...

08000e28 <_Z11ST7735_Initv>:

void ST7735_Init() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000e2c:	f7ff ff14 	bl	8000c58 <_ZL13ST7735_Selectv>
    ST7735_Reset();
 8000e30:	f7ff ff2a 	bl	8000c88 <_ZL12ST7735_Resetv>
    ST7735_ExecuteCommandList(init_cmds1);
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <_Z11ST7735_Initv+0x28>)
 8000e36:	f7ff ff6f 	bl	8000d18 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds2);
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <_Z11ST7735_Initv+0x2c>)
 8000e3c:	f7ff ff6c 	bl	8000d18 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_ExecuteCommandList(init_cmds3);
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <_Z11ST7735_Initv+0x30>)
 8000e42:	f7ff ff69 	bl	8000d18 <_ZL25ST7735_ExecuteCommandListPKh>
    ST7735_Unselect();
 8000e46:	f7ff ff13 	bl	8000c70 <_Z15ST7735_Unselectv>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08007f2c 	.word	0x08007f2c
 8000e54:	08007f68 	.word	0x08007f68
 8000e58:	08007f78 	.word	0x08007f78

08000e5c <_Z16ST7735_DrawPixelttt>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
 8000e66:	460b      	mov	r3, r1
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b4f      	cmp	r3, #79	; 0x4f
 8000e72:	d822      	bhi.n	8000eba <_Z16ST7735_DrawPixelttt+0x5e>
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	2b9f      	cmp	r3, #159	; 0x9f
 8000e78:	d81f      	bhi.n	8000eba <_Z16ST7735_DrawPixelttt+0x5e>
        return;

    ST7735_Select();
 8000e7a:	f7ff feed 	bl	8000c58 <_ZL13ST7735_Selectv>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	b2d8      	uxtb	r0, r3
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	b2d9      	uxtb	r1, r3
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f7ff ff8c 	bl	8000db2 <_ZL23ST7735_SetAddressWindowhhhh>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	121b      	asrs	r3, r3, #8
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	733b      	strb	r3, [r7, #12]
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff18 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>

    ST7735_Unselect();
 8000eb4:	f7ff fedc 	bl	8000c70 <_Z15ST7735_Unselectv>
 8000eb8:	e000      	b.n	8000ebc <_Z16ST7735_DrawPixelttt+0x60>
        return;
 8000eba:	bf00      	nop
}
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZL16ST7735_WriteCharttc7FontDeftt>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
 8000ecc:	4603      	mov	r3, r0
 8000ece:	80fb      	strh	r3, [r7, #6]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	80bb      	strh	r3, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	b2d8      	uxtb	r0, r3
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	b2d9      	uxtb	r1, r3
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ee8:	4413      	add	r3, r2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2dc      	uxtb	r4, r3
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ef8:	4413      	add	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4622      	mov	r2, r4
 8000f02:	f7ff ff56 	bl	8000db2 <_ZL23ST7735_SetAddressWindowhhhh>

    for(i = 0; i < font.height; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f0e:	461a      	mov	r2, r3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d242      	bcs.n	8000f9c <_ZL16ST7735_WriteCharttc7FontDeftt+0xda>
        b = font.data[(ch - 32) * font.height + i];
 8000f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	3b20      	subs	r3, #32
 8000f1c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000f20:	fb01 f303 	mul.w	r3, r1, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	440b      	add	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d228      	bcs.n	8000f94 <_ZL16ST7735_WriteCharttc7FontDeftt+0xd2>
            if((b << j) & 0x8000)  {
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00d      	beq.n	8000f6e <_ZL16ST7735_WriteCharttc7FontDeftt+0xac>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000f52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f54:	121b      	asrs	r3, r3, #8
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	743b      	strb	r3, [r7, #16]
 8000f5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2102      	movs	r1, #2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff febc 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>
 8000f6c:	e00e      	b.n	8000f8c <_ZL16ST7735_WriteCharttc7FontDeftt+0xca>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000f6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f72:	121b      	asrs	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	733b      	strb	r3, [r7, #12]
 8000f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff feac 	bl	8000ce4 <_ZL16ST7735_WriteDataPhj>
        for(j = 0; j < font.width; j++) {
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	e7d0      	b.n	8000f36 <_ZL16ST7735_WriteCharttc7FontDeftt+0x74>
    for(i = 0; i < font.height; i++) {
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	3301      	adds	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e7b6      	b.n	8000f0a <_ZL16ST7735_WriteCharttc7FontDeftt+0x48>
            }
        }
    }
}
 8000f9c:	bf00      	nop
 8000f9e:	3724      	adds	r7, #36	; 0x24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fa6:	b002      	add	sp, #8
 8000fa8:	4770      	bx	lr

08000faa <_Z18ST7735_WriteStringttPKc7FontDeftt>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000faa:	b082      	sub	sp, #8
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	603a      	str	r2, [r7, #0]
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000fbe:	f7ff fe4b 	bl	8000c58 <_ZL13ST7735_Selectv>

    while(*str) {
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d02f      	beq.n	800102a <_Z18ST7735_WriteStringttPKc7FontDeftt+0x80>
        if(x + font.width >= ST7735_WIDTH) {
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	7d3a      	ldrb	r2, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	2b4f      	cmp	r3, #79	; 0x4f
 8000fd2:	dd13      	ble.n	8000ffc <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
            x = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	7d7a      	ldrb	r2, [r7, #21]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2b9f      	cmp	r3, #159	; 0x9f
 8000fea:	dc1d      	bgt.n	8001028 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7e>
                break;
            }

            if(*str == ' ') {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b20      	cmp	r3, #32
 8000ff2:	d103      	bne.n	8000ffc <_Z18ST7735_WriteStringttPKc7FontDeftt+0x52>
                // skip spaces in the beginning of the new line
                str++;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	603b      	str	r3, [r7, #0]
                continue;
 8000ffa:	e014      	b.n	8001026 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x7c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	88b9      	ldrh	r1, [r7, #4]
 8001002:	88f8      	ldrh	r0, [r7, #6]
 8001004:	8c3b      	ldrh	r3, [r7, #32]
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	8bbb      	ldrh	r3, [r7, #28]
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f7ff ff56 	bl	8000ec2 <_ZL16ST7735_WriteCharttc7FontDeftt>
        x += font.width;
 8001016:	7d3b      	ldrb	r3, [r7, #20]
 8001018:	b29a      	uxth	r2, r3
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	4413      	add	r3, r2
 800101e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001026:	e7cc      	b.n	8000fc2 <_Z18ST7735_WriteStringttPKc7FontDeftt+0x18>
                break;
 8001028:	bf00      	nop
    }

    ST7735_Unselect();
 800102a:	f7ff fe21 	bl	8000c70 <_Z15ST7735_Unselectv>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001038:	b002      	add	sp, #8
 800103a:	4770      	bx	lr

0800103c <_Z20ST7735_FillRectanglettttt>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b4f      	cmp	r3, #79	; 0x4f
 800105e:	d856      	bhi.n	800110e <_Z20ST7735_FillRectanglettttt+0xd2>
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	2b9f      	cmp	r3, #159	; 0x9f
 8001064:	d853      	bhi.n	800110e <_Z20ST7735_FillRectanglettttt+0xd2>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001066:	88fa      	ldrh	r2, [r7, #6]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4413      	add	r3, r2
 800106c:	2b50      	cmp	r3, #80	; 0x50
 800106e:	dd03      	ble.n	8001078 <_Z20ST7735_FillRectanglettttt+0x3c>
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001076:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	2ba0      	cmp	r3, #160	; 0xa0
 8001080:	dd03      	ble.n	800108a <_Z20ST7735_FillRectanglettttt+0x4e>
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001088:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800108a:	f7ff fde5 	bl	8000c58 <_ZL13ST7735_Selectv>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	b2d9      	uxtb	r1, r3
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b2dc      	uxtb	r4, r3
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4622      	mov	r2, r4
 80010b8:	f7ff fe7b 	bl	8000db2 <_ZL23ST7735_SetAddressWindowhhhh>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80010bc:	8c3b      	ldrh	r3, [r7, #32]
 80010be:	121b      	asrs	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	8c3b      	ldrh	r3, [r7, #32]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2101      	movs	r1, #1
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <_Z20ST7735_FillRectanglettttt+0xdc>)
 80010d0:	f000 fb04 	bl	80016dc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80010d4:	883b      	ldrh	r3, [r7, #0]
 80010d6:	80bb      	strh	r3, [r7, #4]
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d014      	beq.n	8001108 <_Z20ST7735_FillRectanglettttt+0xcc>
        for(x = w; x > 0; x--) {
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <_Z20ST7735_FillRectanglettttt+0xc4>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80010e8:	f107 010c 	add.w	r1, r7, #12
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f0:	2202      	movs	r2, #2
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <_Z20ST7735_FillRectanglettttt+0xe0>)
 80010f4:	f001 f815 	bl	8002122 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	e7f0      	b.n	80010e2 <_Z20ST7735_FillRectanglettttt+0xa6>
    for(y = h; y > 0; y--) {
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	e7e7      	b.n	80010d8 <_Z20ST7735_FillRectanglettttt+0x9c>
        }
    }

    ST7735_Unselect();
 8001108:	f7ff fdb2 	bl	8000c70 <_Z15ST7735_Unselectv>
 800110c:	e000      	b.n	8001110 <_Z20ST7735_FillRectanglettttt+0xd4>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800110e:	bf00      	nop
}
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop
 8001118:	40020400 	.word	0x40020400
 800111c:	20000044 	.word	0x20000044

08001120 <_Z17ST7735_FillScreent>:

void ST7735_FillScreen(uint16_t color) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	2250      	movs	r2, #80	; 0x50
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff ff81 	bl	800103c <_Z20ST7735_FillRectanglettttt>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f8fc 	bl	800136a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fcbc 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fc46 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000020 	.word	0x20000020
 80011ac:	20005a58 	.word	0x20005a58

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20005a58 	.word	0x20005a58

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000020 	.word	0x20000020

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff4c 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001392:	f7ff ff61 	bl	8001258 <__NVIC_GetPriorityGrouping>
 8001396:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	6978      	ldr	r0, [r7, #20]
 800139e:	f7ff ffb1 	bl	8001304 <NVIC_EncodePriority>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff80 	bl	80012b0 <__NVIC_SetPriority>
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff54 	bl	8001274 <__NVIC_EnableIRQ>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e159      	b.n	80016a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8148 	bne.w	800169e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a2 	beq.w	800169e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b57      	ldr	r3, [pc, #348]	; (80016bc <HAL_GPIO_Init+0x2e8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a56      	ldr	r2, [pc, #344]	; (80016bc <HAL_GPIO_Init+0x2e8>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b54      	ldr	r3, [pc, #336]	; (80016bc <HAL_GPIO_Init+0x2e8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_GPIO_Init+0x2ec>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a49      	ldr	r2, [pc, #292]	; (80016c4 <HAL_GPIO_Init+0x2f0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_GPIO_Init+0x202>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_GPIO_Init+0x2f4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x1fe>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a47      	ldr	r2, [pc, #284]	; (80016cc <HAL_GPIO_Init+0x2f8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x1fa>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_GPIO_Init+0x2fc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x1f6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <HAL_GPIO_Init+0x300>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x1f2>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015d6:	2300      	movs	r3, #0
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e8:	4935      	ldr	r1, [pc, #212]	; (80016c0 <HAL_GPIO_Init+0x2ec>)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <HAL_GPIO_Init+0x304>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x304>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001644:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_GPIO_Init+0x304>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_GPIO_Init+0x304>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3301      	adds	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	f67f aea2 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	041a      	lsls	r2, r3, #16
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43d9      	mvns	r1, r3
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e264      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00c      	beq.n	8001788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4ba0      	ldr	r3, [pc, #640]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177a:	4b9d      	ldr	r3, [pc, #628]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b99      	ldr	r3, [pc, #612]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05b      	beq.n	800184c <HAL_RCC_OscConfig+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d157      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e23f      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b91      	ldr	r3, [pc, #580]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a8a      	ldr	r2, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a87      	ldr	r2, [pc, #540]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a83      	ldr	r2, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a80      	ldr	r2, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fcd8 	bl	80011b0 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fcd4 	bl	80011b0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e204      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xc0>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fcc4 	bl	80011b0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fcc0 	bl	80011b0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1f0      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b6c      	ldr	r3, [pc, #432]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0xe8>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c4      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4952      	ldr	r1, [pc, #328]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_RCC_OscConfig+0x2b0>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc79 	bl	80011b0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc75 	bl	80011b0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a5      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4940      	ldr	r1, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x2b0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc58 	bl	80011b0 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fc54 	bl	80011b0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e184      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d030      	beq.n	8001990 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x2b4>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fc38 	bl	80011b0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc34 	bl	80011b0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e164      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x200>
 8001962:	e015      	b.n	8001990 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x2b4>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fc21 	bl	80011b0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fc1d 	bl	80011b0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e14d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a0 	beq.w	8001ade <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x2b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d121      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x2b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_RCC_OscConfig+0x2b8>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fbe3 	bl	80011b0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e011      	b.n	8001a12 <HAL_RCC_OscConfig+0x2ce>
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470000 	.word	0x42470000
 80019f8:	42470e80 	.word	0x42470e80
 80019fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a00:	f7ff fbd6 	bl	80011b0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e106      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <HAL_RCC_OscConfig+0x4e4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
 8001a26:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x32a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a7a      	ldr	r2, [pc, #488]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
 8001a48:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a77      	ldr	r2, [pc, #476]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x32a>
 8001a56:	4b75      	ldr	r3, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a74      	ldr	r2, [pc, #464]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	4b72      	ldr	r3, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a71      	ldr	r2, [pc, #452]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb9b 	bl	80011b0 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb97 	bl	80011b0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0c5      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x33a>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb85 	bl	80011b0 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fb81 	bl	80011b0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0af      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a55      	ldr	r2, [pc, #340]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 809b 	beq.w	8001c1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d05c      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d141      	bne.n	8001b80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb55 	bl	80011b0 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fb51 	bl	80011b0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e081      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69da      	ldr	r2, [r3, #28]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	019b      	lsls	r3, r3, #6
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	3b01      	subs	r3, #1
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb2a 	bl	80011b0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff fb26 	bl	80011b0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e056      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x41c>
 8001b7e:	e04e      	b.n	8001c1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fb13 	bl	80011b0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff fb0f 	bl	80011b0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e03f      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x44a>
 8001bac:	e037      	b.n	8001c1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e032      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d028      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d121      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d11a      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d111      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	42470060 	.word	0x42470060

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0cc      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d90c      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d044      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff fa44 	bl	80011b0 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff fa40 	bl	80011b0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fe88 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08005700 	.word	0x08005700
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	2000001c 	.word	0x2000001c

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e06:	2100      	movs	r1, #0
 8001e08:	6079      	str	r1, [r7, #4]
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	60f9      	str	r1, [r7, #12]
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e12:	2100      	movs	r1, #0
 8001e14:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e16:	4952      	ldr	r1, [pc, #328]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e18:	6889      	ldr	r1, [r1, #8]
 8001e1a:	f001 010c 	and.w	r1, r1, #12
 8001e1e:	2908      	cmp	r1, #8
 8001e20:	d00d      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x3e>
 8001e22:	2908      	cmp	r1, #8
 8001e24:	f200 8094 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x150>
 8001e28:	2900      	cmp	r1, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x32>
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d003      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x38>
 8001e30:	e08e      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e34:	60bb      	str	r3, [r7, #8]
       break;
 8001e36:	e08e      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e3a:	60bb      	str	r3, [r7, #8]
      break;
 8001e3c:	e08b      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3e:	4948      	ldr	r1, [pc, #288]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e40:	6849      	ldr	r1, [r1, #4]
 8001e42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e46:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e48:	4945      	ldr	r1, [pc, #276]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e4a:	6849      	ldr	r1, [r1, #4]
 8001e4c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e50:	2900      	cmp	r1, #0
 8001e52:	d024      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e54:	4942      	ldr	r1, [pc, #264]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e56:	6849      	ldr	r1, [r1, #4]
 8001e58:	0989      	lsrs	r1, r1, #6
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e64:	f04f 0500 	mov.w	r5, #0
 8001e68:	ea00 0204 	and.w	r2, r0, r4
 8001e6c:	ea01 0305 	and.w	r3, r1, r5
 8001e70:	493d      	ldr	r1, [pc, #244]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e72:	fb01 f003 	mul.w	r0, r1, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	fb01 f102 	mul.w	r1, r1, r2
 8001e7c:	1844      	adds	r4, r0, r1
 8001e7e:	493a      	ldr	r1, [pc, #232]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e80:	fba2 0101 	umull	r0, r1, r2, r1
 8001e84:	1863      	adds	r3, r4, r1
 8001e86:	4619      	mov	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	f7fe f9a6 	bl	80001e0 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e04a      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	ea02 0400 	and.w	r4, r2, r0
 8001eb6:	ea03 0501 	and.w	r5, r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	014b      	lsls	r3, r1, #5
 8001ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ecc:	0142      	lsls	r2, r0, #5
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	1b00      	subs	r0, r0, r4
 8001ed4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	018b      	lsls	r3, r1, #6
 8001ee2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ee6:	0182      	lsls	r2, r0, #6
 8001ee8:	1a12      	subs	r2, r2, r0
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	00d9      	lsls	r1, r3, #3
 8001ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001efc:	00d0      	lsls	r0, r2, #3
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	1912      	adds	r2, r2, r4
 8001f04:	eb45 0303 	adc.w	r3, r5, r3
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0299      	lsls	r1, r3, #10
 8001f12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f16:	0290      	lsls	r0, r2, #10
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	f7fe f95a 	bl	80001e0 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	60bb      	str	r3, [r7, #8]
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f52:	60bb      	str	r3, [r7, #8]
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	68bb      	ldr	r3, [r7, #8]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	017d7840 	.word	0x017d7840

08001f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0b5b      	lsrs	r3, r3, #13
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08005710 	.word	0x08005710

08001fac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	220f      	movs	r2, #15
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_GetClockConfig+0x60>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07b      	b.n	800211a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002032:	d009      	beq.n	8002048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
 800203a:	e005      	b.n	8002048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fcfc 	bl	8000a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	ea42 0103 	orr.w	r1, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0104 	and.w	r1, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f003 0210 	and.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_SPI_Transmit+0x22>
 8002140:	2302      	movs	r3, #2
 8002142:	e126      	b.n	8002392 <HAL_SPI_Transmit+0x270>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800214c:	f7ff f830 	bl	80011b0 <HAL_GetTick>
 8002150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d002      	beq.n	8002168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002166:	e10b      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Transmit+0x52>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002178:	e102      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	d10f      	bne.n	80021e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d007      	beq.n	8002200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002208:	d14b      	bne.n	80022a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Transmit+0xf6>
 8002212:	8afb      	ldrh	r3, [r7, #22]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d13e      	bne.n	8002296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	881a      	ldrh	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	1c9a      	adds	r2, r3, #2
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800223c:	e02b      	b.n	8002296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d112      	bne.n	8002272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002270:	e011      	b.n	8002296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002272:	f7fe ff9d 	bl	80011b0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d803      	bhi.n	800228a <HAL_SPI_Transmit+0x168>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002288:	d102      	bne.n	8002290 <HAL_SPI_Transmit+0x16e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002294:	e074      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ce      	bne.n	800223e <HAL_SPI_Transmit+0x11c>
 80022a0:	e04c      	b.n	800233c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_SPI_Transmit+0x18e>
 80022aa:	8afb      	ldrh	r3, [r7, #22]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d140      	bne.n	8002332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022d6:	e02c      	b.n	8002332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d113      	bne.n	800230e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	86da      	strh	r2, [r3, #54]	; 0x36
 800230c:	e011      	b.n	8002332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800230e:	f7fe ff4f 	bl	80011b0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d803      	bhi.n	8002326 <HAL_SPI_Transmit+0x204>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d102      	bne.n	800232c <HAL_SPI_Transmit+0x20a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002330:	e026      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1cd      	bne.n	80022d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	6839      	ldr	r1, [r7, #0]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f8b3 	bl	80024ac <SPI_EndRxTxTransaction>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	e000      	b.n	8002380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800237e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023ac:	f7fe ff00 	bl	80011b0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023bc:	f7fe fef8 	bl	80011b0 <HAL_GetTick>
 80023c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d2:	e054      	b.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023da:	d050      	beq.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023dc:	f7fe fee8 	bl	80011b0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d902      	bls.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13d      	bne.n	800246e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800240a:	d111      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002414:	d004      	beq.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d107      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d10f      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e017      	b.n	800249e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3b01      	subs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d19b      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <SPI_EndRxTxTransaction+0x7c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <SPI_EndRxTxTransaction+0x80>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0d5b      	lsrs	r3, r3, #21
 80024c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d112      	bne.n	80024fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff ff5a 	bl	800239c <SPI_WaitFlagStateUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0220 	orr.w	r2, r3, #32
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00f      	b.n	800251e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b01      	subs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d0f2      	beq.n	80024fe <SPI_EndRxTxTransaction+0x52>
 8002518:	e000      	b.n	800251c <SPI_EndRxTxTransaction+0x70>
        break;
 800251a:	bf00      	nop
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	165e9f81 	.word	0x165e9f81

08002530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e041      	b.n	80025c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f839 	bl	80025ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f000 f9ca 	bl	8002908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d001      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e044      	b.n	8002686 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_TIM_Base_Start_IT+0xb0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d018      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x6c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d013      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x6c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_TIM_Base_Start_IT+0xb4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00e      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x6c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_TIM_Base_Start_IT+0xb8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x6c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x6c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d111      	bne.n	8002674 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b06      	cmp	r3, #6
 8002660:	d010      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002672:	e007      	b.n	8002684 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800
 80026a0:	40000c00 	.word	0x40000c00
 80026a4:	40014000 	.word	0x40014000

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0202 	mvn.w	r2, #2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8ee 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8e0 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8f1 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8c4 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8b6 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8c7 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0208 	mvn.w	r2, #8
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f89a 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f88c 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f89d 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0210 	mvn.w	r2, #16
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2208      	movs	r2, #8
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f870 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f862 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f873 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0201 	mvn.w	r2, #1
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe f8d6 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8e2 	bl	8002a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f838 	bl	80028f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0220 	mvn.w	r2, #32
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8ac 	bl	8002a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a34      	ldr	r2, [pc, #208]	; (80029ec <TIM_Base_SetConfig+0xe4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00f      	beq.n	8002940 <TIM_Base_SetConfig+0x38>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d00b      	beq.n	8002940 <TIM_Base_SetConfig+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <TIM_Base_SetConfig+0xe8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <TIM_Base_SetConfig+0x38>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <TIM_Base_SetConfig+0xec>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0x38>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a2f      	ldr	r2, [pc, #188]	; (80029f8 <TIM_Base_SetConfig+0xf0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d108      	bne.n	8002952 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01b      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d017      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_Base_SetConfig+0xe8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <TIM_Base_SetConfig+0xec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00f      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <TIM_Base_SetConfig+0xf0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00b      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <TIM_Base_SetConfig+0xf4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <TIM_Base_SetConfig+0xf8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d003      	beq.n	8002992 <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_Base_SetConfig+0xfc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d108      	bne.n	80029a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <TIM_Base_SetConfig+0xe4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d103      	bne.n	80029d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	615a      	str	r2, [r3, #20]
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40010000 	.word	0x40010000
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800

08002a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriority>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	; (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	; (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Handler+0x1c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a8c:	f001 fcfe 	bl	800448c <xTaskGetSchedulerState>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a96:	f002 fae7 	bl	8005068 <xPortSysTickHandler>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f06f 0004 	mvn.w	r0, #4
 8002aae:	f7ff ffbf 	bl	8002a30 <__NVIC_SetPriority>
#endif
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002abe:	f3ef 8305 	mrs	r3, IPSR
 8002ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aca:	f06f 0305 	mvn.w	r3, #5
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	e00c      	b.n	8002aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <osKernelInitialize+0x44>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <osKernelInitialize+0x44>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	e002      	b.n	8002aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20001100 	.word	0x20001100

08002b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b06:	f3ef 8305 	mrs	r3, IPSR
 8002b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b12:	f06f 0305 	mvn.w	r3, #5
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	e010      	b.n	8002b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <osKernelStart+0x48>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d109      	bne.n	8002b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b22:	f7ff ffbf 	bl	8002aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <osKernelStart+0x48>)
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b2c:	f001 f866 	bl	8003bfc <vTaskStartScheduler>
      stat = osOK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	e002      	b.n	8002b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20001100 	.word	0x20001100

08002b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b5c:	f3ef 8305 	mrs	r3, IPSR
 8002b60:	617b      	str	r3, [r7, #20]
  return(result);
 8002b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d17e      	bne.n	8002c66 <osThreadNew+0x11a>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07b      	beq.n	8002c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b72:	2318      	movs	r3, #24
 8002b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d045      	beq.n	8002c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <osThreadNew+0x48>
        name = attr->name;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <osThreadNew+0x6e>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b38      	cmp	r3, #56	; 0x38
 8002bac:	d805      	bhi.n	8002bba <osThreadNew+0x6e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <osThreadNew+0x72>
        return (NULL);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e054      	b.n	8002c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <osThreadNew+0xa8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b5b      	cmp	r3, #91	; 0x5b
 8002bdc:	d90a      	bls.n	8002bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <osThreadNew+0xa8>
        mem = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e010      	b.n	8002c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <osThreadNew+0xca>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <osThreadNew+0xca>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <osThreadNew+0xca>
          mem = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e001      	b.n	8002c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d110      	bne.n	8002c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c24:	9202      	str	r2, [sp, #8]
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fe0c 	bl	8003850 <xTaskCreateStatic>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e013      	b.n	8002c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d110      	bne.n	8002c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fe57 	bl	800390a <xTaskCreate>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <osThreadNew+0x11a>
            hTask = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c66:	693b      	ldr	r3, [r7, #16]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c78:	f3ef 8305 	mrs	r3, IPSR
 8002c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <osDelay+0x1c>
    stat = osErrorISR;
 8002c84:	f06f 0305 	mvn.w	r3, #5
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e007      	b.n	8002c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 ff7c 	bl	8003b94 <vTaskDelay>
    }
  }

  return (stat);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8002cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20001104 	.word	0x20001104
 8002cd8:	20001160 	.word	0x20001160

08002cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <vApplicationGetTimerTaskMemory+0x30>)
 8002cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	20001360 	.word	0x20001360
 8002d0c:	200013bc 	.word	0x200013bc

08002d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0208 	add.w	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f103 0208 	add.w	r2, r3, #8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc8:	d103      	bne.n	8002dd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e00c      	b.n	8002dec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e002      	b.n	8002de0 <vListInsert+0x2e>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d2f6      	bcs.n	8002dda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6852      	ldr	r2, [r2, #4]
 8002e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d103      	bne.n	8002e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ea2:	f002 f84f 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	441a      	add	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	22ff      	movs	r2, #255	; 0xff
 8002ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d114      	bne.n	8002f22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01a      	beq.n	8002f36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3310      	adds	r3, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f903 	bl	8004110 <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <xQueueGenericReset+0xcc>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	e009      	b.n	8002f36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3310      	adds	r3, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fef2 	bl	8002d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff feed 	bl	8002d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f36:	f002 f835 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	; 0x38
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <xQueueGenericCreateStatic+0x52>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <xQueueGenericCreateStatic+0x56>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericCreateStatic+0x58>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <xQueueGenericCreateStatic+0x7e>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <xQueueGenericCreateStatic+0x82>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <xQueueGenericCreateStatic+0x84>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	61fb      	str	r3, [r7, #28]
}
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fe6:	2350      	movs	r3, #80	; 0x50
 8002fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b50      	cmp	r3, #80	; 0x50
 8002fee:	d00a      	beq.n	8003006 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61bb      	str	r3, [r7, #24]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800301a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f805 	bl	8003038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003030:	4618      	mov	r0, r3
 8003032:	3730      	adds	r7, #48	; 0x30
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e002      	b.n	800305a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003066:	2101      	movs	r1, #1
 8003068:	69b8      	ldr	r0, [r7, #24]
 800306a:	f7ff ff05 	bl	8002e78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08e      	sub	sp, #56	; 0x38
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericSend+0x32>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <xQueueGenericSend+0x40>
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <xQueueGenericSend+0x44>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <xQueueGenericSend+0x46>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <xQueueGenericSend+0x60>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d103      	bne.n	80030ee <xQueueGenericSend+0x6e>
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <xQueueGenericSend+0x72>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <xQueueGenericSend+0x74>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <xQueueGenericSend+0x8e>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	623b      	str	r3, [r7, #32]
}
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800310e:	f001 f9bd 	bl	800448c <xTaskGetSchedulerState>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <xQueueGenericSend+0x9e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <xQueueGenericSend+0xa2>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <xQueueGenericSend+0xa4>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <xQueueGenericSend+0xbe>
	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	61fb      	str	r3, [r7, #28]
}
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800313e:	f001 ff01 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <xQueueGenericSend+0xd4>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d129      	bne.n	80031a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315a:	f000 fa0b 	bl	8003574 <prvCopyDataToQueue>
 800315e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	3324      	adds	r3, #36	; 0x24
 800316c:	4618      	mov	r0, r3
 800316e:	f000 ffcf 	bl	8004110 <xTaskRemoveFromEventList>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003178:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <xQueueGenericSend+0x1f8>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	e00a      	b.n	80031a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <xQueueGenericSend+0x1f8>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031a0:	f001 ff00 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e063      	b.n	8003270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ae:	f001 fef9 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e05c      	b.n	8003270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 f809 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ca:	f001 feeb 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031ce:	f000 fd7b 	bl	8003cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d2:	f001 feb7 	bl	8004f44 <vPortEnterCritical>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e2:	d103      	bne.n	80031ec <xQueueGenericSend+0x16c>
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f8:	d103      	bne.n	8003202 <xQueueGenericSend+0x182>
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003202:	f001 fecf 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003206:	1d3a      	adds	r2, r7, #4
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fff8 	bl	8004204 <xTaskCheckForTimeOut>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d124      	bne.n	8003264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800321a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800321c:	f000 faa2 	bl	8003764 <prvIsQueueFull>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	3310      	adds	r3, #16
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 ff1e 	bl	8004070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003236:	f000 fa2d 	bl	8003694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800323a:	f000 fd53 	bl	8003ce4 <xTaskResumeAll>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f af7c 	bne.w	800313e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <xQueueGenericSend+0x1f8>)
 8003248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	e772      	b.n	800313e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325a:	f000 fa1b 	bl	8003694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800325e:	f000 fd41 	bl	8003ce4 <xTaskResumeAll>
 8003262:	e76c      	b.n	800313e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003266:	f000 fa15 	bl	8003694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800326a:	f000 fd3b 	bl	8003ce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800326e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003270:	4618      	mov	r0, r3
 8003272:	3738      	adds	r7, #56	; 0x38
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b090      	sub	sp, #64	; 0x40
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <xQueueGenericSendFromISR+0x3c>
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <xQueueGenericSendFromISR+0x40>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <xQueueGenericSendFromISR+0x42>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d103      	bne.n	80032e6 <xQueueGenericSendFromISR+0x6a>
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <xQueueGenericSendFromISR+0x6e>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <xQueueGenericSendFromISR+0x70>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	623b      	str	r3, [r7, #32]
}
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003306:	f001 feff 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800330a:	f3ef 8211 	mrs	r2, BASEPRI
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	61fa      	str	r2, [r7, #28]
 8003320:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <xQueueGenericSendFromISR+0xbc>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d12f      	bne.n	8003398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800334e:	f000 f911 	bl	8003574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335a:	d112      	bne.n	8003382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fed1 	bl	8004110 <xTaskRemoveFromEventList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e007      	b.n	8003392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003386:	3301      	adds	r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	b25a      	sxtb	r2, r3
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003392:	2301      	movs	r3, #1
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003396:	e001      	b.n	800339c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3740      	adds	r7, #64	; 0x40
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <xQueueReceive+0x30>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	623b      	str	r3, [r7, #32]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <xQueueReceive+0x3e>
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <xQueueReceive+0x42>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <xQueueReceive+0x44>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xQueueReceive+0x5e>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	61fb      	str	r3, [r7, #28]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003412:	f001 f83b 	bl	800448c <xTaskGetSchedulerState>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <xQueueReceive+0x6e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <xQueueReceive+0x72>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <xQueueReceive+0x74>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xQueueReceive+0x8e>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	61bb      	str	r3, [r7, #24]
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003442:	f001 fd7f 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01f      	beq.n	8003492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003456:	f000 f8f7 	bl	8003648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00f      	beq.n	800348a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	3310      	adds	r3, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fe4e 	bl	8004110 <xTaskRemoveFromEventList>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <xQueueReceive+0x1bc>)
 800347c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800348a:	f001 fd8b 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 800348e:	2301      	movs	r3, #1
 8003490:	e069      	b.n	8003566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003498:	f001 fd84 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800349c:	2300      	movs	r3, #0
 800349e:	e062      	b.n	8003566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fe94 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b4:	f001 fd76 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b8:	f000 fc06 	bl	8003cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034bc:	f001 fd42 	bl	8004f44 <vPortEnterCritical>
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034cc:	d103      	bne.n	80034d6 <xQueueReceive+0x122>
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e2:	d103      	bne.n	80034ec <xQueueReceive+0x138>
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ec:	f001 fd5a 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034f0:	1d3a      	adds	r2, r7, #4
 80034f2:	f107 0310 	add.w	r3, r7, #16
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe83 	bl	8004204 <xTaskCheckForTimeOut>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d123      	bne.n	800354c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003506:	f000 f917 	bl	8003738 <prvIsQueueEmpty>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fda9 	bl	8004070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800351e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003520:	f000 f8b8 	bl	8003694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003524:	f000 fbde 	bl	8003ce4 <xTaskResumeAll>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d189      	bne.n	8003442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <xQueueReceive+0x1bc>)
 8003530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	e780      	b.n	8003442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003542:	f000 f8a7 	bl	8003694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003546:	f000 fbcd 	bl	8003ce4 <xTaskResumeAll>
 800354a:	e77a      	b.n	8003442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800354c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800354e:	f000 f8a1 	bl	8003694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003552:	f000 fbc7 	bl	8003ce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003558:	f000 f8ee 	bl	8003738 <prvIsQueueEmpty>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f43f af6f 	beq.w	8003442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003566:	4618      	mov	r0, r3
 8003568:	3730      	adds	r7, #48	; 0x30
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d14d      	bne.n	8003636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff92 	bl	80044c8 <xTaskPriorityDisinherit>
 80035a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e043      	b.n	8003636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d119      	bne.n	80035e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6858      	ldr	r0, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	461a      	mov	r2, r3
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	f001 fff0 	bl	80055a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d32b      	bcc.n	8003636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e026      	b.n	8003636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68d8      	ldr	r0, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	461a      	mov	r2, r3
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	f001 ffd6 	bl	80055a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	425b      	negs	r3, r3
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d207      	bcs.n	8003624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	425b      	negs	r3, r3
 800361e:	441a      	add	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d105      	bne.n	8003636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	3b01      	subs	r3, #1
 8003634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d303      	bcc.n	800367c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	461a      	mov	r2, r3
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	f001 ff8c 	bl	80055a4 <memcpy>
	}
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800369c:	f001 fc52 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a8:	e011      	b.n	80036ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd2a 	bl	8004110 <xTaskRemoveFromEventList>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036c2:	f000 fe01 	bl	80042c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	dce9      	bgt.n	80036aa <prvUnlockQueue+0x16>
 80036d6:	e000      	b.n	80036da <prvUnlockQueue+0x46>
					break;
 80036d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036e2:	f001 fc5f 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036e6:	f001 fc2d 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f2:	e011      	b.n	8003718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3310      	adds	r3, #16
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fd05 	bl	8004110 <xTaskRemoveFromEventList>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800370c:	f000 fddc 	bl	80042c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	3b01      	subs	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800371c:	2b00      	cmp	r3, #0
 800371e:	dce9      	bgt.n	80036f4 <prvUnlockQueue+0x60>
 8003720:	e000      	b.n	8003724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	22ff      	movs	r2, #255	; 0xff
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800372c:	f001 fc3a 	bl	8004fa4 <vPortExitCritical>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003740:	f001 fc00 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e001      	b.n	8003756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003756:	f001 fc25 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800376c:	f001 fbea 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	429a      	cmp	r2, r3
 800377a:	d102      	bne.n	8003782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e001      	b.n	8003786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003786:	f001 fc0d 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e014      	b.n	80037ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <vQueueAddToRegistry+0x50>)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <vQueueAddToRegistry+0x50>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <vQueueAddToRegistry+0x50>)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037c6:	e006      	b.n	80037d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3301      	adds	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b07      	cmp	r3, #7
 80037d2:	d9e7      	bls.n	80037a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20005a5c 	.word	0x20005a5c

080037e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037f8:	f001 fba4 	bl	8004f44 <vPortEnterCritical>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003802:	b25b      	sxtb	r3, r3
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003808:	d103      	bne.n	8003812 <vQueueWaitForMessageRestricted+0x2a>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003818:	b25b      	sxtb	r3, r3
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381e:	d103      	bne.n	8003828 <vQueueWaitForMessageRestricted+0x40>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003828:	f001 fbbc 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fc3b 	bl	80040b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff ff26 	bl	8003694 <prvUnlockQueue>
	}
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	; 0x38
 8003854:	af04      	add	r7, sp, #16
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	623b      	str	r3, [r7, #32]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xTaskCreateStatic+0x46>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	61fb      	str	r3, [r7, #28]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003896:	235c      	movs	r3, #92	; 0x5c
 8003898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b5c      	cmp	r3, #92	; 0x5c
 800389e:	d00a      	beq.n	80038b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	61bb      	str	r3, [r7, #24]
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01e      	beq.n	80038fc <xTaskCreateStatic+0xac>
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038d6:	2300      	movs	r3, #0
 80038d8:	9303      	str	r3, [sp, #12]
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	9302      	str	r3, [sp, #8]
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f850 	bl	8003994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f6:	f000 f8dd 	bl	8003ab4 <prvAddNewTaskToReadyList>
 80038fa:	e001      	b.n	8003900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003900:	697b      	ldr	r3, [r7, #20]
	}
 8003902:	4618      	mov	r0, r3
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08c      	sub	sp, #48	; 0x30
 800390e:	af04      	add	r7, sp, #16
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fc32 	bl	8005188 <pvPortMalloc>
 8003924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800392c:	205c      	movs	r0, #92	; 0x5c
 800392e:	f001 fc2b 	bl	8005188 <pvPortMalloc>
 8003932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
 8003940:	e005      	b.n	800394e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f001 fcec 	bl	8005320 <vPortFree>
 8003948:	e001      	b.n	800394e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	2300      	movs	r3, #0
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	9302      	str	r3, [sp, #8]
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f80e 	bl	8003994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003978:	69f8      	ldr	r0, [r7, #28]
 800397a:	f000 f89b 	bl	8003ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800397e:	2301      	movs	r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e002      	b.n	800398a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800398a:	69bb      	ldr	r3, [r7, #24]
	}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	461a      	mov	r2, r3
 80039ac:	21a5      	movs	r1, #165	; 0xa5
 80039ae:	f001 fe07 	bl	80055c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039bc:	3b01      	subs	r3, #1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	617b      	str	r3, [r7, #20]
}
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01f      	beq.n	8003a32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e012      	b.n	8003a1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	7819      	ldrb	r1, [r3, #0]
 8003a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	3334      	adds	r3, #52	; 0x34
 8003a08:	460a      	mov	r2, r1
 8003a0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d9e9      	bls.n	80039f8 <prvInitialiseNewTask+0x64>
 8003a24:	e000      	b.n	8003a28 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a30:	e003      	b.n	8003a3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	2b37      	cmp	r3, #55	; 0x37
 8003a3e:	d901      	bls.n	8003a44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a40:	2337      	movs	r3, #55	; 0x37
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f978 	bl	8002d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f973 	bl	8002d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	69b8      	ldr	r0, [r7, #24]
 8003a94:	f001 f928 	bl	8004ce8 <pxPortInitialiseStack>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aaa:	bf00      	nop
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003abc:	f001 fa42 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <prvAddNewTaskToReadyList+0xc4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <prvAddNewTaskToReadyList+0xc4>)
 8003ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <prvAddNewTaskToReadyList+0xc8>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <prvAddNewTaskToReadyList+0xc4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d110      	bne.n	8003b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ae0:	f000 fc16 	bl	8004310 <prvInitialiseTaskLists>
 8003ae4:	e00d      	b.n	8003b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ae6:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <prvAddNewTaskToReadyList+0xcc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <prvAddNewTaskToReadyList+0xc8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d802      	bhi.n	8003b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003afc:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <prvAddNewTaskToReadyList+0xc8>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <prvAddNewTaskToReadyList+0xd0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <prvAddNewTaskToReadyList+0xd0>)
 8003b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <prvAddNewTaskToReadyList+0xd0>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <prvAddNewTaskToReadyList+0xd4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d903      	bls.n	8003b28 <prvAddNewTaskToReadyList+0x74>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <prvAddNewTaskToReadyList+0xd4>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <prvAddNewTaskToReadyList+0xd8>)
 8003b36:	441a      	add	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7ff f913 	bl	8002d6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b44:	f001 fa2e 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <prvAddNewTaskToReadyList+0xcc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <prvAddNewTaskToReadyList+0xc8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d207      	bcs.n	8003b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <prvAddNewTaskToReadyList+0xdc>)
 8003b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20001c90 	.word	0x20001c90
 8003b7c:	200017bc 	.word	0x200017bc
 8003b80:	20001c9c 	.word	0x20001c9c
 8003b84:	20001cac 	.word	0x20001cac
 8003b88:	20001c98 	.word	0x20001c98
 8003b8c:	200017c0 	.word	0x200017c0
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d017      	beq.n	8003bd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <vTaskDelay+0x60>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <vTaskDelay+0x30>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60bb      	str	r3, [r7, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bc4:	f000 f880 	bl	8003cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bc8:	2100      	movs	r1, #0
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fcea 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bd0:	f000 f888 	bl	8003ce4 <xTaskResumeAll>
 8003bd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <vTaskDelay+0x64>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20001cb8 	.word	0x20001cb8
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c0a:	463a      	mov	r2, r7
 8003c0c:	1d39      	adds	r1, r7, #4
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f848 	bl	8002ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	9202      	str	r2, [sp, #8]
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	4921      	ldr	r1, [pc, #132]	; (8003cb0 <vTaskStartScheduler+0xb4>)
 8003c2c:	4821      	ldr	r0, [pc, #132]	; (8003cb4 <vTaskStartScheduler+0xb8>)
 8003c2e:	f7ff fe0f 	bl	8003850 <xTaskCreateStatic>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <vTaskStartScheduler+0xbc>)
 8003c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c38:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <vTaskStartScheduler+0xbc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e001      	b.n	8003c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d102      	bne.n	8003c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c50:	f000 fcfc 	bl	800464c <xTimerCreateTimerTask>
 8003c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d116      	bne.n	8003c8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	613b      	str	r3, [r7, #16]
}
 8003c6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <vTaskStartScheduler+0xc0>)
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <vTaskStartScheduler+0xc4>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <vTaskStartScheduler+0xc8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c84:	f001 f8bc 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c88:	e00e      	b.n	8003ca8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c90:	d10a      	bne.n	8003ca8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60fb      	str	r3, [r7, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <vTaskStartScheduler+0xaa>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	080056a0 	.word	0x080056a0
 8003cb4:	080042e1 	.word	0x080042e1
 8003cb8:	20001cb4 	.word	0x20001cb4
 8003cbc:	20001cb0 	.word	0x20001cb0
 8003cc0:	20001c9c 	.word	0x20001c9c
 8003cc4:	20001c94 	.word	0x20001c94

08003cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vTaskSuspendAll+0x18>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <vTaskSuspendAll+0x18>)
 8003cd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	20001cb8 	.word	0x20001cb8

08003ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cf2:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <xTaskResumeAll+0x118>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	603b      	str	r3, [r7, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d10:	f001 f918 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d14:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <xTaskResumeAll+0x118>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	4a38      	ldr	r2, [pc, #224]	; (8003dfc <xTaskResumeAll+0x118>)
 8003d1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <xTaskResumeAll+0x118>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d162      	bne.n	8003dec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <xTaskResumeAll+0x11c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d05e      	beq.n	8003dec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d2e:	e02f      	b.n	8003d90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <xTaskResumeAll+0x120>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f871 	bl	8002e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f86c 	bl	8002e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <xTaskResumeAll+0x124>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d903      	bls.n	8003d60 <xTaskResumeAll+0x7c>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <xTaskResumeAll+0x124>)
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <xTaskResumeAll+0x128>)
 8003d6e:	441a      	add	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fe fff7 	bl	8002d6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <xTaskResumeAll+0x12c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <xTaskResumeAll+0x130>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d90:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <xTaskResumeAll+0x120>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1cb      	bne.n	8003d30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d9e:	f000 fb55 	bl	800444c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <xTaskResumeAll+0x134>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dae:	f000 f847 	bl	8003e40 <xTaskIncrementTick>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <xTaskResumeAll+0x130>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f1      	bne.n	8003dae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <xTaskResumeAll+0x134>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <xTaskResumeAll+0x130>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <xTaskResumeAll+0x138>)
 8003dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dec:	f001 f8da 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003df0:	68bb      	ldr	r3, [r7, #8]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20001cb8 	.word	0x20001cb8
 8003e00:	20001c90 	.word	0x20001c90
 8003e04:	20001c50 	.word	0x20001c50
 8003e08:	20001c98 	.word	0x20001c98
 8003e0c:	200017c0 	.word	0x200017c0
 8003e10:	200017bc 	.word	0x200017bc
 8003e14:	20001ca4 	.word	0x20001ca4
 8003e18:	20001ca0 	.word	0x20001ca0
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <xTaskGetTickCount+0x1c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e2c:	687b      	ldr	r3, [r7, #4]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20001c94 	.word	0x20001c94

08003e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <xTaskIncrementTick+0x148>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 808f 	bne.w	8003f72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e54:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <xTaskIncrementTick+0x14c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <xTaskIncrementTick+0x14c>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d120      	bne.n	8003eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e68:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	603b      	str	r3, [r7, #0]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <xTaskIncrementTick+0x46>
 8003e88:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <xTaskIncrementTick+0x154>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3f      	ldr	r2, [pc, #252]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <xTaskIncrementTick+0x154>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <xTaskIncrementTick+0x158>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <xTaskIncrementTick+0x158>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f000 fad1 	bl	800444c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d349      	bcc.n	8003f48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec4:	601a      	str	r2, [r3, #0]
					break;
 8003ec6:	e03f      	b.n	8003f48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d203      	bcs.n	8003ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ee6:	e02f      	b.n	8003f48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe ff99 	bl	8002e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3318      	adds	r3, #24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe ff90 	bl	8002e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <xTaskIncrementTick+0x160>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d903      	bls.n	8003f18 <xTaskIncrementTick+0xd8>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <xTaskIncrementTick+0x160>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <xTaskIncrementTick+0x164>)
 8003f26:	441a      	add	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fe ff1b 	bl	8002d6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <xTaskIncrementTick+0x168>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d3b8      	bcc.n	8003eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f46:	e7b5      	b.n	8003eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <xTaskIncrementTick+0x168>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4915      	ldr	r1, [pc, #84]	; (8003fa4 <xTaskIncrementTick+0x164>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d901      	bls.n	8003f64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <xTaskIncrementTick+0x16c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e004      	b.n	8003f7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <xTaskIncrementTick+0x170>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <xTaskIncrementTick+0x170>)
 8003f7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20001cb8 	.word	0x20001cb8
 8003f8c:	20001c94 	.word	0x20001c94
 8003f90:	20001c48 	.word	0x20001c48
 8003f94:	20001c4c 	.word	0x20001c4c
 8003f98:	20001ca8 	.word	0x20001ca8
 8003f9c:	20001cb0 	.word	0x20001cb0
 8003fa0:	20001c98 	.word	0x20001c98
 8003fa4:	200017c0 	.word	0x200017c0
 8003fa8:	200017bc 	.word	0x200017bc
 8003fac:	20001ca4 	.word	0x20001ca4
 8003fb0:	20001ca0 	.word	0x20001ca0

08003fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <vTaskSwitchContext+0xa8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <vTaskSwitchContext+0xac>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fc8:	e041      	b.n	800404e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <vTaskSwitchContext+0xac>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <vTaskSwitchContext+0xb0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e010      	b.n	8003ffa <vTaskSwitchContext+0x46>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <vTaskSwitchContext+0x3e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <vTaskSwitchContext+0xb4>)
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0e4      	beq.n	8003fd8 <vTaskSwitchContext+0x24>
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <vTaskSwitchContext+0xb4>)
 800401a:	4413      	add	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3308      	adds	r3, #8
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <vTaskSwitchContext+0x8a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <vTaskSwitchContext+0xb8>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4a06      	ldr	r2, [pc, #24]	; (8004064 <vTaskSwitchContext+0xb0>)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6013      	str	r3, [r2, #0]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20001cb8 	.word	0x20001cb8
 8004060:	20001ca4 	.word	0x20001ca4
 8004064:	20001c98 	.word	0x20001c98
 8004068:	200017c0 	.word	0x200017c0
 800406c:	200017bc 	.word	0x200017bc

08004070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <vTaskPlaceOnEventList+0x44>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3318      	adds	r3, #24
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fe87 	bl	8002db2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a4:	2101      	movs	r1, #1
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f000 fa7c 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200017bc 	.word	0x200017bc

080040b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <vTaskPlaceOnEventListRestricted+0x54>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fe fe3e 	bl	8002d6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f000 fa51 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
	}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200017bc 	.word	0x200017bc

08004110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3318      	adds	r3, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fe6f 	bl	8002e24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <xTaskRemoveFromEventList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fe66 	bl	8002e24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <xTaskRemoveFromEventList+0x5c>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <xTaskRemoveFromEventList+0xb8>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fdf1 	bl	8002d6a <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <xTaskRemoveFromEventList+0xbc>)
 8004192:	f7fe fdea 	bl	8002d6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTaskRemoveFromEventList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <xTaskRemoveFromEventList+0xc4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20001cb8 	.word	0x20001cb8
 80041c4:	20001c98 	.word	0x20001c98
 80041c8:	200017c0 	.word	0x200017c0
 80041cc:	20001c50 	.word	0x20001c50
 80041d0:	200017bc 	.word	0x200017bc
 80041d4:	20001ca4 	.word	0x20001ca4

080041d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <vTaskInternalSetTimeOutState+0x24>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <vTaskInternalSetTimeOutState+0x28>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	20001ca8 	.word	0x20001ca8
 8004200:	20001c94 	.word	0x20001c94

08004204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004246:	f000 fe7d 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <xTaskCheckForTimeOut+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004262:	d102      	bne.n	800426a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e023      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <xTaskCheckForTimeOut+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d007      	beq.n	8004286 <xTaskCheckForTimeOut+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e015      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d20b      	bcs.n	80042a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff9b 	bl	80041d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e004      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f000 fe77 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80042b6:	69fb      	ldr	r3, [r7, #28]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20001c94 	.word	0x20001c94
 80042c4:	20001ca8 	.word	0x20001ca8

080042c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <vTaskMissedYield+0x14>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20001ca4 	.word	0x20001ca4

080042e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e8:	f000 f852 	bl	8004390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <prvIdleTask+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d9f9      	bls.n	80042e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <prvIdleTask+0x2c>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004304:	e7f0      	b.n	80042e8 <prvIdleTask+0x8>
 8004306:	bf00      	nop
 8004308:	200017c0 	.word	0x200017c0
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e00c      	b.n	8004336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <prvInitialiseTaskLists+0x60>)
 8004328:	4413      	add	r3, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fcf0 	bl	8002d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b37      	cmp	r3, #55	; 0x37
 800433a:	d9ef      	bls.n	800431c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800433e:	f7fe fce7 	bl	8002d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004344:	f7fe fce4 	bl	8002d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <prvInitialiseTaskLists+0x6c>)
 800434a:	f7fe fce1 	bl	8002d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x70>)
 8004350:	f7fe fcde 	bl	8002d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <prvInitialiseTaskLists+0x74>)
 8004356:	f7fe fcdb 	bl	8002d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x78>)
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvInitialiseTaskLists+0x7c>)
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200017c0 	.word	0x200017c0
 8004374:	20001c20 	.word	0x20001c20
 8004378:	20001c34 	.word	0x20001c34
 800437c:	20001c50 	.word	0x20001c50
 8004380:	20001c64 	.word	0x20001c64
 8004384:	20001c7c 	.word	0x20001c7c
 8004388:	20001c48 	.word	0x20001c48
 800438c:	20001c4c 	.word	0x20001c4c

08004390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004396:	e019      	b.n	80043cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004398:	f000 fdd4 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fd3b 	bl	8002e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c2:	f000 fdef 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f810 	bl	80043ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e1      	bne.n	8004398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20001c64 	.word	0x20001c64
 80043e4:	20001c90 	.word	0x20001c90
 80043e8:	20001c78 	.word	0x20001c78

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ff8c 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 ff89 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800440e:	e018      	b.n	8004442 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004416:	2b01      	cmp	r3, #1
 8004418:	d103      	bne.n	8004422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 ff80 	bl	8005320 <vPortFree>
	}
 8004420:	e00f      	b.n	8004442 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004428:	2b02      	cmp	r3, #2
 800442a:	d00a      	beq.n	8004442 <prvDeleteTCB+0x56>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <prvDeleteTCB+0x54>
	}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004464:	e008      	b.n	8004478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20001c48 	.word	0x20001c48
 8004488:	20001cb0 	.word	0x20001cb0

0800448c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <xTaskGetSchedulerState+0x34>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449a:	2301      	movs	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	e008      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <xTaskGetSchedulerState+0x38>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044a8:	2302      	movs	r3, #2
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e001      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b2:	687b      	ldr	r3, [r7, #4]
	}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20001c9c 	.word	0x20001c9c
 80044c4:	20001cb8 	.word	0x20001cb8

080044c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d056      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <xTaskPriorityDisinherit+0xd0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d00a      	beq.n	80044fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	429a      	cmp	r2, r3
 8004530:	d02c      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d128      	bne.n	800458c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fc70 	bl	8002e24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <xTaskPriorityDisinherit+0xa4>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <xTaskPriorityDisinherit+0xd8>)
 800457a:	441a      	add	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fbf1 	bl	8002d6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	697b      	ldr	r3, [r7, #20]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200017bc 	.word	0x200017bc
 800459c:	20001c98 	.word	0x20001c98
 80045a0:	200017c0 	.word	0x200017c0

080045a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fc32 	bl	8002e24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c6:	d10a      	bne.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4819      	ldr	r0, [pc, #100]	; (800463c <prvAddCurrentTaskToDelayedList+0x98>)
 80045d8:	f7fe fbc7 	bl	8002d6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045dc:	e026      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d209      	bcs.n	800460a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe fbd5 	bl	8002db2 <vListInsert>
}
 8004608:	e010      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe fbcb 	bl	8002db2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d202      	bcs.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20001c94 	.word	0x20001c94
 8004638:	200017bc 	.word	0x200017bc
 800463c:	20001c7c 	.word	0x20001c7c
 8004640:	20001c4c 	.word	0x20001c4c
 8004644:	20001c48 	.word	0x20001c48
 8004648:	20001cb0 	.word	0x20001cb0

0800464c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004656:	f000 fb07 	bl	8004c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <xTimerCreateTimerTask+0x80>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0108 	add.w	r1, r7, #8
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fb31 	bl	8002cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	9202      	str	r2, [sp, #8]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	2302      	movs	r3, #2
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	460a      	mov	r2, r1
 800468c:	4910      	ldr	r1, [pc, #64]	; (80046d0 <xTimerCreateTimerTask+0x84>)
 800468e:	4811      	ldr	r0, [pc, #68]	; (80046d4 <xTimerCreateTimerTask+0x88>)
 8004690:	f7ff f8de 	bl	8003850 <xTaskCreateStatic>
 8004694:	4603      	mov	r3, r0
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 8004698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046a2:	2301      	movs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	613b      	str	r3, [r7, #16]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046c2:	697b      	ldr	r3, [r7, #20]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20001cec 	.word	0x20001cec
 80046d0:	080056a8 	.word	0x080056a8
 80046d4:	08004811 	.word	0x08004811
 80046d8:	20001cf0 	.word	0x20001cf0

080046dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTimerGenericCommand+0x2e>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <xTimerGenericCommand+0x98>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02a      	beq.n	8004768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	dc18      	bgt.n	8004756 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004724:	f7ff feb2 	bl	800448c <xTaskGetSchedulerState>
 8004728:	4603      	mov	r3, r0
 800472a:	2b02      	cmp	r3, #2
 800472c:	d109      	bne.n	8004742 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xTimerGenericCommand+0x98>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f107 0110 	add.w	r1, r7, #16
 8004736:	2300      	movs	r3, #0
 8004738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473a:	f7fe fca1 	bl	8003080 <xQueueGenericSend>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
 8004740:	e012      	b.n	8004768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <xTimerGenericCommand+0x98>)
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	f107 0110 	add.w	r1, r7, #16
 800474a:	2300      	movs	r3, #0
 800474c:	2200      	movs	r2, #0
 800474e:	f7fe fc97 	bl	8003080 <xQueueGenericSend>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24
 8004754:	e008      	b.n	8004768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <xTimerGenericCommand+0x98>)
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f107 0110 	add.w	r1, r7, #16
 800475e:	2300      	movs	r3, #0
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	f7fe fd8b 	bl	800327c <xQueueGenericSendFromISR>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20001cec 	.word	0x20001cec

08004778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <prvProcessExpiredTimer+0x94>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fb47 	bl	8002e24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d022      	beq.n	80047ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	18d1      	adds	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f000 f8d1 	bl	8004958 <prvInsertTimerInActiveList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047bc:	2300      	movs	r3, #0
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	2100      	movs	r1, #0
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff88 	bl	80046dc <xTimerGenericCommand>
 80047cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	4798      	blx	r3
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20001ce4 	.word	0x20001ce4

08004810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f857 	bl	80048d0 <prvGetNextExpireTime>
 8004822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4619      	mov	r1, r3
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f803 	bl	8004834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800482e:	f000 f8d5 	bl	80049dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004832:	e7f1      	b.n	8004818 <prvTimerTask+0x8>

08004834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800483e:	f7ff fa43 	bl	8003cc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f866 	bl	8004918 <prvSampleTimeNow>
 800484c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d130      	bne.n	80048b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d806      	bhi.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004862:	f7ff fa3f 	bl	8003ce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff85 	bl	8004778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800486e:	e024      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <prvProcessTimerOrBlockTask+0x90>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <prvProcessTimerOrBlockTask+0x50>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <prvProcessTimerOrBlockTask+0x52>
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <prvProcessTimerOrBlockTask+0x94>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	f7fe ffa7 	bl	80037e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800489a:	f7ff fa23 	bl	8003ce4 <xTaskResumeAll>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <prvProcessTimerOrBlockTask+0x98>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
}
 80048b4:	e001      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048b6:	f7ff fa15 	bl	8003ce4 <xTaskResumeAll>
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20001ce8 	.word	0x20001ce8
 80048c8:	20001cec 	.word	0x20001cec
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <prvGetNextExpireTime+0x16>
 80048e2:	2201      	movs	r2, #1
 80048e4:	e000      	b.n	80048e8 <prvGetNextExpireTime+0x18>
 80048e6:	2200      	movs	r2, #0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e001      	b.n	8004904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20001ce4 	.word	0x20001ce4

08004918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004920:	f7ff fa7e 	bl	8003e20 <xTaskGetTickCount>
 8004924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d205      	bcs.n	800493c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004930:	f000 f936 	bl	8004ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e002      	b.n	8004942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004942:	4a04      	ldr	r2, [pc, #16]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20001cf4 	.word	0x20001cf4

08004958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d812      	bhi.n	80049a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d302      	bcc.n	8004992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e01b      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <prvInsertTimerInActiveList+0x7c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fa08 	bl	8002db2 <vListInsert>
 80049a2:	e012      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d206      	bcs.n	80049ba <prvInsertTimerInActiveList+0x62>
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e007      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvInsertTimerInActiveList+0x80>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe f9f4 	bl	8002db2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ca:	697b      	ldr	r3, [r7, #20]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20001ce8 	.word	0x20001ce8
 80049d8:	20001ce4 	.word	0x20001ce4

080049dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e2:	e0ca      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da18      	bge.n	8004a1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	3304      	adds	r3, #4
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61fb      	str	r3, [r7, #28]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	6850      	ldr	r0, [r2, #4]
 8004a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 80aa 	blt.w	8004b78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f9f5 	bl	8002e24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff6b 	bl	8004918 <prvSampleTimeNow>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	f200 8097 	bhi.w	8004b7a <prvProcessReceivedCommands+0x19e>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <prvProcessReceivedCommands+0x78>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a7d 	.word	0x08004a7d
 8004a60:	08004af1 	.word	0x08004af1
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a7d 	.word	0x08004a7d
 8004a74:	08004af1 	.word	0x08004af1
 8004a78:	08004b05 	.word	0x08004b05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	18d1      	adds	r1, r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f7ff ff5c 	bl	8004958 <prvInsertTimerInActiveList>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d069      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05e      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ace:	f7ff fe05 	bl	80046dc <xTimerGenericCommand>
 8004ad2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d14f      	bne.n	8004b7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61bb      	str	r3, [r7, #24]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b02:	e03a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	617b      	str	r3, [r7, #20]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	18d1      	adds	r1, r2, r3
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b48:	f7ff ff06 	bl	8004958 <prvInsertTimerInActiveList>
					break;
 8004b4c:	e015      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5e:	f000 fbdf 	bl	8005320 <vPortFree>
 8004b62:	e00a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b76:	e000      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <prvProcessReceivedCommands+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1d39      	adds	r1, r7, #4
 8004b80:	2200      	movs	r2, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fc16 	bl	80033b4 <xQueueReceive>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f47f af2a 	bne.w	80049e4 <prvProcessReceivedCommands+0x8>
	}
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20001cec 	.word	0x20001cec

08004ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ba6:	e048      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe f92f 	bl	8002e24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02e      	beq.n	8004c3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90e      	bls.n	8004c0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bfa:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fe f8d4 	bl	8002db2 <vListInsert>
 8004c0a:	e016      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	2100      	movs	r1, #0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fd60 	bl	80046dc <xTimerGenericCommand>
 8004c1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	603b      	str	r3, [r7, #0]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1b1      	bne.n	8004ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20001ce4 	.word	0x20001ce4
 8004c64:	20001ce8 	.word	0x20001ce8

08004c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c6e:	f000 f969 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d120      	bne.n	8004cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c7c:	f7fe f848 	bl	8002d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c80:	4813      	ldr	r0, [pc, #76]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c82:	f7fe f845 	bl	8002d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <prvCheckForValidListAndQueue+0x6c>)
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvCheckForValidListAndQueue+0x70>)
 8004c8e:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <prvCheckForValidListAndQueue+0x74>)
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x78>)
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fe f953 	bl	8002f48 <xQueueGenericCreateStatic>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <prvCheckForValidListAndQueue+0x7c>)
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fd6c 	bl	8003794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cbc:	f000 f972 	bl	8004fa4 <vPortExitCritical>
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20001cec 	.word	0x20001cec
 8004ccc:	20001cbc 	.word	0x20001cbc
 8004cd0:	20001cd0 	.word	0x20001cd0
 8004cd4:	20001ce4 	.word	0x20001ce4
 8004cd8:	20001ce8 	.word	0x20001ce8
 8004cdc:	20001d98 	.word	0x20001d98
 8004ce0:	20001cf8 	.word	0x20001cf8
 8004ce4:	080056b0 	.word	0x080056b0

08004ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b04      	subs	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <pxPortInitialiseStack+0x64>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b14      	subs	r3, #20
 8004d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f06f 0202 	mvn.w	r2, #2
 8004d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b20      	subs	r3, #32
 8004d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	08004d51 	.word	0x08004d51

08004d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <prvTaskExitError+0x54>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d62:	d00a      	beq.n	8004d7a <prvTaskExitError+0x2a>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvTaskExitError+0x28>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60bb      	str	r3, [r7, #8]
}
 8004d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d8e:	bf00      	nop
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0fc      	beq.n	8004d90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000024 	.word	0x20000024
	...

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200017bc 	.word	0x200017bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7ff f852 	bl	8003fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff1e 	bl	8004d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20001de8 	.word	0x20001de8
 8004f34:	20001dec 	.word	0x20001dec
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	20000024 	.word	0x20000024
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	20000024 	.word	0x20000024
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000024 	.word	0x20000024
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe ffc0 	bl	8003fb4 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	200017bc 	.word	0x200017bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fedd 	bl	8003e40 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <xPortSysTickHandler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20001de8 	.word	0x20001de8
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20001dec 	.word	0x20001dec

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fd98 	bl	8003cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fd04 	bl	8003ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200059f8 	.word	0x200059f8
 800530c:	20005a0c 	.word	0x20005a0c
 8005310:	200059fc 	.word	0x200059fc
 8005314:	200059f0 	.word	0x200059f0
 8005318:	20005a00 	.word	0x20005a00
 800531c:	20005a04 	.word	0x20005a04

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fc8e 	bl	8003cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fc8b 	bl	8003ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20005a0c 	.word	0x20005a0c
 80053dc:	200059fc 	.word	0x200059fc
 80053e0:	20005a08 	.word	0x20005a08

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20001df0 	.word	0x20001df0
 8005494:	200059f0 	.word	0x200059f0
 8005498:	200059f8 	.word	0x200059f8
 800549c:	20005a00 	.word	0x20005a00
 80054a0:	200059fc 	.word	0x200059fc
 80054a4:	20005a0c 	.word	0x20005a0c

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200059f0 	.word	0x200059f0
 8005558:	200059f8 	.word	0x200059f8

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 f82e 	bl	80055d0 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08007fac 	.word	0x08007fac
 8005598:	08007fac 	.word	0x08007fac
 800559c:	08007fac 	.word	0x08007fac
 80055a0:	08007fb0 	.word	0x08007fb0

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
